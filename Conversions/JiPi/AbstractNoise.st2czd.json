{"Shader":{"ver":"0.1","info":{"id":"st2czd","date":"1650148018","viewed":30,"name":"Abstract Noise","username":"wildniklin","description":"abstract art\n\nI was actually expecting the SDF to look terrible, but it turned out to look pretty decent. It's definitely not exact, but it's not terrible either.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"const int MAX_STEPS = 150;\nconst float MAX_DIST = 20.0;\nconst float MIN_DIST = 0.01;\n\nfloat Random1(float x, float y, float z) {\n    return (fract(sin((x * 12.9898) + (y * 78.233) + (z * 195.1533)) * 43758.5453123) * 2.0) - 1.0;\n}\n\nfloat SmoothNoise1(vec3 p) {\n    float ix0 = floor(p.x),\n          iy0 = floor(p.y),\n          iz0 = floor(p.z),\n          ix1 = ix0 + 1.0,\n          iy1 = iy0 + 1.0,\n          iz1 = iz0 + 1.0,\n          fx = p.x - ix0,\n          fy = p.y - iy0,\n          fz = p.z - iz0;\n\n    fx *= fx * (3.0 - (fx * 2.0));\n    fy *= fy * (3.0 - (fy * 2.0));\n    fz *= fz * (3.0 - (fz * 2.0));\n\n    return mix(mix(mix(Random1(ix0, iy0, iz0), Random1(ix1, iy0, iz0), fx),\n                   mix(Random1(ix0, iy1, iz0), Random1(ix1, iy1, iz0), fx), fy),\n               mix(mix(Random1(ix0, iy0, iz1), Random1(ix1, iy0, iz1), fx),\n                   mix(Random1(ix0, iy1, iz1), Random1(ix1, iy1, iz1), fx), fy), fz);\n}\n\nfloat FractalSmoothNoise1(vec3 p) {\n    float y = 0.0;\n    \n    float amplitude = 0.5;\n    float frequency = 1.0;\n    \n    float gain = 0.5;\n    float lacunarity = 2.0;\n    for(int i = 0; i < 8; i++) {\n        y += SmoothNoise1(p * frequency) * amplitude;\n        frequency *= lacunarity;\n        amplitude *= gain;\n    }\n    \n    return y;\n}\n\nfloat Map(vec3 p) {\n    return ((FractalSmoothNoise1(p + vec3(0.5)) * 0.5) + 0.5) - 0.3;\n}\n\nfloat March(vec3 ro, vec3 rd) {\n    float d = 0.0;\n    for(int i = 0; i < MAX_STEPS; i++) {\n        float sd = Map(ro + (rd * d));\n        d += sd;\n        if(d > MAX_DIST) return MAX_DIST;\n        if(abs(sd) < MIN_DIST) break;\n    }\n    return d;\n}\n\nvoid mainImage(out vec4 o, vec2 i) {\n    vec2 uv = (i - (0.5 *  iResolution.xy)) \/ min(iResolution.x, iResolution.y);\n\n    vec3 col = vec3(0.0);\n\n    vec3 ro = vec3(0.0, 0.0, iTime * 3.0);\n    vec3 rd = normalize(vec3(uv, 1.0));\n\n    float d = March(ro, rd);\n    vec3 p = ro + (rd * d);\n\n    col += abs(d) \/ MAX_DIST;\n\n    o = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}}