{"Shader":{"ver":"0.1","info":{"id":"7ssyzr","date":"1641676510","viewed":253,"name":"GPU and OS detector v2","username":"archee","description":"This will guess your GPU manufacturer and OS based on the inaccuracy of math functions. Displaying resulting hashes at top-right corner. Please comment your hardware and hashes, if shown unknown.","likes":19,"published":3,"flags":0,"usePreview":0,"tags":["hash","gpudetector","determinism"],"hasliked":0},"renderpass":[{"inputs":[{"id":49,"src":"\/media\/a\/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/*\nMath functions are implemented differently in each GPU and drivers.\nThis will run the same calculation compile time and runtime, \nand print the two results in the top-right corner.\nIt will guess your GPU and OS based on the hashes.\n\nReciptrocal, sqrt, sin all probably work with constants in a table for a polynom.\n\nIf your hardware is unknown or wrong, please comment your hashes and hardware description.\n\n*\/\n#define DYN_ZERO min(0.,iTime) \/\/ forcing runtime calculation\nint hardwareHash(float start)\n{\n    float a=start;\n    for(int i=0;i<20;i++)\n    {\n        a=fract(normalize(vec3(a+0.1,6.11,5.22)).x*3.01);\n        a+=sin(sqrt(a)*100.3)*0.31;\n    }\n    return int(fract(fract(abs(a))*256.)*256.*256.);\n}\n\n\/\/ font and printing\nvec2 printCursor;\nfloat backGroundColor=0.;\nfloat printColor=0.;\n#define C(c) printCursor.x-=.5;char(printCursor,c);\nvoid char(vec2 p, int c) \n{\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return;\n\tprintColor= max(printColor, texture( iChannel0, p\/16. + fract( vec2(c, 15-c\/16) \/ 16. ) ).x+backGroundColor);\n}\nvoid printHex(int i)\n{\n    float div = 16.*16.*16.;\n    for(int j=3;j>=0;j--)\n    {\n        float digit = fract(float(i)\/div\/16.)*16.;\n        div\/=16.;\n        C(int((digit<10.?48.:65.-10.)+digit));\n    }\n}\n\n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    uv \/= min(iResolution.y,iResolution.x\/1.9);\n    \n        \n    int hash_runtime = hardwareHash(0.+DYN_ZERO);\n    int hash_comptime = hardwareHash(0.);\n    \n   \n    int os=UNKNOWN;\n    int gpu=UNKNOWN;\n    int gldx=UNKNOWN;\n    \n    \/\/ nVidia\n    if (hash_runtime==0x1EC4) { gpu=NVIDIA; } \/\/ 3060 WindowsGL and Linux\n    if (hash_runtime==0xFA2D) { os=LINUX; gpu=NVIDIA; }  \/\/ 1050\n    if (hash_runtime==0x716D) { gpu=NVIDIA; } \/\/ Quatro\n    \n    \/\/ AMD\n    if (hash_runtime==0x58A4) { os=WINDOWS; gpu=AMD; gldx=GL;}\/\/ AMD GCN4\n    if (hash_runtime==0x3F8E) { os=WINDOWS; gpu=AMD; gldx=ANGLE;}\/\/ AMD GCN4\n    if (hash_runtime==0x76B5) { os=LINUX; gpu=AMD; gldx=GL;}\/\/ AMD GCN4\n    if (hash_runtime==0x47EF) { gpu=AMD; } \/\/ AMD RDNA \n    if (hash_runtime==0xF04A) { gpu=AMD; os=WINDOWS; } \/\/ AMD RDNA angle\n    if (hash_runtime==0x40DC) { gpu=AMD; } \/\/ AMD GCN5  (Vega 64)\n    if (hash_runtime==0x553A) { gpu=AMD; os=OSXIOS; gldx=GL; } \/\/ CT:00E2 \n    \n    \n    \/\/ intel\n    if (hash_runtime==0x859D) { gpu=INTEL; } \/\/ Intel 7.gen \/\/ Windows?\n    if (hash_runtime==0xEEE7) { gpu=INTEL; } \/\/ Intel 2.gen or 7. gen linux?\n    if (hash_runtime==0x289F) { gpu=INTEL; os=OSXIOS; gldx=GL; }  \/\/ OSX ( Intel 2.gen Mac mini Catalina)\n    if (hash_runtime==0xE6DB) { gpu=INTEL; os=OSXIOS; gldx=GL; } \/\/ CT: 8DEA\n    \n    \/\/ software rendering\n    if (hash_runtime==0xFDf0) { gpu=SOFTWARE; } \/\/ Linux?\n    if (hash_runtime==0x884E) { gpu=SOFTWARE; gldx=GL; }\n\n    \/\/ adreno\n    if (hash_runtime==0xF09B) { gpu=ANDROID; os=ANDROID; gldx=GL; }\n    \n    \/\/ mali\n    if (hash_runtime==0x5Af5) { gpu=MALI; os=LINUX; gldx=GL; } \/\/ Asus Tinkerboard\n    if (hash_runtime==0xACB3) { gpu=MALI; os=ANDROID; gldx=GL; }\n    \n    \/\/ apple\n    if (hash_runtime==0x89D8) { gpu=APPLE; os=OSXIOS; gldx=GL; } \/\/ CT=0xEE26 iPad 6.gen\n    if (hash_runtime==0x8C7B) { gpu=APPLE; os=OSXIOS; gldx=GL; } \/\/ CT=0xEE26 Apple A14\n    if (hash_runtime==0x9F12) { gpu=APPLE; os=OSXIOS; gldx=GL; } \/\/ CT=0xEE26 iPhone Safari\n    \n    \n    if (hash_comptime==0x83CA) { gldx = GL; os=WINDOWS; }; \/\/ OpenGL Windows AMD\n    if (hash_comptime==0xFDF0) { gldx = GL; }; \/\/ OpenGL Windows, Linux (non-nVidia)\n    if (hash_comptime==0xE6DB) { gldx = GL; os=LINUX; }; \/\/ OpenGL Linux  AMD\/Intel\/Software\n    if (hash_comptime==0x1D23) { gldx = GL; } \/\/ only with nVidia, any OS\n    if (hash_comptime==0x239C) { gldx = ANGLE; os = WINDOWS; }; \n    if (hash_comptime==0x00E2) { gpu=AMD; os=OSXIOS; gldx=GL; }; \/\/ Maxbook AMD Radeon Pro 5500M\n    \n    \n    uv *= 10.;\n    int line = 9-int(uv.y);\n    int column = int(uv.x\/5.);\n    printCursor = vec2(mod(uv.x,5.),fract(uv.y));\n    \n    if (column==0)\n    {\n        backGroundColor = (line==gpu)?0.5:0.;\n        if (line==UNKNOWN) { C(_u);C(_n);C(_k);C(_n);C(_o);C(_w);C(_n); }\n        if (line==NVIDIA) {C(_n);C(_V);C(_i);C(_d);C(_i);C(_a);}\n        if (line==AMD) {C(_A);C(_M);C(_D);}\n        if (line==INTEL) {C(_I);C(_n);C(_t);C(_e);C(_l);}\n        if (line==ADRENO) { C(_A);C(_d);C(_r);C(_e);C(_n);C(_o); }\n        if (line==MALI) {C(_M);C(_a);C(_l);C(_i);}\n        if (line==SOFTWARE) {C(_s);C(_o);C(_f);C(_t);C(_w);C(_a);C(_r);C(_e);}\n        if (line==APPLE) {C(_A);C(_p);C(_p);C(_l);C(_e);}\n    }\n    if (column==1)\n    {\n        backGroundColor = (line==os)?0.5:0.;\n        if (line==UNKNOWN) { C(_u);C(_n);C(_k);C(_n);C(_o);C(_w);C(_n); }\n        if (line==WINDOWS) { C(_W);C(_i);C(_n); }\n        if (line==LINUX) { C(_L);C(_i);C(_n);C(_u);C(_x); }\n        if (line==OSXIOS) { C(_O);C(_S);C(_X); C(_slash); C(_i);C(_O);C(_S); }\n        if (line==ANDROID) { C(_A);C(_n);C(_d);C(_r);C(_o);C(_i);C(_d); };\n    }\n    if (column==2)\n    {\n        backGroundColor = (line==gldx)?0.5:0.;\n        if (line==UNKNOWN) { C(_u);C(_n);C(_k);C(_n);C(_o);C(_w);C(_n); }\n        if (line==GL) {C(_G);C(_L);}\n        if (line==ANGLE) { C(_A);C(_N);C(_G);C(_L);C(_E);}\n    }\n    if (column==3)\n    {\n        if (line==0 || line==1) printHex(line==0?hash_runtime:hash_comptime);\n    }\n    \n    \n    O = vec4(printColor,pow(printColor,2.0),pow(printColor,3.0),0.)*0.8;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define UNKNOWN 0\n#define WINDOWS 1\n#define LINUX 2\n#define OSXIOS 3\n#define ANDROID 4\n\n#define NVIDIA 1\n#define AMD 2\n#define INTEL 3\n#define ADRENO 4\n#define MALI 5\n#define APPLE 6\n#define SOFTWARE 7\n#define VIDEOCORE 8\n\n#define GL 1\n#define ANGLE 2\n\n#define _space 32\n\n#define _0 48\n#define _1 49\n#define _2 50\n#define _3 51\n#define _4 52\n#define _5 53\n#define _6 54\n#define _7 55\n#define _8 56\n#define _9 57\n\n#define _A 65\n#define _B 66\n#define _C 67\n#define _D 68\n#define _E 69\n#define _F 70\n#define _G 71\n#define _H 72\n#define _I 73\n#define _J 74\n#define _K 75\n#define _L 76\n#define _M 77\n#define _N 78\n#define _O 79\n#define _P 80\n#define _Q 81\n#define _R 82\n#define _S 83\n#define _T 84\n#define _U 85\n#define _V 86\n#define _W 87\n#define _X 88\n#define _Y 89\n#define _Z 90\n\n\n#define _a 97\n#define _b 98\n#define _c 99\n#define _d 100\n#define _e 101\n#define _f 102\n#define _g 103\n#define _h 104\n#define _i 105\n#define _j 106\n#define _k 107\n#define _l 108\n#define _m 109\n#define _n 110\n#define _o 111\n#define _p 112\n#define _q 113\n#define _r 114\n#define _s 115\n#define _t 116\n#define _u 117\n#define _v 118\n#define _w 119\n#define _x 120\n#define _y 121\n#define _z 122\n\n#define _slash 47\n","name":"Common","description":"","type":"common"}]}}