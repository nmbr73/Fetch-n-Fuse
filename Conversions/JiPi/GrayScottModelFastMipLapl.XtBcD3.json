{"Shader":{"ver":"0.1","info":{"id":"XtBcD3","date":"1510244966","viewed":1266,"name":"Gray-Scott Model fast (MIP Lapl)","username":"FabriceNeyret2","description":"revisit [url]https:\/\/www.shadertoy.com\/view\/XtjcWK[\/url] using MIPmap to calculate Laplacian (in spirit of Multigrids and Difference of Gaussians)\nMouse paint.\nx8 accelerated version. See full screen !    ref: [url]http:\/\/mrob.com\/pub\/comp\/xmorphia\/[\/url]","likes":23,"published":3,"flags":32,"usePreview":0,"tags":["simulation","mipmap","diffusion","gray","reactiondiffusion","reaction","grayscott","scottmodel"],"hasliked":0},"renderpass":[{"inputs":[{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"void mainImage(out vec4 O, vec2 U) {  O = texelFetch( iChannel0, ivec2(U), 0);  O.x = 1.-O.x; }","name":"Image","description":"","type":"image"},{"inputs":[{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ directly inspired from https:\/\/www.shadertoy.com\/view\/XtjcWK\n\/\/ But using MIPmap to evaluate Laplacian\n\n#define T(z) texture(iChannel0, U, z)\n\nvoid mainImage( out vec4 O,  vec2 U )\n{  \n    vec2 R = iResolution.xy;\n    U \/= R;\n    \n   \tvec4 C = T(0.),\n         D = 4.5* ( T(.66) - C );             \/\/ laplacian\n    \n    float dt = 2.,\n          f = .01 + U.x\/13.,\n          k = .04 + U.y\/35.,\n          s = C.x*C.y*C.y;\n\n    C += dt * vec4( -s + f*(1.-C.x) + .2*D.x, \/\/ Gray-Scott Model + integration\n                     s - (f+k)*C.y  + .1*D.y, \/\/ http:\/\/mrob.com\/pub\/comp\/xmorphia\/\n                     0, 0 );\n\n    O = length( iMouse.xy  -U*R ) < 10.\n            ? vec4(.25,.5,0,0)                \/\/ mouse paint\n            : C;\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/ directly inspired from https:\/\/www.shadertoy.com\/view\/XtjcWK\n\/\/ But using MIPmap to evaluate Laplacian\n\n#define T(z) texture(iChannel0, U, z)\n\nvoid mainImage( out vec4 O,  vec2 U )\n{  \n    vec2 R = iResolution.xy;\n    U \/= R;\n    \n   \tvec4 C = T(0.),\n         D = 4.5* ( T(.66) - C );             \/\/ laplacian\n    \n    float dt = 2.,\n          f = .01 + U.x\/13.,\n          k = .04 + U.y\/35.,\n          s = C.x*C.y*C.y;\n\n    C += dt * vec4( -s + f*(1.-C.x) + .2*D.x, \/\/ Gray-Scott Model + integration\n                     s - (f+k)*C.y  + .1*D.y, \/\/ http:\/\/mrob.com\/pub\/comp\/xmorphia\/\n                     0, 0 );\n\n    O = length( iMouse.xy  -U*R ) < 10.\n            ? vec4(.25,.5,0,0)                \/\/ mouse paint\n            : C;\n\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":259,"channel":0}],"code":"\/\/ directly inspired from https:\/\/www.shadertoy.com\/view\/XtjcWK\n\/\/ But using MIPmap to evaluate Laplacian\n\n#define T(z) texture(iChannel0, U, z)\n\nvoid mainImage( out vec4 O,  vec2 U )\n{  \n    vec2 R = iResolution.xy;\n    U \/= R;\n    \n   \tvec4 C = T(0.),\n         D = 4.5* ( T(.66) - C );             \/\/ laplacian\n    \n    float dt = 2.,\n          f = .01 + U.x\/13.,\n          k = .04 + U.y\/35.,\n          s = C.x*C.y*C.y;\n\n    C += dt * vec4( -s + f*(1.-C.x) + .2*D.x, \/\/ Gray-Scott Model + integration\n                     s - (f+k)*C.y  + .1*D.y, \/\/ http:\/\/mrob.com\/pub\/comp\/xmorphia\/\n                     0, 0 );\n\n    O = length( iMouse.xy  -U*R ) < 10.\n            ? vec4(.25,.5,0,0)                \/\/ mouse paint\n            : C;\n\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":260,"channel":0}],"code":"\/\/ directly inspired from https:\/\/www.shadertoy.com\/view\/XtjcWK\n\/\/ But using MIPmap to evaluate Laplacian\n\n#define T(z) texture(iChannel0, U, z)\n\nvoid mainImage( out vec4 O,  vec2 U )\n{  \n    vec2 R = iResolution.xy;\n    U \/= R;\n    \n   \tvec4 C = T(0.),\n         D = 4.5* ( T(.66) - C );             \/\/ laplacian\n    \n    float dt = 2.,\n          f = .01 + U.x\/13.,\n          k = .04 + U.y\/35.,\n          s = C.x*C.y*C.y;\n\n    C += dt * vec4( -s + f*(1.-C.x) + .2*D.x, \/\/ Gray-Scott Model + integration\n                     s - (f+k)*C.y  + .1*D.y, \/\/ http:\/\/mrob.com\/pub\/comp\/xmorphia\/\n                     0, 0 );\n\n    O = length( iMouse.xy  -U*R ) < 10.\n            ? vec4(.25,.5,0,0)                \/\/ mouse paint\n            : C;\n\n}","name":"Buffer D","description":"","type":"buffer"}]}}