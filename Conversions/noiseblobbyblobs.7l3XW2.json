{"Shader":{"ver":"0.1","info":{"id":"7l3XW2","date":"1639780138","viewed":98,"name":"noise blobby blobs","username":"SnoopethDuckDuck","description":"float v = h21(floor(h21(ipos) + iTime) + 0.01 * ipos); is a nice technique\n\ne.g.\nhttps:\/\/www.shadertoy.com\/view\/7tdSDj","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["e"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"#define pi 3.14159\n\nfloat thc(float a, float b) {\n    return tanh(a * cos(b)) \/ tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) \/ tanh(a);\n}\n\nvec3 thc(float a, vec3 b) {\n    return tanh(a * cos(b)) \/ tanh(a);\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat h21 (float a, float b, float sc) {\n    a = mod(a, sc); b = mod(b, sc);\n    return fract(sin(dot(vec2(a, b), vec2(12.9898, 78.233)))*43758.5453123);\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)\/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec2 pnt(vec2 ipos, float sc) {\n    float h = h21(ipos.x, ipos.y, sc);\n    float t = iTime + 10. * h;\n    float k = 1.5 +  h;\n    return 0.4 * vec2(thc(4. * (1.-h), 100. + k * t), \n                      ths(4. * h, 100. + (1.-k) * t));\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b * cos(6.28318*(c*t+d) );\n}\n\nfloat fn(vec2 p, float time) {\n    float m = fract(h21(p) + time);\n    return m * m * (3. - 2. * m);\n}\n\nfloat test(vec2 p, float time, float a) {\n    return h21(floor(h21(p) + time) + a + 0.01 * p);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)\/ iResolution.y;\n    vec2 ouv = uv;\n   \/\/ ouv *= 2.3;\n        \n    float a = atan(uv.y, uv.x);\n    float r = length(uv); \n    uv.y += 0.02 * iTime; \/\/ 0.06\n\n    float sc = 20.;\n    vec2 fpos = fract(sc * uv) - 0.; \/\/ dont include -0.5, so box lerp is easier\n    vec2 ipos = floor(sc * uv) + 0.;    \n    \n    \/\/ box corner points\n    vec2 lp = ipos + vec2(1.,0.);\n    vec2 tp = ipos + vec2(0.,1.);\n    vec2 tlp = ipos + vec2(1.);\n    vec2 idp = ipos;\n\n    float time = 0.5 * iTime;\n    \n    \/\/ corner value 1: floor(time)\n    float l = test(lp, time, 0.);\n    float t = test(tp, time, 0.);\n    float tl = test(tlp, time, 0.);\n    float id = test(idp, time, 0.);\n    \n    \/\/ corner value 2: floor(time) + 1.\n    float l2 = test(lp, time, 1.);\n    float t2 = test(tp, time, 1.);\n    float tl2 = test(tlp, time, 1.);\n    float id2 = test(idp, time, 1.);\n    \n    \/\/ lerp between corner values, present and future\n    l = mix(l, l2, fn(lp, time));\n    t = mix(t, t2, fn(tp, time));\n    tl = mix(tl, tl2, fn(tlp, time));\n    id = mix(id, id2, fn(idp, time));\n    \n    \/\/ smooth fpos so end points meet continuously\n    vec2 sfpos = fpos * fpos * (3. - 2. * fpos);\n\n    \/\/ box lerp corner values\n    float v = l  * sfpos.x      * (1.-sfpos.y)\n     \t    + t  * (1.-sfpos.x) * sfpos.y\n     \t    + tl * sfpos.x      * sfpos.y\n      \t    + id * (1.-sfpos.x) * (1.-sfpos.y);\n    \n    \/\/ remove me to see grid version\n    v += 0.4 + 1.2 * (1. - length(ouv)) * cos(20. * length(ouv) + 0. * atan(ouv.y, ouv.x) - 2. * iTime);\n    \n    float k = 0.1; \n    float s = smoothstep(-k, k, -v + 0.3);\n    s = pow(4. * (1.-s) * s, 2.);\n    \n    float k2 = 0.1;\n    s = step(0.4, s); \/\/smoothstep(-k2, k2, s - 0.4);\n\n    vec3 col = vec3(s);\n    vec3 e = vec3(1.);\n    col = s * pal(h21(vec2(ipos)), e, e, e, vec3(0.,0.33,0.66));\n    \n    \n    fragColor = vec4(col, 1.); \/\/vec4(v);\n}","name":"Image","description":"","type":"image"}]}}