{"Shader":{"ver":"0.1","info":{"id":"ldl3zn","date":"1362179912","viewed":8423,"name":"Timewarp","username":"P_Malin","description":"A raymarching shader with a Dali theme. \nUse the mouse to rotate.","likes":101,"published":3,"flags":1,"usePreview":0,"tags":["raymarching"],"hasliked":0},"renderpass":[{"inputs":[{"id":1,"src":"\/media\/a\/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":6,"src":"\/media\/a\/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ TimeWarp @P_Malin\n\/\/ https:\/\/www.shadertoy.com\/view\/ldl3zn\n\n\/\/ Scanline render experiment version here: https:\/\/www.shadertoy.com\/view\/XtsSDH\n \n#define ENABLE_REFLECTIONS\n#define ENABLE_FOG\n#define ENABLE_SPECULAR\n#define ENABLE_DIRECTIONAL_LIGHT\n\/\/#define ENABLE_MONTE_CARLO\n\nfloat kPI = acos(0.0);\n#define kTwoPI (kPI * 2.0)\n\n#ifdef ENABLE_MONTE_CARLO\nuniform sampler2D backbuffer;\nvec4 gPixelRandom;\nvec3 gRandomNormal;\n \nvoid CalcPixelRandom()\n{\n    \/\/ Nothing special here, just numbers generated by bashing keyboard\n    vec4 s1 = sin(iTime * 3.3422 + fragCoord.xxxx * vec4(324.324234, 563.324234, 657.324234, 764.324234)) * 543.3423;\n    vec4 s2 = sin(iTime * 1.3422 + fragCoord.yyyy * vec4(567.324234, 435.324234, 432.324234, 657.324234)) * 654.5423;\n    gPixelRandom = fract(2142.4 + s1 + s2);\n    gRandomNormal = normalize( gPixelRandom.xyz - 0.5);\n}\n\nfloat GetTime()\n{\n\treturn 0.0;\n}\n#else\nfloat GetTime()\n{\n\treturn iTime;\n}\n#endif\n \nstruct C_Ray\n{\n    vec3 vOrigin;\n    vec3 vDir;\n};\n \nstruct C_HitInfo\n{\n    vec3 vPos;\n    float fDistance;\n    vec3 vObjectId;\n};\n \nstruct C_Material\n{\n    vec3 cAlbedo;\n    float fR0;\n    float fSmoothness;\n    vec2 vParam;\n};\n \nvec3 RotateX( const in vec3 vPos, const in float fAngle )\n{\n    float s = sin(fAngle);\n    float c = cos(fAngle);\n   \n    vec3 vResult = vec3( vPos.x, c * vPos.y + s * vPos.z, -s * vPos.y + c * vPos.z);\n   \n    return vResult;\n}\n \nvec3 RotateY( const in vec3 vPos, const in float fAngle )\n{\n    float s = sin(fAngle);\n    float c = cos(fAngle);\n   \n    vec3 vResult = vec3( c * vPos.x + s * vPos.z, vPos.y, -s * vPos.x + c * vPos.z);\n   \n    return vResult;\n}\n   \nvec3 RotateZ( const in vec3 vPos, const in float fAngle )\n{\n    float s = sin(fAngle);\n    float c = cos(fAngle);\n   \n    vec3 vResult = vec3( c * vPos.x + s * vPos.y, -s * vPos.x + c * vPos.y, vPos.z);\n   \n    return vResult;\n}\n \nvec4 DistCombineUnion( const in vec4 v1, const in vec4 v2 )\n{\n    \/\/if(v1.x < v2.x) return v1; else return v2;\n    return mix(v1, v2, step(v2.x, v1.x));\n}\n \nvec4 DistCombineIntersect( const in vec4 v1, const in vec4 v2 )\n{\n    return mix(v2, v1, step(v2.x,v1.x));\n}\n \nvec4 DistCombineSubtract( const in vec4 v1, const in vec4 v2 )\n{\n    return DistCombineIntersect(v1, vec4(-v2.x, v2.yzw));\n}\n \nvec3 DomainRepeatXZGetTile( const in vec3 vPos, const in vec2 vRepeat, out vec2 vTile )\n{\n    vec3 vResult = vPos;\n    vec2 vTilePos = (vPos.xz \/ vRepeat) + 0.5;\n    vTile = floor(vTilePos + 1000.0);\n    vResult.xz = (fract(vTilePos) - 0.5) * vRepeat;\n    return vResult;\n}\n \nvec3 DomainRepeatXZ( const in vec3 vPos, const in vec2 vRepeat )\n{\n    vec3 vResult = vPos;\n    vec2 vTilePos = (vPos.xz \/ vRepeat) + 0.5;\n    vResult.xz = (fract(vTilePos) - 0.5) * vRepeat;\n    return vResult;\n}\n \nvec3 DomainRepeatY( const in vec3 vPos, const in float fSize )\n{\n    vec3 vResult = vPos;\n    vResult.y = (fract(vPos.y \/ fSize + 0.5) - 0.5) * fSize;\n    return vResult;\n}\n \nvec3 DomainRotateSymmetry( const in vec3 vPos, const in float fSteps )\n{\n    float angle = atan( vPos.x, vPos.z );\n \n    float fScale = fSteps \/ (kTwoPI);\n    float steppedAngle = (floor(angle * fScale + 0.5)) \/ fScale;\n \n    float s = sin(-steppedAngle);\n    float c = cos(-steppedAngle);\n \n    vec3 vResult = vec3( c * vPos.x + s * vPos.z,\n                vPos.y,\n                -s * vPos.x + c * vPos.z);\n \n    return vResult;\n}\n \nfloat GetDistanceXYTorus( const in vec3 p, const in float r1, const in float r2 )\n{\n    vec2 q = vec2(length(p.xy)-r1,p.z);\n    return length(q)-r2;\n}\nfloat GetDistanceYZTorus( const in vec3 p, const in float r1, const in float r2 )\n{\n    vec2 q = vec2(length(p.yz)-r1,p.x);\n    return length(q)-r2;\n}\nfloat GetDistanceCylinderY(const in vec3 vPos, const in float r)\n{\n    return length(vPos.xz) - r;\n}\nfloat GetDistanceBox( const in vec3 vPos, const in vec3 vSize )\n{\n    vec3 vDist = (abs(vPos) - vSize);\n    return max(vDist.x, max(vDist.y, vDist.z));\n}\n \nfloat GetDistanceRoundedBox( const in vec3 vPos, const in vec3 vSize, float fRadius )\n{\n    vec3 vClosest = max(min(vPos, vSize), -vSize);\n    return length(vClosest - vPos) - fRadius;\n}\n \nfloat GetDistanceWinder( const in vec3 vPos )\n{\n   float fWinderSize = 0.15;\n   float fAngle = atan(vPos.x, vPos.z) + vPos.y * 2.0;\n\t\n   float fBump = 1.0 + sin(fAngle * 10.0 * kPI) * 0.05;\n   return length(vPos + vec3(0.0, -1.0 - 0.2, 0.0)) * fBump - fWinderSize;\t\n}\n\nvec4 GetDistanceClock( const in vec3 vPos )\n{\n\tconst float fRadius = 1.0;\n\tconst float fThickness = 0.1;\n\tconst float fInsetRadius = 0.9;\n\tconst float fInsetDepth = 0.1;\n\tfloat fTorusDist = GetDistanceXYTorus(vPos, 1.0, fThickness);\n\t\n\tfloat fCylinderDist = length(vPos.xy) - fRadius;\n\tfloat fCylinderCap = abs(vPos.z) - fThickness;\n\tfCylinderDist = max(fCylinderDist, fCylinderCap);\n\tfloat fDist = min(fTorusDist, fCylinderDist);\n\t\n\tfloat fWinderDist = GetDistanceWinder(vPos);\n\tfDist = min(fDist, fWinderDist);\n\tvec4 vResult = vec4(fDist, 2.0, 0.0, 0.0);\n\t\n\tfloat fInsetDist = length(vPos.xy) - fInsetRadius;\n\tfloat fInsetCap = abs(vPos.z - fThickness) - fInsetDepth;\n\t\n\tvec4 vInsetCapDist = vec4(fInsetCap, 3.0, vPos.x, vPos.y);\n\tvec4 vInsetDist = vec4(fInsetDist, 2.0, 0.0, 0.0);\n\t\n\tvInsetDist = DistCombineIntersect(vInsetDist, vInsetCapDist);\n\t\n\tvResult = DistCombineSubtract(vResult, vInsetDist);\n\t\n\t\n\tfloat fHandSeconds = iTime;\n\t\n\tfHandSeconds = floor(fHandSeconds) + (pow(fract(fHandSeconds), 50.0));\n\tfloat fHandAngle = -fHandSeconds * kPI * 2.0 \/ 60.0;\n\t\n\tvec3 vHandDomain = RotateZ(vPos, fHandAngle);\n\tfloat fHandHeight = 0.05;\n\tvHandDomain.z -= fThickness - fInsetDepth + fHandHeight;\n\tfloat fHandDist = length(vHandDomain.xz) - 0.01;\n\tfHandDist = max(fHandDist, (abs(vHandDomain.y + 0.4) - 0.4));\n\t\n\tvec4 vHandDist = vec4(fHandDist, 4.0, 0.0, 0.0);\n\t\n\tvResult = DistCombineUnion(vResult, vHandDist);\n\t\n\treturn vResult;\n}\n \nvec3 WarpDomain( const in vec3 vPos )\n{\n    vec3 vResult = vPos + vec3(0.0, 0.1, 0.1);\n\n    float fUnbend = clamp(atan(vResult.y, vResult.z), 0.0, kPI * 0.9);\n    vResult = RotateX(vResult, -fUnbend);\n     \n    float fDroopBlend = max(-vResult.y, 0.0);\t\n    vResult.y += fDroopBlend * 0.4;\n    vResult.z += sin(vResult.x * 4.0  + vResult.y * 6.0 + GetTime()) * fDroopBlend * 0.05;\n    return vResult;\n}\n\n\/\/ result is x=scene distance y=material or object id; zw are material specific parameters (maybe uv co-ordinates)\nvec4 GetDistanceScene( const in vec3 vPos )\n{         \n    vec4 vResult = vec4(10000.0, -1.0, 0.0, 0.0);\n                    \n    vec3 vClockDomain = WarpDomain(vPos + vec3(0.0, -0.1, -0.45));\n    vClockDomain.y += 0.2;\t\n    vResult = DistCombineUnion(vResult, GetDistanceClock(vClockDomain));\n        \n    vec4 vWallDist1 = vec4(vPos.z - 0.2, 1.0, vPos.xy);\n    vec4 vWallDist2 = vec4(vPos.y, 1.0, vPos.xz);\n    vWallDist1 = DistCombineIntersect(vWallDist1, vWallDist2);\n    vResult = DistCombineUnion(vResult, vWallDist1);\n             \n\t\n    vec4 vFloorDist = vec4(vPos.y + 2.3, 5.0, vPos.xz);\n    vResult = DistCombineUnion(vResult, vFloorDist);\n\t\n    return vResult;\n}\n \nvec3 GetWatchFaceColour( const vec2 vUV )\n{\n        float fRadius = length(vUV);\n       \n        float fFraction = (atan(vUV.x, -vUV.y) \/ (kPI * 2.0)) + (0.5 \/ 60.0);\n               \n        float fTickValue = fFraction * 60.0;   \n        float fTickIndex = floor(fTickValue);\n        float fTickFraction = fract(fTickValue);\n               \n\tfloat fTickLength = 0.25;       \n\tfTickLength += step( fract(fTickIndex \/ 10.0), 0.5 \/ 10.0 ) * 0.1;\n\tfTickLength += step( fract(fTickIndex \/ 5.0), 0.5 \/ 5.0 ) * 0.05;\n\t\n\tfloat fTickWidth = 0.2;\n\tfloat fInTickSegment = step(abs(fTickFraction - 0.5), fTickWidth);\n\t\n\tfloat fInTickRadiusOuter = step(fRadius, 0.8);\n\tfloat fInTickRadiusInner = step(1.0 - fTickLength, fRadius);\n\t\n\t\/\/ 1.0 if not one of these...\n\tfloat fBlend = 1.0 - fInTickSegment * fInTickRadiusOuter * fInTickRadiusInner;\n\t\n\t\/\/ central dot\n\tfBlend = fBlend * step(0.025, fRadius);                                 \n\t\n\treturn mix(vec3(0.05), vec3(0.95), fBlend);\n}\n \nC_Material GetObjectMaterial( const in vec3 vObjId, const in vec3 vPos, const in vec3 vNormal )\n{\n    C_Material mat;\n             \n    if(vObjId.x < 1.5)\n    {\n        \/\/ wall\n        mat.fR0 = 0.2;\n\t\tvec3 cTextureSample = texture(iChannel0, vObjId.yz).rgb;\n        mat.fSmoothness = cTextureSample.r * cTextureSample.b;\n        mat.cAlbedo = cTextureSample * cTextureSample;\n    }\n    else\n    if(vObjId.x < 2.5)\n    {\n        \/\/ silver\n        mat.fR0 = 0.95;\n        mat.fSmoothness = 0.9;\n        mat.cAlbedo = vec3(0.9, 0.9, 0.91);\n    }\n    else\n    if(vObjId.x < 3.5)\n    {\n\t    \/\/ clock face\n            mat.fR0 = 0.01;\n            mat.fSmoothness = 0.9;\n            mat.cAlbedo = GetWatchFaceColour( vObjId.yz );\n    }\n    else\n    if(vObjId.x < 4.5)\n    {\n        \/\/ hand\n        mat.fR0 = 0.01;\n        mat.fSmoothness = 0.9;\n        mat.cAlbedo = vec3(0.95, 0.05, 0.05);\n    }\n    else\n    if(vObjId.x < 5.5)\n    {\n        \/\/ floor\n        mat.fR0 = 0.01;\n\t\tvec3 cTextureSample = texture(iChannel1, vObjId.yz).rgb;\n        mat.cAlbedo = cTextureSample * cTextureSample;\n        mat.fSmoothness = cTextureSample.r * cTextureSample.g;\n    }\n \n    return mat;\n}\nvec3 GetLightDirection()\n{\n    vec3 vLightDir = vec3(1.0, 2.0, 1.0);\n\n    #ifdef ENABLE_MONTE_CARLO       \n    vLightDir += gRandomNormal * 0.01;\n    #endif\n    return normalize(vLightDir);\n}\nvec3 GetLightCol()\n{\n    return vec3(1.0, 0.7, 0.5) * 10.0;\n}\n\nvec3 GetSkyGradient( const in vec3 vDir )\n{\n\tfloat fBlend = vDir.y * 0.5 + 0.5;\n\treturn mix(vec3(0.0, 0.0, 0.0), vec3(0.25, 0.5, 1.0) * 4.0, fBlend);\n}\n \nvec3 GetAmbientLight(const in vec3 vNormal)\n{\n    return GetSkyGradient(vNormal);\n}\n \n#define kFogDensity 0.075\nvoid ApplyAtmosphere(inout vec3 col, const in C_Ray ray, const in C_HitInfo intersection)\n{\n    #ifdef ENABLE_FOG\n    \/\/ fog\n    float fFogAmount = exp(intersection.fDistance * -kFogDensity);\n    vec3 cFog = GetSkyGradient(ray.vDir);\n    col = mix(cFog, col, fFogAmount);\n    #endif\n}\n\nvec3 GetSceneNormal( const in vec3 vPos )\n{\n    \/\/ tetrahedron normal\n    float fDelta = 0.01;\n \n    vec3 vOffset1 = vec3( fDelta, -fDelta, -fDelta);\n    vec3 vOffset2 = vec3(-fDelta, -fDelta,  fDelta);\n    vec3 vOffset3 = vec3(-fDelta,  fDelta, -fDelta);\n    vec3 vOffset4 = vec3( fDelta,  fDelta,  fDelta);\n \n    float f1 = GetDistanceScene( vPos + vOffset1 ).x;\n    float f2 = GetDistanceScene( vPos + vOffset2 ).x;\n    float f3 = GetDistanceScene( vPos + vOffset3 ).x;\n    float f4 = GetDistanceScene( vPos + vOffset4 ).x;\n \n    vec3 vNormal = vOffset1 * f1 + vOffset2 * f2 + vOffset3 * f3 + vOffset4 * f4;\n \n    return normalize( vNormal );\n}\n \n#define kRaymarchEpsilon 0.01\n#define kRaymarchMatIter 20\n#define kRaymarchStartDistance 0.01\n\/\/ This is an excellent resource on ray marching -> https:\/\/iquilezles.org\/articles\/distfunctions\nvoid Raymarch( const in C_Ray ray, out C_HitInfo result, const float fMaxDist, const int maxIter )\n{       \n    result.fDistance = kRaymarchStartDistance;\n    result.vObjectId.x = 0.0;\n                             \n    for(int i=0;i<=kRaymarchMatIter;i++)             \n    {\n        result.vPos = ray.vOrigin + ray.vDir * result.fDistance;\n        vec4 vSceneDist = GetDistanceScene( result.vPos );\n        result.vObjectId = vSceneDist.yzw;\n \n        \/\/ abs allows backward stepping - should only be necessary for non uniform distance functions\n        if((abs(vSceneDist.x) <= kRaymarchEpsilon) || (result.fDistance >= fMaxDist) || (i > maxIter))\n        {\n            break;\n        }                       \n \n        result.fDistance = result.fDistance + vSceneDist.x;   \n    }\n     \n      \n    if(result.fDistance >= fMaxDist)\n    {\n        result.vPos = ray.vOrigin + ray.vDir * result.fDistance;\n        result.vObjectId.x = 0.0;\n        result.fDistance = 1000.0;\n    }\n}\n \nfloat GetShadow( const in vec3 vPos, const in vec3 vLightDir, const in float fLightDistance )\n{\n    C_Ray shadowRay;\n    shadowRay.vDir = vLightDir;\n    shadowRay.vOrigin = vPos;\n \n    C_HitInfo shadowIntersect;\n    Raymarch(shadowRay, shadowIntersect, fLightDistance, 32);\n                                                                                                       \n    return step(0.0, shadowIntersect.fDistance) * step(fLightDistance, shadowIntersect.fDistance );         \n}\n \n\/\/ http:\/\/en.wikipedia.org\/wiki\/Schlick's_approximation\nfloat Schlick( const in vec3 vNormal, const in vec3 vView, const in float fR0, const in float fSmoothFactor)\n{\n    float fDot = dot(vNormal, -vView);\n    fDot = min(max((1.0 - fDot), 0.0), 1.0);\n    float fDot2 = fDot * fDot;\n    float fDot5 = fDot2 * fDot2 * fDot;\n    return fR0 + (1.0 - fR0) * fDot5 * fSmoothFactor;\n}\n \nfloat GetDiffuseIntensity(const in vec3 vLightDir, const in vec3 vNormal)\n{\n    return max(0.0, dot(vLightDir, vNormal));\n}\n \nfloat GetBlinnPhongIntensity(const in C_Ray ray, const in C_Material mat, const in vec3 vLightDir, const in vec3 vNormal)\n{         \n    vec3 vHalf = normalize(vLightDir - ray.vDir);\n    float fNdotH = max(0.0, dot(vHalf, vNormal));\n \n    float fSpecPower = exp2(4.0 + 6.0 * mat.fSmoothness);\n    float fSpecIntensity = (fSpecPower + 2.0) * 0.125;\n \n    return pow(fNdotH, fSpecPower) * fSpecIntensity;\n}\n \n\/\/ use distance field to evaluate ambient occlusion\nfloat GetAmbientOcclusion(const in C_Ray ray, const in C_HitInfo intersection, const in vec3 vNormal)\n{\n    vec3 vPos = intersection.vPos;\n     \n    float fAmbientOcclusion = 1.0;\n     \n    float fDist = 0.0;\n    for(int i=0; i<=5; i++)\n    {\n        fDist += 0.1;\n \n        vec4 vSceneDist = GetDistanceScene(vPos + vNormal * fDist);\n \n        fAmbientOcclusion *= 1.0 - max(0.0, (fDist - vSceneDist.x) * 0.2 \/ fDist );                                 \n    }\n     \n    return fAmbientOcclusion;\n}\n \nvec3 GetObjectLighting(const in C_Ray ray, const in C_HitInfo intersection, const in C_Material material, const in vec3 vNormal, const in vec3 cReflection)\n{\n    vec3 cScene ;\n   \n    vec3 vSpecularReflection = vec3(0.0);\n    vec3 vDiffuseReflection = vec3(0.0);\n   \n    float fAmbientOcclusion = GetAmbientOcclusion(ray, intersection, vNormal);\n    vec3 vAmbientLight = GetAmbientLight(vNormal) * fAmbientOcclusion;\n   \n    vDiffuseReflection += vAmbientLight;\n   \n    vSpecularReflection += cReflection * fAmbientOcclusion;\n             \n    #ifdef ENABLE_DIRECTIONAL_LIGHT\n    vec3 vLightDir = GetLightDirection();\n      \n    float fShadowBias = 0.05;           \n    float fShadowFactor = GetShadow( intersection.vPos + vLightDir * fShadowBias, vLightDir, 10.0 );\n    vec3 vIncidentLight = GetLightCol() * fShadowFactor;\n   \n    vDiffuseReflection += GetDiffuseIntensity( vLightDir, vNormal ) * vIncidentLight;                                                                               \n    vSpecularReflection += GetBlinnPhongIntensity( ray, material, vLightDir, vNormal ) * vIncidentLight;\n    #endif \/\/ ENABLE_DIRECTIONAL_LIGHT\n   \n    vDiffuseReflection *= material.cAlbedo;             \n    \n    #ifdef ENABLE_SPECULAR\n    float fFresnel = Schlick(vNormal, ray.vDir, material.fR0, material.fSmoothness * 0.9 + 0.1);\n    cScene = mix(vDiffuseReflection , vSpecularReflection, fFresnel);\n    #else\n    cScene = vDiffuseReflection;\n    #endif\n   \n    return cScene;\n}\n \nvec3 GetSceneColourSimple( const in C_Ray ray )\n{\n    C_HitInfo intersection;\n    Raymarch(ray, intersection, 10.0, 32);\n                       \n    vec3 cScene;\n \n    if(intersection.vObjectId.x < 0.5)\n    {\n        cScene = GetSkyGradient(ray.vDir);\n    }\n    else\n    {\n        vec3 vNormal = GetSceneNormal(intersection.vPos);\n        C_Material material = GetObjectMaterial(intersection.vObjectId, intersection.vPos, vNormal);\n \n        \/\/ use sky gradient instead of reflection\n        vec3 cReflection = GetSkyGradient(reflect(ray.vDir, vNormal));\n \n        \/\/ apply lighting\n        cScene = GetObjectLighting(ray, intersection, material, vNormal, cReflection );\n    }\n \n    ApplyAtmosphere(cScene, ray, intersection);\n \n    return cScene;\n}\n \nvec3 GetSceneColour( const in C_Ray ray )\n{                                                         \n    C_HitInfo intersection;\n    Raymarch(ray, intersection, 30.0, 256);\n               \n    vec3 cScene;\n     \n    if(intersection.vObjectId.x < 0.5)\n    {\n        cScene = GetSkyGradient(ray.vDir);\n    }\n    else\n    {\n        vec3 vNormal = GetSceneNormal(intersection.vPos);\n        C_Material material = GetObjectMaterial(intersection.vObjectId, intersection.vPos, vNormal);\n \n        #ifdef ENABLE_MONTE_CARLO\n        vNormal = normalize(vNormal + gRandomNormal \/ (5.0 + material.fSmoothness * 200.0));\n        #endif\n \n        vec3 cReflection;\n        #ifdef ENABLE_REFLECTIONS   \n        {\n            \/\/ get colour from reflected ray\n            float fSepration = 0.05;\n            C_Ray reflectRay;\n            reflectRay.vDir = reflect(ray.vDir, vNormal);\n            reflectRay.vOrigin = intersection.vPos + reflectRay.vDir * fSepration;\n                                                                 \n            cReflection = GetSceneColourSimple(reflectRay);                                                                       \n        }\n        #else\n        cReflection = GetSkyGradient(reflect(ray.vDir, vNormal));                             \n        #endif\n        \/\/ apply lighting\n        cScene = GetObjectLighting(ray, intersection, material, vNormal, cReflection );\n    }\n     \n    ApplyAtmosphere(cScene, ray, intersection);\n     \n    return cScene;\n}\n \nvoid GetCameraRay( const in vec3 vPos, const in vec3 vForwards, const in vec3 vWorldUp, const in vec2 fragCoord, out C_Ray ray)\n{\n    vec2 vPixelCoord = fragCoord.xy;\n    #ifdef ENABLE_MONTE_CARLO\n    vPixelCoord += gPixelRandom.zw;\n    #endif\n    vec2 vUV = ( vPixelCoord \/ iResolution.xy );\n    vec2 vViewCoord = vUV * 2.0 - 1.0;\n \n    vViewCoord *= 0.75;\n     \n    float fRatio = iResolution.x \/ iResolution.y;\n \n    vViewCoord.y \/= fRatio;                         \n \n    ray.vOrigin = vPos;\n \n    vec3 vRight = normalize(cross(vForwards, vWorldUp));\n    vec3 vUp = cross(vRight, vForwards);\n       \n    ray.vDir = normalize( vRight * vViewCoord.x + vUp * vViewCoord.y + vForwards);       \n}\n \nvoid GetCameraRayLookat( const in vec3 vPos, const in vec3 vInterest, const in vec2 fragCoord, out C_Ray ray)\n{\n    vec3 vForwards = normalize(vInterest - vPos);\n    vec3 vUp = vec3(0.0, 1.0, 0.0);\n \n    GetCameraRay(vPos, vForwards, vUp, fragCoord, ray);\n}\n \nvec3 OrbitPoint( const in float fHeading, const in float fElevation )\n{\n    return vec3(sin(fHeading) * cos(fElevation), sin(fElevation), cos(fHeading) * cos(fElevation));\n}\n \nvec3 Gamma( const in vec3 cCol )\n{\n    return sqrt(cCol);\n}\n \nvec3 InvGamma( const in vec3 cCol )\n{\n    return cCol * cCol;\n}\n \n \nvec3 Tonemap( const in vec3 cCol )\n{\n    \n    vec3 vResult = 1.0 - exp2(-cCol);\n \n    return Gamma(vResult);\n}\n \nvec3 InvTonemap( const in vec3 cCol )\n{\n    vec3 vResult = cCol;\n    vResult = clamp(vResult, 0.01, 0.99);\n    vResult = InvGamma(vResult);\n    return - log2(1.0 - vResult);\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #ifdef ENABLE_MONTE_CARLO           \n    CalcPixelRandom();\n    #endif\n     \n    C_Ray ray;\n     \n    const float fCamreaHeadingMin = -0.8;\n    const float fCamreaHeadingMax = 1.8;\n    const float fCamreaElevationMin = 0.1;\n    const float fCamreaElevationMax = 0.7;\n    const float fCamreaDistMin = 3.0;\n    const float fCamreaDistMax = 2.0;\n\n    vec2 vMouse = iMouse.xy \/ iResolution.xy;\n\t\n\t\/\/ If we have never moved the mouse\n\tif(iMouse.x <= 0.0)\n\t{\n\t\tvMouse.xy = vec2(0.0, 1.0);\n\t}\n\t\t\t\n\t\n    float fHeading = mix(fCamreaHeadingMin, fCamreaHeadingMax, vMouse.x);\n    float fElevation = mix(fCamreaElevationMin, fCamreaElevationMax, vMouse.y);\n    float fCameraDist = mix(fCamreaDistMax, fCamreaDistMin, vMouse.y);\n   \n    vec3 vCameraPos = OrbitPoint(fHeading, fElevation) * fCameraDist;\n   \n    #ifdef ENABLE_MONTE_CARLO           \n    float fDepthOfField = 0.025;\n    vCameraPos += gRandomNormal * fDepthOfField;\n    #endif\n     \n    GetCameraRayLookat( vCameraPos, vec3(0.0, -0.5, 0.2), fragCoord, ray);\n     \n    vec3 cScene = GetSceneColour( ray ); \n      \n    float fExposure = 0.4;\n    cScene = cScene * fExposure;\n\n\t\/\/ vignette\n\tvec2 vUV = ((fragCoord.xy \/ iResolution.xy) - 0.5) * 2.0;\n\tfloat fDist = dot(vUV, vUV);\n\tfDist = fDist * fDist;\n\tfloat fAmount = 1.0 \/ (fDist * 5.0 + 1.0);\n\tcScene = cScene * fAmount;\n\n    #ifdef ENABLE_MONTE_CARLO                             \n    vec3 cPrev = texture(backbuffer, vUV).xyz;\n    \/\/ add noise to pixel value (helps values converge)\n    cPrev += (gPixelRandom.xyz - 0.5) * (1.0 \/ 255.0);\n    cPrev = InvTonemap(cPrev);\n    \/\/ converge speed\n    \/\/float fBlend = 0.1;\n\tfloat fBlend = 1.0;\n    vec3 cFinal = mix(cPrev, cScene, fBlend);\n    #else\n    vec3 cFinal = cScene;\n    #endif\n   \n    cFinal = Tonemap(cFinal);\n         \n    float fAlpha = 1.0;\n     \n    fragColor = vec4( cFinal, fAlpha );\n}\n \nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    C_Ray ray;\n    \n    fragRayOri *= 3.0;\n    \n    fragRayOri.y += 1.0;\n    fragRayOri.z += 2.0;\n    fragRayOri.x -= 1.5;\n    \n    ray.vOrigin = fragRayOri;\n    ray.vDir = fragRayDir;\n    \n    vec3 cScene = GetSceneColour( ray ); \n      \n    float fExposure = 0.4;\n    vec3 cFinal = cScene * fExposure;\n    \n    cFinal = Tonemap(cFinal);\n    \n    fragColor = vec4( cFinal, 1.0 );\n}","name":"Image","description":"","type":"image"}]}}