{"Shader":{"ver":"0.1","info":{"id":"NlSBz1","date":"1651754325","viewed":202,"name":"Moon Rock 3000","username":"SnoopethDuckDuck","description":"messy code iurhoigeirgoowiefjwpg","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["e"],"hasliked":0},"renderpass":[{"inputs":[{"id":4,"src":"\/media\/a\/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"#define MAX_STEPS 400\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define FK(k) floatBitsToInt(k*k\/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)\/2.14e9;\n}\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n  return mix(dot(ax, p)*ax, p, cos(ro)) + cross(ax,p)*sin(ro);\n}\n\nvec3 face(vec3 p) {\n     vec3 a = abs(p);\n     return step(a.yzx, a.xyz)*step(a.zxy, a.xyz)*sign(p);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec3 getRo() {\n    vec2 m = iMouse.xy\/iResolution.xy;\n    float r = 3.;\n    float t = 0.2 * iTime;\n    vec3 ro = vec3(r * cos(t), 2, r * cos(t) + sin(t));\n    \/\/ro.yz *= Rot(-m.y*3.14+1.);\n    \/\/ro.xz *= Rot(-m.x*6.2831);\n    return ro;\n}\n\nfloat GetDist(vec3 p) {\n    float sc = 0.125;\n    \n    \/\/p.xz *= Rot(.5 * length(p.xz) - 0.1 * iTime);\n    float c1 = test(sc * p.xy, iResolution.y);\n    float c2 = test(sc * p.yz, iResolution.y);\n    float c3 = test(sc * p.zx, iResolution.y);\n\n    p.y += 0.05 * cos(atan(p.x, p.z) + iTime);\n  \n    float r1 = 1.;\n    float r2 = 1.;\n    float d1 = length(p.xz) - r1;\n    float d2 = length(vec2(d1,p.y)) - r2;\n    \/\/d2 = length(p) - 1.5;\n     d2 += (0.5 + 0.5 * thc(4., iTime\/3.)) * 0.5 * max(max(c1,c2), c3);\n    return 0.15 * d2;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    float s = sign(z);\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if (s != sign(dS)) { z *= 0.5; s = sign(dS); }\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)\/iResolution.y;\n\t\n    vec3 ro = getRo();\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.5);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    float IOR = 1.05;\n    vec3 p = ro + rd * d;\n    if(d<MAX_DIST) {\n        \n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        vec3 pIn = p - 4. * SURF_DIST * n;\n        vec3 rdIn = refract(rd, n, 1.\/IOR);\n        float dIn = RayMarch(pIn, rdIn, -1.);\n        \n        vec3 pExit = pIn + dIn * rdIn;\n        vec3 nExit = -GetNormal(pExit); \/\/ *-1.; ?\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n        \n        float sc = 0.5;\n        float c1 = test(sc * p.xy, iResolution.y);\n        float c2 = test(sc * p.yz, iResolution.y);\n        float c3 = test(sc * p.zx, iResolution.y);\n\n        vec3 c4 = texture(iChannel1, sc + sc * p.xy).rgb;\n        vec3 c5 = texture(iChannel1, sc + sc * p.yz).rgb;\n        vec3 c6 = texture(iChannel1, sc + sc * p.zx).rgb;\n\n        float fres = pow(clamp(1. + dot(rd, n),0.,1.), 1.);\n        \/\/col += fres;\n        \n        vec3 an = abs(n);\n        vec3 c = vec3(c1 * n.z + c2 * n.x + c3 * n.y);\n        vec3 cc = c4 * n.z + c5 * n.x + c6 * n.y;\n        \n        \/\/col = c;\n        col = mix(col * cc, c, cc * fres);\n        \/\/col *= n.y;\n        \n        vec3 e = vec3(0.5);\n        col += exp(0.5-8. * abs(cos(12. * log(length(p.xz)) - iTime)))\n            * pal(max(max(c1,c2),c3) - c1 * c2 * c3, e, e, e, 0.55 * vec3(0,1,2)\/3.);\n        \n        \/\/col = c;\n    }\n    col = mix(col, vec3(1), exp(-10. * length(p.xz)));\n    col = pow(col, vec3(.4545));\t\/\/ gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))\/tanh(a)\n#define ths(a,b) tanh(a*sin(b))\/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n\/\/#define sabs(x, k) sqrt(x*x+k)-0.1\n\n#define Rot(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n\nfloat test(in vec2 uv, float res)\n{\n    uv -= floor(uv) + 0.5;\n\n    float k = 10. \/ res;\n    float m = 0.25;\n    \n    float d = length(uv);\n    float s = smoothstep(-k, k, -length(uv) + m);\n       \n    for (int i = 0; i < 6; i++) {\n        uv = abs(uv) - m;\n        m *= 0.5;\n        s = max(s, smoothstep(-k, k, -length(uv) + m));\n    }\n    \n    return s;\n}\n\nfloat sfloor(float a, float b) {\n    return floor(b) + 0.5 + 0.5 * tanh(a * (fract(b) - 0.5)) \/ tanh(0.5 * a);\n}\n\nfloat cc(float a, float b) {\n    float f = thc(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nfloat cs(float a, float b) {\n    float f = ths(a, b);\n    return sign(f) * pow(abs(f), 0.25);\n}\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21(vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\nfloat smin(float a, float b) {\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) \/ k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}","name":"Common","description":"","type":"common"}]}}