{"Shader":{"ver":"0.1","info":{"id":"4scfDN","date":"1525168347","viewed":462,"name":"Jackson Meets Gauss","username":"dr2","description":"Random walk (could be valuable if a genuine Pollock)","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["random","paint","pollock"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ \"Jackson Meets Gauss\" by dr2 - 2018\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec4 LoadTx (vec2 uv);\n\nvec3 ltDir, qnBlk;\nvec2 qBlk;\nfloat dstFar, tCur;\nconst float pi = 3.14159;\n\nfloat BlkHit (vec3 ro, vec3 rd, float bSize)\n{\n  vec3 v, tm, tp, u;\n  float dMin, dn, df;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro \/ rd;\n  tp = bSize \/ abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  dMin = dstFar;\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    qnBlk = - sign (rd) * step (tm.zxy, tm) * step (tm.yzx, tm);\n    u = (v + dn) * rd;\n    qBlk = vec2 (dot (u.zxy, qnBlk), dot (u.yzx, qnBlk)) \/ bSize;\n  }\n  return dMin;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  if (BlkHit (ro, rd, 1.) < dstFar) col = LoadTx (0.5 * qBlk + 0.5).rgb *\n     (0.2 + 0.8 * max (dot (qnBlk, ltDir), 0.)) +\n     0.1 * pow (max (dot (normalize (ltDir - rd), qnBlk), 0.), 32.);\n  else col = vec3 (0.6, 0.6, 1.) * (0.3 + 0.15 * (rd.y + 1.) * (rd.y + 1.));\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ canvas - 0.5;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.1 *  pi * tCur;\n    el += 0.073 *  pi * tCur;\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  ro = vuMat * vec3 (0., 0., -6.);\n  dstFar = 20.;\n  ltDir = vuMat * normalize (vec3 (0.1, 0.1, -1.));\n  rd = vuMat * normalize (vec3 (uv, 3.5));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\n#define txBuf iChannel0\n\nvec4 LoadTx (vec2 uv)\n{\n  return texture (txBuf, uv);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ \"Jackson Meets Gauss\" by dr2 - 2018\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nvec2 GaussRand (vec2 seed);\nfloat SegDist (vec2 p, vec2 v1, vec2 v2);\nfloat LineDist (vec2 p, vec2 v1, vec2 v2);\nvec3 HsvToRgb (vec3 c);\nvec2 Hashv2v2 (vec2 p);\nvec4 LoadTx (vec2 uv);\nvec4 Loadv4 (ivec2 idVar);\nvoid Savev4 (ivec2 idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nvec2 pPen, ppPen;\nfloat tCur, nStep;\nconst float pi = 3.14159;\n\nvec4 ShowScene (vec2 uv, vec4 col)\n{\n  vec2 p;\n  p = 2. * (uv - 0.5);\n  return (SegDist (p, ppPen, pPen) < 0.007) ? vec4 (HsvToRgb (vec3 (mod (0.001 * nStep, 1.),\n     0.8 + 0.2 * sin (2. * pi * 0.01 * nStep), 1. - 0.5 * smoothstep (0.006, 0.007,\n     LineDist (p, ppPen, pPen)))), 1.) : mix (col, vec4 (0.1), 0.0005);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat;\n  vec2 txSizeP, uvtx, dp;\n  ivec2 iFrag;\n  bool doInit;\n  tCur = iTime;\n  uvtx = fragCoord \/ txSize;\n  iFrag = ivec2 (fragCoord);\n  doInit = false;\n  if (iFrame <= 5) {\n    doInit = true;\n    txSizeP = txSize;\n  } else {\n    stDat = Loadv4 (ivec2 (0, 0));\n    pPen = stDat.xy;\n    ppPen = stDat.zw;\n    stDat = Loadv4 (ivec2 (1, 0));\n    txSizeP.x = stDat.x;\n    nStep = stDat.y;\n  }\n  if (txSize.x != txSizeP.x) doInit = true;\n  fragColor = doInit ? vec4 (0.1) : ShowScene (uvtx, LoadTx (uvtx));\n  if (iFrag.y == 0 && iFrag.x <= 1) {\n    if (doInit) {\n      ppPen = vec2 (0.);\n      pPen = ppPen;\n      nStep = 0.;\n    } else {\n      ppPen = pPen;\n      dp = 0.07 * GaussRand (pPen + tCur);\n      if (abs (pPen.x + dp.x) > 0.98) dp.x *= -1.;\n      if (abs (pPen.y + dp.y) > 0.98) dp.y *= -1.;\n      pPen += dp;\n      ++ nStep;\n    }\n    if (iFrag.x == 0) stDat = vec4 (pPen, ppPen);\n    else if (iFrag.x == 1) stDat = vec4 (txSize.x, nStep, 0., 0.);\n    Savev4 (iFrag, stDat, fragColor, fragCoord);\n  }\n}\n\nvec2 GaussRand (vec2 seed)   \/\/ Box-Muller\n{\n  vec2 r;\n  r = 0.001 + 0.999 * Hashv2v2 (seed + 0.001);\n  return sqrt (-2. * log (r.x)) * sin (2. * pi * (r.y + vec2 (0., 0.25)));\n}\n\nfloat SegDist (vec2 p, vec2 v1, vec2 v2)\n{\n  vec2 a, b;\n  float s;\n  a = p - v1;\n  b = v2 - v1;\n  s = length (b);\n  b = (s > 0.) ? b \/ s : vec2 (0.);\n  return length (a - clamp (dot (a, b), 0., s) * b);\n}\n\nfloat LineDist (vec2 p, vec2 v1, vec2 v2)\n{\n  vec2 a, b;\n  float s;\n  a = p - v1;\n  b = v2 - v1;\n  s = length (b);\n  b = (s > 0.) ? b \/ s : vec2 (0.);\n  return length (a - dot (a, b) * b);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2.\/3., 1.\/3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2v2 (vec2 p)\n{\n  const vec2 cHashVA2 = vec2 (37.1, 61.7);\n  const vec2 e = vec2 (1., 0.);\n  return fract (sin (vec2 (dot (p + e.yy, cHashVA2), dot (p + e.xy, cHashVA2))) * cHashM);\n}\n\nvec4 LoadTx (vec2 uv)\n{\n  return texture (txBuf, uv);\n}\n\nvec4 Loadv4 (ivec2 idVar)\n{\n  return texture (txBuf, (vec2 (idVar) + 0.5) \/ txSize);\n}\n\nvoid Savev4 (ivec2 idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  d = abs (fCoord - vec2 (idVar) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n","name":"Buffer A","description":"","type":"buffer"}]}}