{
 "ver": "0.1",
 "info": {
  "id": "NsdBR4",
  "date": "0",
  "viewed": 0,
  "name": "fire trail JiPi",
  "description": "fire mouse trail effect",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "voronoi",
   "fire",
   "trail"
  ],
  "hasliked": 0,
  "parentid": "NsyyDV",
  "parentname": "fire trail"
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "#define scale 10. \nvec2 rand22(vec2 seed)\n{\n  return fract(vec2(sin(dot(seed,vec2(12.788,72.133))),sin(dot(seed,vec2(12.788,72.133)))) * 522734.567);\n}\n\nfloat voronoise(vec2 uv)\n{\n    vec2 f = fract(uv);\n    f -= .5;\n    vec2 i = floor(uv);\n    float dist = distance(f,rand22(i) - .5);\n    for(int x=-1; x<=1; x++)\n    {\n        for(int y=-1; y<=1; y++)\n        {\n            vec2 p = i + vec2(x,y);\n            float nDist = distance(f,rand22(p) + vec2(x,y)  - .5);\n            if(nDist < dist){\n                dist = nDist;\n            }\n        }\n    }\n    return dist;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord - .5 * vec2(iResolution.x,0.))/iResolution.y;\n    vec2 unscaledUV = (fragCoord - .5 * vec2(iResolution.x,0.))/iResolution.y;\n    vec2 texUV = fragCoord/iResolution.xy;\n    vec2 m = (iMouse.xy - .5 * vec2(iResolution.x,0.))/iResolution.y;\n    uv *= scale;\n    float t = iTime * .7;\n    float f = 0.;\n    //fire noise\n    f += voronoise(uv * vec2(3.,1.) - (vec2(-2.5,1.) * t));\n    f += voronoise((uv + vec2(13.1312, 1555.23)) * vec2(3.,1.) - (vec2(2.5,1.) * t));\n    f = sqrt(f + .1);\n    f *= voronoise(uv - (vec2(0.,5.) * t))/2.;\n    \n    //fire mask\n    f *= pow(texture(iChannel0,texUV).x,.8);\n    //fill circle in center of fire\n    f += clamp(1. - distance(unscaledUV, m)*16.,0.,1.);\n    \n    //color fire\n    vec3 col = vec3(0.);\n    col = mix(vec3(1.,5.,2.), vec3(1.,1.,1.), step(.96,f));\n    col = mix(vec3(1.,.15,.15), col,smoothstep(.1,.9,f));\n    col = mix(vec3(0.), col, step(.1,f));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
   "name": "Image",
   "description": "",
   "type": "image"
  },
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dXGR8",
     "channel": 0
    }
   ],
   "code": "#define acc 16384.\nfloat projDist(vec2 p, vec2 a, vec2 b){\n\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    \n    vec2 t = clamp(dot(pa,ba)/dot(ba,ba),0.,1.) * ba - pa;\n    return length(t);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 texUV = fragCoord/iResolution.xy;\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 m = iMouse.xy/ iResolution.y;\n    \n    texUV.y -= .003;\n    \n    vec4 read = texture(iChannel0, texUV);\n    vec2 prev = vec2(float((int(read.w ) & 0xffff0000) >> 16 )/ acc,\n                     float(int(read.w ) & 0xffff)/ acc );\n    read.xyz *= .96;\n\n    float write = float(((int(m.x * acc) & 0xffff) << 16 ) |\n                        ((int(m.y * acc) & 0xffff)));\n    \n    vec3 col = vec3(0.);\n    float size = projDist(uv,prev,m);\n    \n    col += 1. - smoothstep(-.0,.11,size);\n    \n    read.xyz += col;\n    fragColor = vec4(read.xyz, write);\n}",
   "name": "Buffer A",
   "description": "",
   "type": "buffer"
  }
 ]
}