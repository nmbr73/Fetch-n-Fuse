{"Shader":{"ver":"0.1","info":{"id":"7ssBzX","date":"1645230915","viewed":382,"name":"Hell 2","username":"iq","description":"A remix of [url]https:\/\/www.shadertoy.com\/view\/MdfGRX[\/url]","likes":12,"published":3,"flags":0,"usePreview":0,"tags":["3d","raymarching","cloud","volumetric"],"hasliked":0},"renderpass":[{"inputs":[{"id":39,"src":"\/media\/a\/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","ctype":"volume","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ Copyright Inigo Quilez, 2022 - https:\/\/iquilezles.org\/\n\/\/ I am the sole copyright owner of this Work.\n\/\/ You cannot host, display, distribute or share this Work in any form,\n\/\/ including physical and digital. You cannot use this Work in any\n\/\/ commercial or non-commercial product, website or project. You cannot\n\/\/ sell this Work and you cannot mint an NFTs of it.\n\/\/ I share this Work for educational purposes, and you can link to it,\n\/\/ through an URL, proper attribution and unmodified screenshot, as part\n\/\/ of your educational material. If these conditions are too restrictive\n\/\/ please contact me and we'll definitely work it out.\n\n\/\/ Just a remix of https:\/\/www.shadertoy.com\/view\/MdfGRX\n\n\/\/------------------------------------------------------------------\n\/\/ noise\n\/\/------------------------------------------------------------------\nfloat hash( float n )\n{\n    return fract( n*17.0*fract( n*0.3183099 ) );\n}\n\nfloat noise1( in float x )\n{\n    float p = floor(x);\n    float w = fract(x);\n    float u = w*w*(3.0-2.0*w);\n    return mix(hash(p+0.0),hash(p+1.0),u);\n}\n\nfloat noise( in vec3 x )\n{\n#if 0\n    vec3 p = floor(x);\n    vec3 w = fract(x);\n    vec3 u = w*w*(3.0-2.0*w);\n    float n = 1.0*p.x + 317.0*p.y + 157.0*p.z;\n    return mix( mix( mix(hash(n+  0.0),hash(n+  1.0),u.x),\n                     mix(hash(n+317.0),hash(n+318.0),u.x),u.y),\n                mix( mix(hash(n+157.0),hash(n+158.0),u.x),\n                     mix(hash(n+474.0),hash(n+475.0),u.x),u.y),u.z);   \n#else\n    return textureLod(iChannel0,x\/32.0,0.0).x;\n#endif    \n}\n\n\/\/------------------------------------------------------------------\n\nvec4 map( vec3 p, float time )\n{\n    \/\/ density\n\tfloat den = 0.2 - p.y;\n\n    \/\/ invert space\t\n\tp = -7.0*p\/dot(p,p);\n\n    \/\/ twist space\t\n\tfloat co = cos(0.8*den);\n\tfloat si = sin(0.8*den);\n\tp.xz = mat2(co,-si,si,co)*p.xz;\n\n    \/\/ cloud\t\n\tfloat f;\n    float t = time + 9.0;\n\tvec3 q = p                           - vec3(0.0,t*0.2,0.0);\n    f  = 0.500000*noise( q ); q = q*2.21 - vec3(0.0,t*0.4,0.0);\n    f += 0.250000*noise( q ); q = q*2.15 - vec3(0.0,t*0.8,0.0);\n    f += 0.125000*noise( q ); q = q*2.13 - vec3(0.0,t*1.6,0.0);\n    f += 0.062500*noise( q ); q = q*2.05 - vec3(0.0,t*3.2,0.0);\n    f += 0.031250*noise( q );\n\n\tden = den + 4.0*f + 0.015;\n\t\n    vec3 col = mix( vec3(0.8), vec3(0.5), den ) + 0.02*sin(p);\n\t\n\treturn vec4( col, den );\n}\n\nvec3 raymarch( in vec3 ro, in vec3 rd, in vec2 pixel, float time )\n{\n    \/\/ lightining\n    float li = 1.0;\n    li *= smoothstep(0.6,0.65,noise1( time*11.2 + 6.1 ));\n    li *= smoothstep(0.4,0.45,noise1( time*1.1 + 6.1 ));\n\n    \/\/ raymarch\n    vec4 sum = vec4( 0.0 );\n    \n    const float stepFactor = 0.5;\n\n\t\/\/ with dithering\n    float t = 0.05 *fract(sin(iTime+pixel.x*11.0+17.0*pixel.y)*1.317);    \n\tfor( int i=0; i<256; i++ )\n\t{\n\t\tvec3 pos = ro + t*rd;\n\t\tvec4 col = map( pos, time );\n\n        if( col.w>0.0 )\n        {\n            float len = length(pos);\n            float at = smoothstep(2.0,0.0,len);\n            col.xyz *= mix( 2.5*vec3(0.3,0.4,0.5), 0.9*vec3(0.4,0.45,0.55), clamp( (pos.y-0.1)\/2.0, 0.0, 1.0 ) );\n            col.xyz *= 1.0 + 0.15*at + 1.5*li*at;\n\n            \/\/if( li>0.001 )\n            {\n            vec3 dir = pos\/len;\n            float nn = max(0.0,col.w - map( pos-dir*0.05, time ).w);\n            col.xyz += 2.0*li*(0.5+1.5*at)*nn*vec3(0.8,0.8,0.8)*(1.0-col.w);\n            }\n\n            \/\/ fog\n            col.xyz *= 1.15*exp2(-t*0.1);\n\n            \/\/ compose\t\t\n            col.a *= stepFactor;\n            col.rgb *= col.a;\n            sum = sum + col*(1.0 - sum.a);\t\n            if( sum.a > 0.99 ) break;\n        }\n\n\t\tt += 0.1*stepFactor;\n\t}\n\n\treturn clamp( sum.xyz, 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n\n    vec2 p = (2.0*fragCoord-iResolution.xy)\/iResolution.y;\n\t\n    \/\/ camera\n    vec3 ro = 4.0*normalize(vec3(1.0, 1.5, 0.0));\n\tvec3 ta = vec3(0.0, 1.0, 0.0);\n\tfloat cr = 0.4*cos(0.4*iTime);\n\t\n    \/\/ shake\t\t\n\tro += 0.01*(-1.0+2.0*noise1(3.1*time));\n\tta += 0.01*(-1.0+2.0*noise1(3.3*time));\n\t\n\t\/\/ build ray\n    vec3 ww = normalize( ta - ro);\n    vec3 uu = normalize(cross( vec3(sin(cr),cos(cr),0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\t\n    \/\/ raymarch\t\n    \n\tvec3 col = raymarch( ro, rd, fragCoord, time );\n\n    \/\/ color grade\n    col = col*col*(3.0-2.0*col);\n    col = col*0.5 + 0.5*col*col*(3.0-2.0*col);\n    col *= 1.2;\n    \n    \/\/ vignette\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n\tcol *= 0.1 + 0.9*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.15 );\n\n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}}