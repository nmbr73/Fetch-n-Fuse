{"Shader":{"ver":"0.1","info":{"id":"XtScWt","date":"1510490617","viewed":1690,"name":"Fourier Workflow 2 \/ phases info","username":"FabriceNeyret2","description":"space: show   module \/ phase \/ complex \/ real \/ imaginary     \nS: inset on\/off  =spectrum before \/ after op\n     Set your signal in buf A, and your Fourier-space operations in buf C\nExample: keep only phases, module = |f] ^ -1.6 . So much info in phases !","likes":19,"published":3,"flags":48,"usePreview":0,"tags":["fft","fourier","dft","phase"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ set your module and phase in Buf C\n\n#define SIZE (2.*floor(iResolution.x\/4.*.8)) \/\/ 256. \/\/Size must be changed in each tab.\n\n\n\/\/Display modes\n#define MAGNITUDE 0.\n#define PHASE     1.\n#define COMPONENT 2.\n#define REAL      3.\n#define IMAG      4.\n\n\/\/Scaling\n#define LOG 0\n#define LINEAR 1\n\n#define MAG_SCALE LOG\n\nvec4 rainbow(float x)  { return .5 + .5 * cos(6.2832*(x - vec4(0,1,2,0)\/3.)); }\nvec4 rainbow(vec2 C)   { return rainbow(atan(C.y,C.x)\/3.1416 + .5); }\n\nvec4 paintDFT(vec2 F, float mode) {\n    \/\/ F \/= SIZE;\n    return \n         mode == MAGNITUDE \n     #if   MAG_SCALE == LOG\n                           ?  vec4(log(length(F)))\n     #elif MAG_SCALE == LINEAR\n                           ?  vec4(length(F))\n     #endif\n       : mode == PHASE     ?  rainbow(F)        \n       : mode == COMPONENT ?  .5+.5*vec4(F, 0,0)\n       : mode == REAL      ?  .5+.5*vec4(F.x)\n       : mode == IMAG      ?  .5+.5*vec4(F.y)\n       : vec4(-1); \/\/ error\n}\n\nvoid mainImage( out vec4 O,  vec2 uv )\n{\n    vec2 R = iResolution.xy, U=uv;\n    \/\/O = texture(iChannel0,uv\/R).xxxx; return;\n        \n    vec2 pixel = ( uv - iResolution.xy\/2.) \/ SIZE  + vec2(2,1)\/2.,\n         tile  = floor(pixel),\n         stile = floor(mod(2.*pixel,2.));\n         uv = fract(pixel) * SIZE \/ R ;\n\n    O-=O;\n    \n    vec2 DISPLAY_MODE = floor(texture(iChannel3, .5\/R).zw); \/\/ persistant key flag.\n    bool INSET =  texture(iChannel3,vec2(1.5,.5)\/R).w == 0.;\n    \n    if (tile.y==-1. && abs(tile.x-.5)<1.) {                \/\/ buttons displaying current flags value\n        for (float i=0.; i<5.; i++) \n            O += smoothstep(.005,.0,abs(length(uv*R\/SIZE-vec2(.2+i\/7.,.97))-.025));\n        float v = tile.x==0. ? DISPLAY_MODE[0] : DISPLAY_MODE[1];\n        O.b += smoothstep(.03,.02,length(uv*R\/SIZE-vec2(.2+v\/7.,.97)));\n    }\n    \n    if(tile == vec2(0,0))                                             \/\/ --- Input + DFT (Left)\n        if (stile == vec2(0) && INSET )\n             O += paintDFT(texture(iChannel1, 2.*uv).xy, DISPLAY_MODE[0]); \/\/ initial spectrum\n        else O += texture(iChannel0, uv).x;                                \/\/ initial texture\n      \/\/else O += length(texture(iChannel0, uv).rgb);\n\n    if(tile == vec2(1,0))                                            \/\/ --- Output +DFT (Right)\n        if (stile == vec2(0) && INSET)\n             O += paintDFT(texture(iChannel3, 2.*uv).xy, DISPLAY_MODE[1]); \/\/ initial Fourier\n        else O += paintDFT(texture(iChannel2, uv).xy, DISPLAY_MODE[1]);    \/\/ final texture\n    \/\/  else O += paintDFT(texture(iChannel2, fract(.5+uv*R\/SIZE)*SIZE\/R).xy, DISPLAY_MODE[1]); \/\/ fftshift\n        \n    if(tile.y>0.) O += texture(iChannel0, U\/iResolution.xy).x; \/\/ displayed opt values in top margin   \n    if (tile != mod(tile,vec2(2,1))) O+=.3;    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":12,"src":"\/media\/a\/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","ctype":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ source signal\n\n#define SIZE (2.*floor(iResolution.x\/4.*.8)) \/\/ 256. \/\/Size must be changed in each tab.\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n\/\/  NB: out of frame image (e.g. counters & sliders ) will be transmitted to final display.\n    \n    if ( max(U.x,U.y) < SIZE )\n        O.x = length( texture( iChannel0, U\/SIZE ).rb );\n\n#if 0        \/\/ mouse controled impulse, for tests\n    U += floor( vec2(3,1.8)\/2.*SIZE - iResolution.xy\/2. ), \/\/ why 3,1.8 and not 2,1?\n#define P(x,y)   10.* smoothstep(1.,0.,length(U-vec2(x,y)*SIZE-iMouse.xy) )\n    O.x = P(0,0)+P(1,0)+P(1,1)+P(0,1);\n#endif\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/ Fourier transform of the input\n\n\/\/ Horizontal + Vertical Discrete Fourier Transform of the input \n\/\/ 2 passes pipelined : in -> buf.zw -> buf.xy -> out\n\/\/ ( adapted from  Flyguy's https:\/\/www.shadertoy.com\/view\/MscGWS# )\n\n\n#define SIZE (2.*floor(iResolution.x\/4.*.8)) \/\/ 256. \/\/Size must be changed in each tab.\n\n\/\/#define tex(ch,x,y) texture(ch, vec2(x,y)\/iResolution.xy )\n#define tex(ch,x,y)  texelFetch(ch, ivec2(x,y), 0)\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x) * vec2(cos(b),sin(b)); } \n\/\/ #define ang(a)  vec2(cos(a), sin(a))\n\/\/ vec2 cmul (vec2 a,float t) { vec2 b=ang(t); return mat2(b,-b.y,b.x)*a; } \n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    O-=O; \n    \n    if(uv.x > SIZE || uv.y > SIZE) return;\n        \n    for(float n = 0.; n < SIZE; n++)  {\n        vec2 xn = tex(iChannel0, n+.5, uv.y).xy,\n             yn = tex(iChannel1, uv.x, n+.5).zw,\n             a = - 6.2831853 * (uv-.5 -SIZE\/2.) * n\/SIZE;\n        \n        O.zw += cmul(xn, a.x);\n        O.xy += cmul(yn, a.y);\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":259,"channel":0}],"code":"\/\/ do your operation in spectral domain here\n\n#define SIZE (2.*floor(iResolution.x\/4.*.8)) \/\/ 256. \/\/Size must be changed in each tab.\n\nbool keyPress(int ascii) { return (texture(iChannel2,vec2((.5+float(ascii))\/256.,0.25)).x > 0.); }\nbool keyToggle(int ascii) {return (texture(iChannel2,vec2((.5+float(ascii))\/256.,0.75)).x > 0.); }\nfloat rand(vec2 uv) { return fract(1e5*sin(dot(uv,vec2(17.4,123.7)))); }\nfloat gauss(float x) { return exp(-.5*x*x); }\n#define ang(a)  vec2(cos(a), sin(a))\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x) * vec2(cos(b),sin(b)); } \n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n    if ( U==vec2(.5)) {\n        if (iFrame==0) O.zw = vec2(0,3);\n        else           O.zw = texture(iChannel1, U\/R).zw;  \n        if ( keyPress(32) ) \n            if (iMouse.x\/R.x<.5) O.z = mod(O.z+.1, 5.) ; \/\/ persistant key flag for left window\n            else                 O.w = mod(O.w+.1, 5.) ; \/\/ persistant key flag for right window\n        return;\n    }\n    if ( U==vec2(1.5,.5)) { O.w = float(keyToggle(64+19)); return; } \/\/ key S state\n\n    vec2 T = texture(iChannel0, U \/ R).xy;\n    U -= .5;  \/\/ freq 0 must exist\n    vec2 X = 2.*U\/SIZE - 1.;\n    float l = length(X), s = sign(-X.x), y = iMouse.y\/R.y;\n    \n\n#if 0\n    \/\/ --- your custom Fourier-space filter here --------------------\n    float  \n       \/\/ F = 1.;                                  \/\/ 1: neutral\n       \/\/ F = l*10.;                               \/\/ 2: derivative\n       \/\/ F = .01\/(.01+l);                         \/\/ 3: integral\n       \/\/ F = gauss(l\/.125)*30.;                   \/\/ 4: gaussian blur   <---\n          F = smoothstep(.03,.0, abs(l-.3)) * 20.; \/\/ 5.1: ring filter   <---\n       \/\/ F = smoothstep(.2,.0, abs(l-.4)) * 20.;  \/\/ 5.2: ring filter   <---\n       \/\/ F = smoothstep(-.1,.1,l-y) * 20.;        \/\/ 6: kill LF (mouse tuning)\n       \/\/ F = float(fract(U.x\/2.)*fract(U.y\/2.)>0.);   \/\/ odd  freq only\n       \/\/ F = float(fract(U.x\/2.)+fract(U.y\/2.)==0.);  \/\/ even freq only\n       \/\/ F = SIZE\/length(T);                      \/\/ 7: flat modulus\n                                                   \/\/ --- play with phases --------\n       \/\/ F = ang(6.2832*rand(U))*4.;              \/\/ 10: white noise\n       \/\/ F = gauss(l\/.05)*10.;                    \/\/ 11: modulus profile : gauss\n       \/\/ F = gauss(abs(l-.12)\/.005)*10.;          \/\/ 12: modulus profile : ring (blue noise)\n       \/\/ F = cmul(T,iTime*s);                     \/\/ 13: phase shift with time\n    \n    T *= F;\n#else\n    \/\/ --- clamp almost empty spectrum regions ---\n    \/\/if (length(T)\/sqrt(SIZE)<1e-4) T = vec2(0); \n    \/\/if (length(T)\/sqrt(SIZE)<3.) T = length(T)*ang(6.2832*rand(X)); \n    \n    \/\/ --- direct tuning of the spectrum -----------------------------\n      \/\/ T = length(T) * vec2(1,0);                \/\/ keep modulus, kills phases\n      \/\/ T = length(T) * round(normalize(T));      \/\/ keep modulus, quantize phases: 9\n      \/\/ T = length(T) * sign(T);                  \/\/ keep modulus, quantize phases: 4\n      \/\/ T = length(T) * vec2(sign(T.x+T.y));      \/\/ keep modulus, quantize phases: 2\n      \/\/ T = length(T) * ang(6.2832*rand(X));      \/\/ keep modulus, random phases\n      \/\/ T = normalize(T)*100.;                    \/\/ keep phases only, mod = 1\n      \/\/ T = normalize(T) * rand(X) * 200.;        \/\/ keep phases only, random mod\n         T = normalize(T) * pow(l, -1.6) * 5.;     \/\/ keep phases only, mod = l^-1.6\n      \/\/ T = pow(l, -1.6) * vec2(sign(T.x+T.y)) * 5.; \/\/ quantize phase: 2 , mod = l^-1.6\n#endif\n\n\tif (l==0.) T*=0.;                    \/\/ cancels DC\n    O = vec4(T,0,0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":260,"channel":0}],"code":"\/\/ invFourier transform \n\n\/\/ Horizontal + Vertical Discrete Fourier Transform of the input \n\/\/ 2 passes pipelined : in -> buf.zw -> buf.xy -> out\n\/\/ ( adapted from  Flyguy's https:\/\/www.shadertoy.com\/view\/MscGWS# )\n\n\n#define SIZE (2.*floor(iResolution.x\/4.*.8)) \/\/ 256. \/\/Size must be changed in each tab.\n\n\/\/#define tex(ch,x,y) texture(ch, vec2(x,y)\/iResolution.xy )\n#define tex(ch,x,y)  texelFetch(ch, ivec2(x,y), 0)\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x)*vec2(cos(b), sin(b)); } \n#define W(uv)   mod(uv+SIZE\/2.,SIZE)                    \/\/ wrap [-1\/2,1\/2] to [0,1]\n\n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    O-=O; \n    \n    if(uv.x > SIZE || uv.y > SIZE) return;\n\n    for(float n = 0.; n < SIZE; n++)  {\n        float m = W(n);       \/\/ W to warp 0,0 to mid-window.\n        vec2 xn = tex(iChannel0, m+.5, uv.y).xy,\n             yn = tex(iChannel1, uv.x, m+.5).zw,\n             a =  6.2831853 *  (uv-.5) * n\/SIZE;\n        \n        O.zw += cmul(xn, a.x);\n        O.xy += cmul(yn, a.y);\n    }\n    O \/= SIZE;\n}","name":"Buffer D","description":"","type":"buffer"}]}}