{"Shader":{"ver":"0.1","info":{"id":"stG3Ww","date":"1637784501","viewed":352,"name":"Gas chamber","username":"michael0884","description":"Makes pretty good vortecies arguably","likes":20,"published":3,"flags":32,"usePreview":0,"tags":["fluid","particles","reintegration","mpm","apic"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/MIT License\n\/\/Copyright 2021 Mykhailo Moroz\n\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\trgb = rgb*rgb*(3.0-2.0*rgb); \t\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 C, in vec2 P )\n{\n    R = iResolution.xy; time = iTime; Mouse = iMouse;\n    P = floor(P);\n    \n    if(iMouse.z < 0.)\n    {\n       \/\/ P = iMouse.xy + 300.*(P\/R.x - 0.5); \n    }\n    \n    float m = 0.0;\n    float rho = 0.0;\n    vec2 v = vec2(0.0);\n    float curl = 0.0;\n    range(i, -2, 2) range(j, -2, 2)\n    {\n        \/\/load data\n        vec2 di = vec2(i,j);\n        vec4 data0 = A(P + di);\n        vec4 data1 = B(P + di);\n        \n        \/\/unpack data\n        float m0 = data0.y;\n        vec2 x0 = decode(data0.x) - fract(P);\n        vec2 v0 = decode(data1.x);\n        mat2 B0 = mat2(decode(data1.y),decode(data1.z)); \/\/velocity gradient\n        \/\/update particle position\n        x0 = x0 + di + v0*dt;\n        \n        \/\/find cell contribution\n        vec3 o = overlap(x0, vec2(1.0));\n        \n        m += m0*o.z;\n        \n        float w = k1(x0);\n        \n        v += (v0 + 4.0*B0*x0)*w;\n        curl += w*(x0.x*v0.y - x0.y*v0.x); \n        rho += m0*w;\n    }\n    \n    float arg = 0.5*(atan(v.y, v.x)\/PI + 1.0);\n    float d = 8.5*sqrt(abs(curl))*sign(curl);\n    vec3 fluid =step(-d, 0.)*tanh(d)*vec3(1.000,0.180,0.384) - step(d, 0.)*tanh(d)*vec3(0.122,0.459,1.000);\n    \n    C = mix(vec4(1.0), vec4(fluid,1.0), smoothstep(0., 1.0, rho));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 R;\nvec4 Mouse;\nfloat time;\nint frame;\n\n#define A(p) texelFetch(iChannel0, ivec2(mod(p,R)), 0)\n#define B(p) texelFetch(iChannel1, ivec2(mod(p,R)), 0)\n\n#define CH(c, p) texelFetch(c, ivec2(mod(p,R)), 0)\n\n\/\/loop in range\n#define range(i,a,b) for(int i = a; i <= b; i++)\n\n#define dt 0.8\n#define max_vel 1.0\n#define rad 2\n\n#define diffusion 0.05\n#define gravity 0.00\n\n#define PI 3.14159265\n\n#define rest_rho 1.0\n#define eos_pressure 0.5\n\n\/\/pressure equation of state\nfloat pressure(float rho)\n{\n    return 1.2*(rho); \/\/gas\n   \/\/ return eos_pressure*(pow(rho\/rest_rho,4.) - 1.0); \/\/Tait EOS (water)\n}\n\nvoid InitialConditions(inout float m, inout vec2 v, vec2 P)\n{\n    vec2 dx = P - R*vec2(0.3, 0.5);\n\n    float d = smoothstep(R.y*0.5, R.y*0.49, length(dx));  \n    m = 0.0*d;\n\n    v = d*0.3*normalize(vec2(dx.y,-dx.x));\n}\n\n\/\/KERNEL FUNCTIONS\n\nfloat k0(vec2 dx) \/\/linear kernel\n{\n    vec2 k = max(1.0 - abs(dx), 0.);\n    return k.x*k.y;\n}\n\nvec3 K0(vec2 dx) \/\/linear kernel with the center of mass\n{\n    vec2 k = max(1.0 - abs(dx), 0.);\n    return vec3(dx*0.5, k.x*k.y);\n}\n\nfloat k1(vec2 dx) \/\/quadratic kernel\n{\n    vec2 f = max(1.5 - abs(dx), 0.0);\n    vec2 k = min(max(0.75 - dx*dx, 0.5), 0.5*f*f);\n    return k.x*k.y;\n}\n\n\/\/box size enstimator\nvec2 destimator(vec2 dx)\n{\n    return diffusion*dt+clamp(1.0 - 2.0*abs(dx), 0.001, 1.0);\n}\n\n\/\/box overlap with center of mass\nvec3 overlap(vec2 dx, vec2 box)\n{\n    vec2 min0 = max(dx - box*0.5, -0.5); \n    vec2 max0 = min(dx + box*0.5, 0.5); \n    vec2 size = max(max0 - min0, 0.); \n    return vec3(0.5*(max0 + min0), size.x*size.y\/(box.x*box.y));\n}\n\n\/\/boundary\n#define border_h 3.\nmat2 Rot(float ang)\n{\n    return mat2(cos(ang), -sin(ang), sin(ang), cos(ang)); \n}\n\nvec2 Dir(float ang)\n{\n    return vec2(cos(ang), sin(ang));\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat border(vec2 p)\n{\n    float bound = -border_h-sdBox(p - R*0.5, R*vec2(0.5, 0.5)); \n\n    return bound;\n}\n\n#define h 5.\nvec3 bN(vec2 p)\n{\n    vec3 dx = vec3(-h,0,h);\n    vec4 idx = vec4(-1.\/h, 0., 1.\/h, 0.25);\n    vec3 r = idx.zyw*border(p + dx.zy)\n           + idx.xyw*border(p + dx.xy)\n           + idx.yzw*border(p + dx.yz)\n           + idx.yxw*border(p + dx.yx);\n    return vec3(normalize(r.xy), r.z + 1e-4);\n}\n\n\/\/DATA PACKING\n\nuint pack(vec2 x)\n{\n    x = 65534.0*clamp(0.5*x+0.5, 0., 1.);\n    return uint(round(x.x)) + 65535u*uint(round(x.y));\n}\n\nvec2 unpack(uint a)\n{\n    vec2 x = vec2(a%65535u, a\/65535u);\n    return clamp(x\/65534.0, 0.,1.)*2.0 - 1.0;\n}\n\nvec2 decode(float x)\n{\n    uint X = floatBitsToUint(x);\n    return unpack(X)*12.0; \n}\n\nfloat encode(vec2 x)\n{\n    uint X = pack(x\/12.0);\n    return uintBitsToFloat(X); \n}\n\n\/\/particle to grid\nvec4 P2G(sampler2D a, sampler2D b, vec2 P)\n{\n    vec2 x = vec2(0.0);\n    vec2 v = vec2(0.0);\n    float m = 0.0;\n    float rho = 0.0;\n    \n    range(i, -1, 1) range(j, -1, 1)\n    {\n        \/\/load data\n        vec2 di = vec2(i,j);\n        vec4 data0 = CH(a, P + di);\n        vec4 data1 = CH(b, P + di);\n        \n        \/\/unpack data\n        float m0 = data0.y;\n        float r0 = data0.w;\n        vec2 x0 = decode(data0.x);\n        vec2 v0 = decode(data1.x);\n        mat2 B0 = mat2(decode(data1.y),decode(data1.z)); \/\/velocity gradient\n        \n        \/\/estimate the shape of the distribution\n        vec2 box = destimator(x0);\n        \n        \/\/predicted density using the affine matrix, thanks to Grant Kot for this idea\n        \/\/float rho = ;\/\/;\n        mat2 stress = -mat2(clamp(pressure(data1.w\/determinant(mat2(1.0) + 4.0*B0*dt)), -12., 12.));\n        \n        \/\/update particle position\n        x0 = x0 + di + v0*dt;\n    \n        \/\/find cell contribution\n        vec3 o = overlap(x0, box);\n         \n        \/\/update distribution\n        x += m0*o.xy*o.z;\n        m += m0*o.z;\n        \n        \/\/find grid node contribution\n        float w = k1(x0);\n        \n        \/\/distribute momentum onto grid\n        v += (v0 + 4.0*B0*x0 + dt*stress*x0)*w*m0;\n        rho += m0*w;\n    }\n    \n    \n    \/\/normalize\n    if(rho > 0.0) v \/= rho;\n    if(m > 0.0) x \/= m;\n    \n   \/\/ m = mix(m, 0.3, dt*0.002);\n   \n    if(length(P - R*vec2(0.8 + 0.05*sin(2.4*time), 0.9)) < 10.) \n    {\n        x = vec2(0.0);\n        v =8.8*Dir(-PI*0.25 - PI*0.5 + 0.45*sin(3.4*time));\n        m = mix(m, rest_rho, 0.4*dt);\n    }\n\n    if(length(P - R*vec2(0.2+ 0.05*sin(2.4*time), 0.9)) < 10.) \n    {\n       x = vec2(0.0);\n        v = 8.8*Dir(-PI*0.25 + 0.45*sin(3.4*time));\n        m = mix(m, rest_rho, 0.4*dt);\n    }\n    \n    \/\/initial conditions\n    if(frame < 1)\n    {\n        InitialConditions(m, v, P);\n    }\n    \n    v = (length(v)>max_vel)?normalize(v)*max_vel:v;\n    \n    return vec4(encode(x), m, encode(v), rho);\n}\n\n\/\/grid to particle\nvec4 G2P(sampler2D a, sampler2D b, vec2 P)\n{\n    vec2 V = vec2(0.0);\n    mat2 B = mat2(0.0);\n    \n    vec4 data = CH(a, P);\n    float m = data.y;\n    vec2 x = decode(data.x);\n    float mass = 0.0;\n    \n    range(i, -1, 1) range(j, -1, 1)\n    {\n        \/\/load data\n        vec2 di = vec2(i,j);\n        vec4 data0 = CH(a, P + di);\n        \n        \/\/unpack data\n        float m0 = data0.y;\n        float rho = data0.w;\n        vec2 x0 = decode(data0.x);\n        vec2 dx = x - di;\n        vec2 v0 = decode(data0.z);\n        \n        \/\/find grid node contribution\n        float w = k1(dx);\n        \n        \/\/distribute velocities\/forces to particles\n        V += v0*w;\n        vec2 nv0 =dot(v0, normalize(dx))*normalize(dx);\n        \/\/v0 = v0 - nv0 + clamp(nv0, -0.01, 0.01);\/\/remove divergent component, makes it unstable otherwise\n        B += mat2(v0*dx.x,v0*dx.y)*w;\n    }\n    \n    float divergence = 0.5*(B[0][0] + B[1][1]);\n    \n    B -= 1.7*mat2(divergence);\n    \n    \/\/B = B - B*dt*smoothstep(1.0, 0.8, m);\n    \n    \/\/gravity\n    V += -gravity*vec2(sin(0.),cos(0.))*dt;\n    \n    \/\/push fluid\n    V += vec2(0.0, 8.0)*exp(-0.02*pow(distance(P, R*vec2(0.6,0.2)), 2.));\n    \n    if(Mouse.z > 0.)\n    {\n        vec2 dx = (Mouse.xy - P); \n        V += 0.001*exp(-0.03*length(dx))*dt*dx; \n    }\n    \n    \/\/border \n    vec3 N = bN(P + x);\n    float vdotN = step(N.z, border_h)*dot(-N.xy, V);\n    \/\/V *= 1. - 0.1*exp(-N.z);\n    V += (0. + 1.5*max(vdotN, 0.0))*N.xy*step(abs(N.z), border_h)*exp(-N.z);\n   \/\/ V = (length(V)>max_vel)?normalize(V)*max_vel:V;\n   \n    \/\/estimate density\n    x += V*dt;\n   \n    range(i, -1, 1) range(j, -1, 1)\n    {\n        \/\/load data\n        vec2 di = vec2(i,j);\n        vec4 data0 = CH(a, P + di);\n        vec2 dx = x - di;\n        \/\/unpack data\n        float m0 = data0.y;\n        \n        mass += data0.w*k1(dx);\n    }\n   \n    return vec4(encode(V), encode(clamp(B[0], -2.5,2.5)), encode(clamp(B[1], -2.5,2.5)), mass);\n}\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/Advect mass distributions and distrubute the momentum and density to grid\n\n\/\/Advect + P2G\n\nvoid mainImage( out vec4 C, in vec2 P )\n{\n    R = iResolution.xy; time = iTime; Mouse = iMouse; frame = iFrame;\n    P = floor(P);\n   \n    C = P2G(iChannel0,iChannel1,P);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/Distribute grid velocities to the mass distributions\n\n\/\/G2P\n\nvoid mainImage( out vec4 C, in vec2 P )\n{\n    R = iResolution.xy; time = iTime; Mouse = iMouse; frame = iFrame;\n    P = floor(P);\n    C = G2P(iChannel0, iChannel1, P);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":259,"channel":0}],"code":"\/\/Advect + P2G\n\nvoid mainImage( out vec4 C, in vec2 P )\n{\n    R = iResolution.xy; time = iTime; Mouse = iMouse; frame = iFrame;\n    P = floor(P);\n   \n    C = P2G(iChannel0,iChannel1,P);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":260,"channel":0}],"code":"\/\/G2P\n\nvoid mainImage( out vec4 C, in vec2 P )\n{\n    R = iResolution.xy; time = iTime; Mouse = iMouse; frame = iFrame;\n    P = floor(P);\n    C = G2P(iChannel0, iChannel1, P);\n}","name":"Buffer D","description":"","type":"buffer"}]}}