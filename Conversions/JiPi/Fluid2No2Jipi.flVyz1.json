{
 "ver": "0.1",
 "info": {
  "id": "flVyz1",
  "date": "0",
  "viewed": 0,
  "name": "fluid 2 No2 JiPi",
  "description": "fluid\n\nthis paper helped A LOT:\nhttps://www.cs.ubc.ca/~rbridson/fluidsimulation/fluids_notes.pdf",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "fluid"
  ],
  "hasliked": 0,
  "parentid": "flKczR",
  "parentname": "fluid 2 (number 2)"
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "XsXGR8",
     "filepath": "/media/previz/buffer01.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "\n\nprecision highp float;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 col = texture(iChannel0, uv);\n    \n    vec2 muv = iMouse.xy / iResolution.xy;\n    \n    //float sound = texture(iChannel1, vec2(.75, .25)).x;\n    \n    fragColor = 3. *  mix(vec4(col.w), (col), .7);\n}\n\n\n",
   "name": "Image",
   "description": "",
   "type": "image"
  },
  {
   "inputs": [
    {
     "id": "XsXGR8",
     "filepath": "/media/previz/buffer01.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dXGR8",
     "channel": 0
    }
   ],
   "code": "precision highp float;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 col = texture(iChannel0, uv);\n    \n    \n    \n    fragColor = col;\n}",
   "name": "Buffer A",
   "description": "",
   "type": "buffer"
  },
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "XsXGR8",
     "channel": 0
    }
   ],
   "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec2 uvc = uv - vec2(0.5);\n    \n    vec4 col = vec4(0.);\n    \n    \n    ivec2 fragI = ivec2(fragCoord);\n    \n    vec2 ex = vec2(1., 0.);\n    vec2 ey = vec2(0., 1.);\n    \n    vec2 coords = fragCoord;\n    \n    vec2 cfx = coords + ex;\n    vec2 cbx = coords - ex;\n    vec2 cfy = coords + ey;\n    vec2 cby = coords - ey;\n    \n    \n    \n    \n    if(iFrame == 0){\n        col = vec4(0.);\n    }\n    else if(distance(uvc, vec2(0.)) < 1.) {\n        \n        \n        //advect to new spot\n        vec4 u = texture(iChannel0, vec2(coords / iResolution.xy));\n        \n        vec4 ufx = texture(iChannel0, vec2(cfx / iResolution.xy));\n        vec4 ubx = texture(iChannel0, vec2(cbx / iResolution.xy));\n        vec4 ufy = texture(iChannel0, vec2(cfy / iResolution.xy));\n        vec4 uby = texture(iChannel0, vec2(cby / iResolution.xy));\n        \n        \n        \n        \n        \n        \n        float dpx = ufx.z - ubx.z;\n        float dpy = ufy.z - uby.z;\n        \n        \n        \n        cfx -= ufx.xy;\n        cbx -= ubx.xy;\n        cfy -= ufy.xy;\n        cby -= uby.xy;\n        \n        \n        coords -= u.xy;\n        \n        \n        float densX = distance(coords, cfx) + distance(coords, cbx) - 2.;\n        float densY = distance(coords, cfy) + distance(coords, cby) - 2.;\n        \n        float density = densX + densY;\n        \n\n        //apply changes\n        col = texture(iChannel0, vec2(coords / iResolution.xy));\n        \n        col.x -= dpx / 8.;\n        col.y -= dpy / 8.;\n        \n        \n        \n        \n        \n        \n        //get data at new spot\n        ufx = texture(iChannel0, vec2(cfx / iResolution.xy));\n        ubx = texture(iChannel0, vec2(cbx / iResolution.xy));\n        ufy = texture(iChannel0, vec2(cfy / iResolution.xy));\n        uby = texture(iChannel0, vec2(cby / iResolution.xy));\n        \n        vec4 uAvg = (ufx + ubx + ufy + uby) / 4.;\n        \n        col.z = uAvg.z + (density / 8.);\n        \n        \n        //col.z = .1 * col.w;\n        //col.xy+= vec2(0., -.02) * iTimeDelta;\n        \n        \n        \n        if(iMouse.z > 0.){\n            vec2 muvc = (iMouse.xy / iResolution.xy) - vec2(.5);\n            \n            col += vec4(-muvc, 0., 1.) * iTimeDelta * (.1 / (0.001 + distance(uvc, muvc))) * .05;\n        }\n        \n        \n        if(abs(coords.x - iResolution.x * .5) >= iResolution.x * .4 || abs(coords.y - iResolution.y * .5) >= iResolution.y * .4){\n            col.xyz = vec3(0.); \n        }\n        \n        if(distance(coords, iResolution.xy * vec2(.25, .5)) < 1.){\n            col += vec4(.2, .01 * sin(iTime), 0., .1);\n        }\n        \n        if(distance(coords, iResolution.xy * vec2(.75, .5)) < 1.){\n            col += vec4(-.2, -.01 * sin(iTime), 0., .1);\n        }\n        \n        \n        //dye will dissipate over time\n        //col.w *= .9999;\n        \n    }\n    \n    \n    \n    fragColor = col;\n}",
   "name": "Buffer B",
   "description": "",
   "type": "buffer"
  }
 ]
}