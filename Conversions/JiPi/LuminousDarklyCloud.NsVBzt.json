{"Shader":{"ver":"0.1","info":{"id":"NsVBzt","date":"1658716967","viewed":181,"name":"Luminous Darkly Cloud","username":"leon","description":"love is in the air","likes":25,"published":3,"flags":0,"usePreview":0,"tags":["noise","cloud","moon","lightning"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"\n\/\/ Luminous Darkly Cloud\n\/\/\n\/\/ - inadequat volumetric rendering\n\/\/ - incorrect ambien occlusion\n\/\/ - overloading gyroid fbm noise\n\/\/ - fake lightning\n\/\/ - random point of view\n\/\/\n\/\/ \"but with the right numbers, it looks nice!\"\n\n\/\/ globals\nconst vec3 cloudColor = vec3(0.702,0.776,1.000);\nconst vec3 lightColor = vec3(1.000,0.812,0.400);\nfloat glow, cycle, noise, columns, index;\nvec3 target;\nbool flash;\n\n\/\/ signed distance function\nfloat map(vec3 p)\n{\n    noise = fbm(p+vec3(0,0,iTime*.2));\n    \n    \/\/ cloud\n    float dist = length(p*vec3(1,2,1))-1.;\n    dist -= noise*.5;\n    dist *= .3;\n    \n    if (flash) {\n        \/\/ mouse control\n        if (iMouse.z > 0.5) {\n            p.yz *= rot(1.5);\n            p.xy *= rot(-target.x*2.);\n            p.yz *= rot(target.y*2.);\n        }\n\n        \/\/ lightning\n        float fade = smoothstep(3.,0.,p.y);\n        p -= fbm(p+cycle)*.3*fade;\n        float c = pModPolar(p.xz, columns);\n        p.x += .5*min(0.,max(-p.y,0.)-2.);\n        float shape = max(p.y+1., length(p.xz)*2.);\n        glow += .02\/shape;\n        dist = min(dist, shape);\n    }\n    \n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ salt\n    vec3 rng = hash33(vec3(fragCoord, iFrame));\n    \n    \/\/ coordinates\n    vec2 uv = (fragCoord-iResolution.xy\/2.)\/iResolution.y;\n    vec3 color = vec3(0);\n    vec3 pos = vec3(0,-1,5);\n    vec3 ray = lookAt(pos, vec3(0), uv, 1.);\n    \n    \/\/ timeline\n    float time = iTime*5.;\n    float anim = fract(time);\n    index = floor(time);\n    float alea = step(.9, hash11(index));\n    cycle = index;\n    columns = 1.+floor(6.*hash11(index+186.));\n    glow = 0.;\n    flash = alea > .01;\n    \n    \/\/ mouse interaction\n    if (iMouse.z > 0.) {\n        vec2 mouse = (iMouse.xy-iResolution.xy\/2.)\/iResolution.y;\n        target = vec3(floor(mouse*10.)\/10.,0);\n        cycle = hash12(iMouse.xy);\n        columns = ceil(5.*hash12(iMouse.xy+76.));\n        flash = true;\n        anim = 0.;\n    }\n    \n    \/\/ raymarch\n    float maxDist = 10.;\n    const float count = 30.;\n    float steps = 0.;\n    float total = 0.;\n    float dense = 0.;\n    for (steps = count; steps > 0.; --steps) {\n        float dist = map(pos);\n        dist *= 0.7+0.3*rng.x;\n        \/\/ sort of volumetric march\n        if (dist < .1) {\n            dense += .02;\n            dist = .02;\n        }\n        total += dist;\n        if (dense >= 1. || total > maxDist) break;\n        pos += ray * dist;\n    }\n    \n    \/\/ cloud color\n    color = cloudColor;\n    #define getAO(dir,k) smoothstep(-k,k,map(pos+dir*k)-map(pos-dir*k))\n    color *= .5+.5*getAO(vec3(0,1,0),.5);\n    color *= .5+.5*getAO(vec3(0,1,0),2.);\n    color *= dense;\n    \n    \/\/ lightning color\n    color += lightColor * pow(glow, 2.) * (1.-anim);\n    color = clamp(color, 0., 1.);\n    \n    fragColor = vec4(color, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n\n\/\/ Dave Hoskins\n\/\/ https:\/\/www.shadertoy.com\/view\/4djSRW\nfloat hash11(float p) {\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\nvec3 hash33(vec3 p3) {\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\nfloat hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\/\/ Mercury\n\/\/ https:\/\/mercury.sexy\/hg_sdf\/\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 6.28\/repetitions;\n\tfloat a = atan(p.y, p.x) + angle\/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a\/angle);\n\ta = mod(a,angle) - angle\/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t\/\/ For an odd number of repetitions, fix cell index of the cell in -x direction\n\t\/\/ (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions\/2.)) c = abs(c);\n\treturn c;\n}\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c,-s,s,c);\n}\n\nvec3 lookAt (vec3 from, vec3 at, vec2 uv, float fov)\n{\n  vec3 z = normalize(at-from);\n  vec3 x = normalize(cross(z, vec3(0,1,0)));\n  vec3 y = normalize(cross(x, z));\n  return normalize(z * fov + uv.x * x + uv.y * y);\n}\n\n\/\/ fbm gyroid noise\nfloat gyroid (vec3 seed) { return dot(sin(seed),cos(seed.yzx)); }\nfloat fbm (vec3 seed) {\n    float result = 0.;\n    float a = .5;\n    for (int i = 0; i < 4; ++i) {\n        result += pow(abs(gyroid(seed\/a)),3.)*a;\n        a \/= 2.;\n    }\n    return result;\n}","name":"Common","description":"","type":"common"}]}}