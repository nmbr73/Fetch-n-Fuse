{
 "ver": "0.1",
 "info": {
  "id": "NtGSWh",
  "date": "0",
  "viewed": 0,
  "name": "Fork non-energy JiPi 185",
  "description": "click to generate a ball of force and watch it evolve!\n\ninspired by suture fluid: https://www.shadertoy.com/view/XddSRX",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "test",
   "fluid",
   "diffusion"
  ],
  "hasliked": 0,
  "parentid": "4ddczX",
  "parentname": "non-energy-preserving (click)"
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "#define PI 3.14159265\n\n// https://github.com/hughsk/glsl-hsv2rgb/blob/master/index.glsl\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 values = texture(iChannel0, uv).xyz;\n    \n    vec2 vector = values.xy;\n    float angle = atan(vector.y, vector.x);\n    float mag = length(vector) / 10.;\n    vec3 hsv = hsv2rgb(vec3(angle / (PI*2.), 0.9, mag));\n    \n    vec3 color = hsv;\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}",
   "name": "Image",
   "description": "",
   "type": "image"
  },
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dXGR8",
     "channel": 0
    }
   ],
   "code": "vec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(227.1,341.7)),\n\t\t\t  dot(p,vec2(259.5,283.3)) );\n\n\treturn -1.0 + 2.0*fract(sin(p)*4378.5453123);\n}\n\nvec2 rand(vec2 uv) {\n    return normalize(hash(uv));\n}\n\nvec2 computeGive(vec3 uv, vec2 dir) {\n    vec2 flow = uv.xy;\n    if (length(flow) == 0.) {\n        return vec2(0.);\n    }\n    float amount = dot(flow, normalize(dir)) / length(flow);\n    //amount = max(amount, 0.);\n    return amount * flow;\n}\n\n// mapping edges into a donut shape\nvec3 texDonut(vec2 uv) {\n    return texture(iChannel0, fract(uv)).xyz;\n}\n\nvec3 texTiedCylinder(vec2 uv) {\n    vec2 velScalar = vec2(1.);\n    vec2 newUv = uv;\n    newUv.x = fract(newUv.x);\n    if (newUv.y > 1.) {\n        newUv.x = 1. - newUv.x;\n        newUv.y = 2. - newUv.y;\n        velScalar *= -1.;\n    }\n    if (newUv.y < 0.) {\n        newUv.x = 1. - newUv.x;\n        newUv.y = -newUv.y;\n        velScalar *= -1.;\n    }\n    vec3 tex = texture(iChannel0, newUv).xyz;\n    return vec3(tex.xy * velScalar, tex.z);\n}\n\n#define tex texTiedCylinder\n\n// inspired by suture fluid: https://www.shadertoy.com/view/XddSRX\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 vUv = fragCoord / iResolution.xy;\n    vec2 step = 1. / iResolution.xy;\n    float step_x = step.x;\n    float step_y = step.y;   \n    \n    vec2 n  = vec2(0.0, step_y);\n    vec2 ne = vec2(step_x, step_y);\n    vec2 e  = vec2(step_x, 0.0);\n    vec2 se = vec2(step_x, -step_y);\n    vec2 s  = vec2(0.0, -step_y);\n    vec2 sw = vec2(-step_x, -step_y);\n    vec2 w  = vec2(-step_x, 0.0);\n    vec2 nw = vec2(-step_x, step_y);\n\n\t// get the 3x3 neighborhood.\n    vec3 uv =    tex(vUv);\n    vec3 uv_n =  tex(vUv+n);\n    vec3 uv_e =  tex(vUv+e);\n    vec3 uv_s =  tex(vUv+s);\n    vec3 uv_w =  tex(vUv+w);\n    vec3 uv_nw = tex(vUv+nw);\n    vec3 uv_sw = tex(vUv+sw);\n    vec3 uv_ne = tex(vUv+ne);\n    vec3 uv_se = tex(vUv+se);\n    \n    // blur\n    vec3 sum = uv / 4. + (uv_n + uv_e + uv_s + uv_w) / 8. + (uv_nw + uv_sw + uv_ne + uv_se) / 16.;\n    \n    \n    // compute how much you \"give\" to the other cells, based on which direction you're pointed at\n    vec2 n_give_me = computeGive(uv_n, s);\n    vec2 e_give_me = computeGive(uv_e, w);\n    vec2 s_give_me = computeGive(uv_s, n);\n    vec2 w_give_me = computeGive(uv_w, e);\n    vec2 nw_give_me = computeGive(uv_nw, se);\n    vec2 sw_give_me = computeGive(uv_sw, ne);\n    vec2 ne_give_me = computeGive(uv_ne, sw);\n    vec2 se_give_me = computeGive(uv_se, nw);\n    \n    vec2 me_give_n = computeGive(uv, n);\n    vec2 me_give_e = computeGive(uv, e);\n    vec2 me_give_s = computeGive(uv, s);\n    vec2 me_give_w = computeGive(uv, w);\n    vec2 me_give_nw = computeGive(uv, nw);\n    vec2 me_give_sw = computeGive(uv, sw);\n    vec2 me_give_ne = computeGive(uv, ne);\n    vec2 me_give_se = computeGive(uv, se);\n    \n    vec2 transfer = +(n_give_me + e_give_me + s_give_me + w_give_me) / 4.\n        \t\t\t+(nw_give_me + sw_give_me + ne_give_me + se_give_me) / 16.\n        \t\t\t-(me_give_n + me_give_e + me_give_s + me_give_w) / 4.\n        \t\t\t-(me_give_nw + me_give_sw + me_give_ne + me_give_se) / 16.;\n\n    // float transferAmount = sin(iTime) * 1.4;\n    float transferAmount = (1. - fragCoord.y / iResolution.y) * 1.5;\n    \n    vec2 newFlow = sum.xy + transfer * transferAmount;\n    \n    // initialize\n    if (length(iMouse.zw - fragCoord) < 25.) {\n        float angle = iTime / 1.;\n        newFlow = vec2(cos(angle), sin(angle)) * 15.;\n        fragColor = vec4(newFlow, 0., 1.0);\n    } else if (iFrame < 10) {\n        fragColor = vec4(vec2(0.), 0., 1.0);\n        fragColor = vec4(rand(vUv) * 10., 0., 1.0);\n    } else {\n        float max = 100.;\n        newFlow = length(newFlow) > max ? normalize(newFlow) * max : newFlow;\n        // newFlow = normalize(newFlow);\n\t    fragColor = vec4(newFlow, 0., 1.0);\n    }\n}",
   "name": "Buffer A",
   "description": "",
   "type": "buffer"
  }
 ]
}