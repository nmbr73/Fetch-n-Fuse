{
 "ver": "0.1",
 "info": {
  "id": "fdjczz",
  "date": "0",
  "viewed": 0,
  "name": "Fork apply insu JiPi 582",
  "description": "Fork of [url]https://www.shadertoy.com/view/sdscDs[/url].\nWrapping a 2d SDF around a torus. Even less exact than the plane version (which was reasonably exact) so ray-marching-step must be halved.\n",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "2d",
   "3d",
   "sdf",
   "torus",
   "distance",
   "skeleton",
   "wrap",
   "core",
   "bound",
   "extrude",
   "2dto3d",
   "extrusion",
   "insulate"
  ],
  "hasliked": 0,
  "parentid": "ssBczR",
  "parentname": "apply insulate operator to torus"
 },
 "renderpass": [
  {
   "inputs": [],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "// https://www.shadertoy.com/view/ssBczR\n// based on https://www.shadertoy.com/view/sdscDs insulate by jt\n// wrap 2d SDF around a torus - less exact than plane version\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\n// https://iquilezles.org/www/articles/distfunctions2d/distfunctions2d.htm\nfloat halfspace(vec3 p, float d)\n{\n    return p.z - d;\n}\n\nfloat torus(vec3 p, vec2 t)\n{\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return length(q) - t.y;\n}\n\nfloat box2d(vec2 p)\n{\n    vec2 d = abs(p) - 1.0;\n    return min(max(d.x, d.y),0.0) + length(max(d, 0.0));\n}\n\nfloat circle2d(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat segment2d(vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\nfloat insulate_box(vec3 p)\n{\n    float dp = torus(p, vec2(1,0.5)); // distance to torus\n    float d = box2d(p.xy); // distance to 2d SDF\n    return sqrt(dp*dp+d*d); // 3dify 2d SDF\n}\n\nfloat insulate_boxes(vec3 p)\n{\n    float dp = torus(p, vec2(1,0.5)); // distance to torus\n    float d = abs(abs(box2d(p.xy)) - 0.5) - 0.25; // distance to 2d SDF\n    return sqrt(dp*dp+d*d); // 3dify 2d SDF\n}\n\nfloat insulate_circle(vec3 p)\n{\n    float dp = torus(p, vec2(1,0.5)); // distance to torus\n    float d = circle2d(p.xy, 1.0); // distance to 2d SDF\n    return sqrt(dp*dp+d*d); // 3dify 2d SDF\n}\n\nfloat insulate_circles(vec3 p)\n{\n    float dp = torus(p, vec2(1,0.5)); // distance to torus\n    float d = abs(abs(circle2d(p.xy, 1.0)) - 0.5) - 0.25; // distance to 2d SDF\n    return sqrt(dp*dp+d*d); // 3dify 2d SDF\n}\n\nfloat insulate_segment(vec3 p)\n{\n    float dp = torus(p, vec2(1,0.5)); // distance to torus\n    float d = segment2d(p.xy, vec2(-1.5), vec2(+1.5)); // distance to 2d SDF\n    return sqrt(dp*dp+d*d); // 3dify 2d SDF\n}\n\nfloat map(vec3 p)\n{\n    float d = mix(0.01, 0.1, 0.5 + 0.5 * cos(iTime));\n    return\n        min\n        (\n            min\n            (\n                min\n                (\n                    insulate_circles(p) - d,\n                    insulate_boxes(p) - d\n                ),\n                insulate_segment(p) - d\n            ),\n            halfspace(p, -1.2)\n        );\n}\n\n// https://iquilezles.org/www/articles/normalsSDF/normalsSDF.htm tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h)\n            +\n            k.yyx * map(p + k.yyx*h)\n            +\n            k.yxy * map(p + k.yxy*h)\n            +\n            k.xxx * map(p + k.xxx*h)\n        );\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    for(float t = 0.0; t < DIST_MAX;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h * 0.5; // NOTE: due to inexact SDF step must be reduced\n    }\n    return DIST_MAX;\n}\n\n// https://iquilezles.org/www/articles/rmshadows/rmshadows.htm\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h * 0.5; // NOTE: due to inexact SDF step must be reduced\n    }\n    return 1.0;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = pi / 2.0 + pi / 2.0 * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x != 0.0) ? mx : 2.0 * pi * fract(iTime * 0.1);\n    my = (iMouse.y != 0.0) ? my : pi * 3.0 / 4.0;;\n\n    mat2 R = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 0.0, -5.0 );//vec3(0.0, -10.0 * my, 0.0);\n    //mat2 S = mat2(vec2(0.0, 1.0), vec2(-1.0, 0.0));\n    mat2 S = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz=S*ro.yz;\n    ro.xy = R * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz=S*rd.yz;\n    rd.xy = R * rd.xy;\n\n    float dist = trace(ro, rd);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.4);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX); // XXX artifacts on cylinder XXX\n    vec3 color = vec3(1.0);\n    color *= (n * 0.5 + 0.5);\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n\n    fragColor = mix(vec4(color, 1.0), vec4(0.0), step(DIST_MAX, dist));\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n",
   "name": "Image",
   "description": "",
   "type": "image"
  }
 ]
}