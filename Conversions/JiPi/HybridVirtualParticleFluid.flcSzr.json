{"Shader":{"ver":"0.1","info":{"id":"flcSzr","date":"1638575940","viewed":560,"name":"Hybrid Virtual Particle Fluid","username":"cornusammonis","description":"Hybrid fluid solver using both forward and reverse advection.","likes":30,"published":3,"flags":48,"usePreview":0,"tags":["simulation","fluid","poisson","particle","virtual"],"hasliked":0},"renderpass":[{"inputs":[{"id":27,"src":"\/media\/a\/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","ctype":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/*\nLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n***Click to paint.***\n\nAutomatic mouse movement can be turned off using the ENABLE_AUTO_MOUSE #define\nThe bounding box can be turned off using the ENABLE_BOUNDS #define.\n\nThis is a hybrid fluid simulation that combines both forward and reverse\nadvection techniques to achieve a high-quality pressure solution,\naccurate advection, and decent performance while also remaining \nconservative unless under extreme velocities. The virtual particle\nmethod used here is based on Michael Moroz' Reintegration Tracking \nmethod, extended to support Gaussian particle kernels:\nhttps:\/\/www.shadertoy.com\/view\/WtfyDj\n\nIn the low-velocity regime, forward advection with virtual particles is\nused. Virtual particle size is controlled according to the magnitude of\nvelocity; low velocity particles increase in size while high velocity\nparticle decrease in size. The virtual particle size scaling measure\ncan be changed using the VIRTUAL_PARTICLE_SIZE #define.\n\nVirtual particles use a gaussian kernel. In order to conserve velocity\nand mass in forward advection, masses and velocities from neighboring\nparticles are accumulated according to box integrals of the error function\n(approximated here as tanh, but a more accurate approximation is provided\nby toggling the USE_TANH #define). Both the integral and center of mass\nof box intersections with a gaussian kernel are computed here.\n\nWhen particle velocities exceed the forward advection integration range, \nreverse advection is used, using the RK4 method. Using this method,\nit is possible to achieve forward advection without also setting a hard\nupper bound on velocity.\n\nThe Poisson pressure solver kernel used here is precomputed using a custom solver.\nFirst, a 2D kernel is computed, then a separable kernel is derived using\nSingular Value Decomposition. The separable kernel method used here can\nachieve a nearly-perfect pressure solve in 4 steps, but a single step is\nused here for interactivity. The number of pressure solver steps per\nfluid solver steps can be changed with the FRAME_DIVIDER #define (set to 1\nby default, but can be changed to 4 for a high quality pressure solve).\n\nAdditional methods are implemented here in order to increase fluid detail.\nThis simulation implements multiscale Vorticity Confinement, a kernel-based\nturbulence method based on my earlier Multiscale MIP Fluid simulation:\nhttps:\/\/www.shadertoy.com\/view\/tdVSDh\nand Florian Berger's work:\nhttps:\/\/www.shadertoy.com\/view\/MsGSRd\nThis work also implements multiscale viscosity. The size and shape of\nthe kernels for these methods can be changed using the\nMULTISCALE_KERNEL_POWER and MULTISCALE_KERNEL_STEPS #defines.\n\n\n*\/\n\n#define THIN_FILM\n#ifdef NORMAL\nvoid mainImage( out vec4 c, in vec2 p )\n{    \n    initialize(p, iFrame, iResolution);\n\n    vec4 fluid = texture(iChannel1, uv);\n    #ifdef USE_VORTICITY\n        float v = 0.5*fluid.w + 0.5;\n    #else\n        float v = fluid.w;\n    #endif\n    c = v*(0.5 + 1.0*fluid);\n    \n    vec4 curlcol =  mix(vec4(1,0,0,0),vec4(0,0,1,0),smoothstep(0.,1.,fluid.w + 0.5));\n    curlcol = mix(vec4(1), curlcol, smoothstep(0.,1.,pow(abs(4.0*fluid.w),0.5)));\n    \n    float p0 = textureLod(iChannel1, uv, 0.).x;\n    float p1 = textureLod(iChannel1, uv, 12.).x;\n    float h = smoothstep(-1.,1., 0.2*(p0-p1));\n    c = vec4(smoothstep(-.4,1.2,2.0*h * length(fluid.xy) * curlcol));\n    \/\/c = vec4(length(fluid.xy));\n    c = fluid.zzzz;\n    \n    vec2 comt = textureLod(iChannel2, uv, 0.).zw;\n    c = vec4(4.0*comt + 0.5,8.0*length(comt),0);\n}\n#endif\n\n#ifdef HEIGHT\nvoid mainImage( out vec4 c, in vec2 p )\n{    \n    initialize(p, iFrame, iResolution);\n    \n    vec4 tx = texelFetch(iChannel3, ivec2(p), 0);\n    vec2 t1 = unpack2x16(tx.x);\n    vec2 t2 = unpack2x16(tx.y);\n    vec2 t3 = unpack2x16(tx.z);\n\n    float height = texture(iChannel2, uv).x;\n    vec4 fluid = texture(iChannel1, uv);\n    \n    \/\/c = 0.5 + 0.5*vec4(height);\n    \/\/c = length(fluid.xy) * (0.5+fluid);\n    \/\/c = 0.3*vec4(fluid.zzz,1);\n    c = 0.15*vec4(fluid.zzz,1) * vec4(length(fluid.xy));\n}\n#endif\n\n\n#ifdef THIN_FILM\n\/*\n\tFast Thin-Film Interference\n\n\tThis is a performance-optimized version of my previous \n\tthin-film interference shader here: https:\/\/www.shadertoy.com\/view\/XddXRj\n\tThis version also fixes a platform-specific bug and has\n\ta few other tweaks as well.\n\n\tThin-film interference and chromatic dispersion are simulated at\n\tsix different wavelengths and then downsampled to RGB.\n*\/\n\n\/\/ To see just the reflection (no refraction\/transmission) uncomment this next line:\n\/\/#define REFLECTANCE_ONLY\n\n\/\/ performance and raymarching options\n#define INTERSECTION_PRECISION 0.01  \/\/ raymarcher intersection precision\n#define ITERATIONS 20\t\t\t\t \/\/ max number of iterations\n#define AA_SAMPLES 1\t\t\t\t \/\/ anti aliasing samples\n#define BOUND 6.0\t\t\t\t\t \/\/ cube bounds check\n#define DIST_SCALE 0.9   \t\t\t \/\/ scaling factor for raymarching position update\n\n\/\/ optical properties\n#define DISPERSION 0.05\t\t\t     \/\/ dispersion amount\n#define IOR 0.9     \t\t\t\t \/\/ base IOR value specified as a ratio\n#define THICKNESS_SCALE 32.0\t\t \/\/ film thickness scaling factor\n#define THICKNESS_CUBEMAP_SCALE 0.1  \/\/ film thickness cubemap scaling factor\n#define REFLECTANCE_SCALE 3.0        \/\/ reflectance scaling factor\n#define REFLECTANCE_GAMMA_SCALE 1.0  \/\/ reflectance gamma scaling factor\n#define FRESNEL_RATIO 0.1\t\t\t \/\/ fresnel weight for reflectance\n#define SIGMOID_CONTRAST 10.0         \/\/ contrast enhancement\n\n#define GAMMA_CURVE 1.0\n#define GAMMA_SCALE 1.0\n\n#define TWO_PI 6.28318530718\n#define WAVELENGTHS 6\t\t\t\t \/\/ number of wavelengths, not a free parameter\n\n\/\/ iq's cubemap function\nvec3 fancyCube( sampler2D sam, in vec3 d, in float s, in float b )\n{\n    vec3 colx = textureLod( sam, 0.5 + s*d.yz\/d.x, b ).xyz;\n    vec3 coly = textureLod( sam, 0.5 + s*d.zx\/d.y, b ).xyz;\n    vec3 colz = textureLod( sam, 0.5 + s*d.xy\/d.z, b ).xyz;\n    \n    vec3 n = d*d;\n    \n    return (colx*n.x + coly*n.y + colz*n.z)\/(n.x+n.y+n.z);\n}\n\n\/\/ iq's 3D noise function\nfloat hash( float n ){\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec3 x ) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n}\n\nvec3 noise3(vec3 x) {\n\treturn vec3( noise(x+vec3(123.456,.567,.37)),\n\t\t\t\t noise(x+vec3(.11,47.43,19.17)),\n\t\t\t\t noise(x) );\n}\n\n\/\/ a sphere with a little bit of warp\nfloat sdf( vec3 p ) {\n\tvec3 n = vec3(sin(iDate.w * 0.5), sin(iDate.w * 0.3), cos(iDate.w * 0.2));\n\tvec3 q = 0.1 * (noise3(p + n) - 0.5);\n  \n\treturn length(q + p) - 3.5;\n}\n\nvec3 fresnel( vec3 rd, vec3 norm, vec3 n2 ) {\n   vec3 r0 = pow((1.0-n2)\/(1.0+n2), vec3(2));\n   return r0 + (1. - r0)*pow(clamp(1. + dot(rd, norm), 0.0, 1.0), 5.);\n}\n\nvec3 calcNormal( in vec3 pos ) {\n    const float eps = INTERSECTION_PRECISION;\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*sdf( pos + v1*eps ) + \n\t\t\t\t\t  v2*sdf( pos + v2*eps ) + \n\t\t\t\t\t  v3*sdf( pos + v3*eps ) + \n\t\t\t\t\t  v4*sdf( pos + v4*eps ) );\n}\n\nvec3 filmic_gamma(vec3 x) {\n\treturn log(GAMMA_CURVE * x + 1.0) \/ GAMMA_SCALE;    \n}\n\nvec3 filmic_gamma_inverse(vec3 y) {\n\treturn (1.0 \/ GAMMA_CURVE) * (exp(GAMMA_SCALE * y) - 1.0); \n}\n\n\/\/ sample weights for the cubemap given a wavelength i\n\/\/ room for improvement in this function\n#define GREEN_WEIGHT 2.8\nvec3 texCubeSampleWeights(float i) {\n\tvec3 w = vec3((1.0 - i) * (1.0 - i), GREEN_WEIGHT * i * (1.0 - i), i * i);\n    return w \/ dot(w, vec3(1.0));\n}\n\nvec3 sampleCubeMap(vec3 i, vec3 rd) {\n\tvec3 col = textureLod(iChannel0, rd * vec3(1.0,-1.0,1.0), 0.0).xyz; \n    return vec3(\n        dot(texCubeSampleWeights(i.x), col),\n        dot(texCubeSampleWeights(i.y), col),\n        dot(texCubeSampleWeights(i.z), col)\n    );\n}\n\nvec3 sampleCubeMap(vec3 i, vec3 rd0, vec3 rd1, vec3 rd2) {\n\tvec3 col0 = textureLod(iChannel0, rd0 * vec3(1.0,-1.0,1.0), 0.0).xyz;\n    vec3 col1 = textureLod(iChannel0, rd1 * vec3(1.0,-1.0,1.0), 0.0).xyz; \n    vec3 col2 = textureLod(iChannel0, rd2 * vec3(1.0,-1.0,1.0), 0.0).xyz; \n    return vec3(\n        dot(texCubeSampleWeights(i.x), col0),\n        dot(texCubeSampleWeights(i.y), col1),\n        dot(texCubeSampleWeights(i.z), col2)\n    );\n}\n\n\n\nvec3 sampleWeights(float i) {\n\treturn vec3((1.0 - i) * (1.0 - i), GREEN_WEIGHT * i * (1.0 - i), i * i);\n}\n\nvec3 resample(vec3 wl0, vec3 wl1, vec3 i0, vec3 i1) {\n\tvec3 w0 = sampleWeights(wl0.x);\n    vec3 w1 = sampleWeights(wl0.y);\n    vec3 w2 = sampleWeights(wl0.z);\n    vec3 w3 = sampleWeights(wl1.x);\n    vec3 w4 = sampleWeights(wl1.y);\n    vec3 w5 = sampleWeights(wl1.z);\n    \n    return i0.x * w0 + i0.y * w1 + i0.z * w2\n         + i1.x * w3 + i1.y * w4 + i1.z * w5;\n}\n\n\/\/ downsample to RGB\nvec3 resampleColor(vec3[WAVELENGTHS] rds, vec3 refl0, vec3 refl1, vec3 wl0, vec3 wl1) {\n\n    \n    #ifdef REFLECTANCE_ONLY\n    \tvec3 intensity0 = refl0;\n    \tvec3 intensity1 = refl1;\n    #else\n        vec3 cube0 = sampleCubeMap(wl0, rds[0], rds[1], rds[2]);\n    \tvec3 cube1 = sampleCubeMap(wl1, rds[3], rds[4], rds[5]);\n    \n        vec3 intensity0 = filmic_gamma_inverse(cube0) + refl0;\n    \tvec3 intensity1 = filmic_gamma_inverse(cube1) + refl1;\n    #endif\n    vec3 col = resample(wl0, wl1, intensity0, intensity1);\n\n    return col \/ float(WAVELENGTHS);\n}\n\n\/\/ compute the wavelength\/IOR curve values.\nvec3 iorCurve(vec3 x) {\n\treturn x;\n}\n\nvec3 attenuation(float filmThickness, vec3 wavelengths, vec3 normal, vec3 rd) {\n\treturn 0.5 + 0.5 * cos(((THICKNESS_SCALE * filmThickness)\/(wavelengths + 1.0)) * dot(normal, rd));    \n}\n\nvec3 contrast(vec3 x) {\n\treturn 1.0 \/ (1.0 + exp(-SIGMOID_CONTRAST * (x - 0.5)));    \n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in vec4 m ) {\n    camTar = vec3(0.0,0.0,0.0); \n    if (max(m.z, m.w) <= 0.0) {\n    \tfloat an = 1.5 + sin(time * 0.05) * 4.0;\n\t\tcamPos = vec3(6.5*sin(an), 0.0 ,6.5*cos(an));   \n    } else {\n    \tfloat an = 10.0 * m.x - 5.0;\n\t\tcamPos = vec3(6.5*sin(an),10.0 * m.y - 5.0,6.5*cos(an)); \n    }\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 c, in vec2 p )\n{   \n    initialize(p, iFrame, iResolution);\n    vec3 col = vec3(0.0);\n    \n    Vec4Neighborhood pn = GetVec4Neighborhood(iChannel2);\n    vec2 dp = Delta(pn, 0);\n    \n    vec3 wavelengths0 = vec3(1.0, 0.8, 0.6);\n    vec3 wavelengths1 = vec3(0.4, 0.2, 0.0);\n    vec3 iors0 = IOR + iorCurve(wavelengths0) * DISPERSION;\n    vec3 iors1 = IOR + iorCurve(wavelengths1) * DISPERSION;\n    \n    vec3 rds[WAVELENGTHS];\n    \n\n    vec3 normal = normalize(vec3(dp,10.0));\n    vec3 nggx = normalize(vec3(dp,0.1));\n    \n    \/*\n    mat3 camMat = calcLookAtMatrix( vec3(1.0*(uv-0.5),1), vec3(1,0,-1), 0.0 );\n    vec3 rd = camMat*vec3(0,0,1);*\/\n    \n    #define TIME (0.05*(15.0*sin(iTime\/30.0)+60.0))\n    \/\/#define TIME 16.2+sin(0.05*51.2)\n    vec2 lookat = vec2(sin(TIME*1.1), cos(TIME));\n    mat3 camMat = calcLookAtMatrix( vec3(0,0,0), vec3(lookat,-1), PI );\n    vec3 rd = camMat*vec3(uv-0.5,1.0);\n    \n    float spec = 1.0*ggx(nggx, normalize(rd), vec3(0,1,8), 0.02, 1.0);\n\n    float filmThickness = 0.1+.2*textureLod(iChannel1, uv, 0.).z;\n\n    vec3 att0 = attenuation(filmThickness, wavelengths0, normal, rd);\n    vec3 att1 = attenuation(filmThickness, wavelengths1, normal, rd);\n\n    vec3 rrd = reflect(rd, normal);\n    vec3 f0 = (1.0 - FRESNEL_RATIO) + FRESNEL_RATIO * fresnel(rd, normal, 1.0 \/ iors0);\n    vec3 f1 = (1.0 - FRESNEL_RATIO) + FRESNEL_RATIO * fresnel(rd, normal, 1.0 \/ iors1);\n\n    \/\/vec3 rrd = reflect(rd, normal);\n\n    vec3 cube0 = REFLECTANCE_GAMMA_SCALE * att0 * filmic_gamma_inverse(sampleCubeMap(wavelengths0, rrd));\n    vec3 cube1 = REFLECTANCE_GAMMA_SCALE * att1 * filmic_gamma_inverse(sampleCubeMap(wavelengths1, rrd));\n\n    vec3 refl0 = REFLECTANCE_SCALE * mix(vec3(0), cube0, f0);\n    vec3 refl1 = REFLECTANCE_SCALE * mix(vec3(0), cube1, f1);\n\n    rds[0] = refract(rd, normal, iors0.x);\n    rds[1] = refract(rd, normal, iors0.y);\n    rds[2] = refract(rd, normal, iors0.z);\n    rds[3] = refract(rd, normal, iors1.x);\n    rds[4] = refract(rd, normal, iors1.y);\n    rds[5] = refract(rd, normal, iors1.z);\n\n    col += resampleColor(rds, refl0, refl1, wavelengths0, wavelengths1);\n        \n    \/\/c = vec4( contrast(col)+spec*col, 1.0 );\n    \/\/c = vec4(contrast(0.6*filmic_gamma(spec*col)),1);\n    \/\/c = vec4(contrast(filmic_gamma(col\/1.0)),4);\n    c = vec4(contrast(filmic_gamma(col\/2.0)),1);\n    \/\/c += 0.25*spec;\n}\n#endif","name":"Image","description":"","type":"image"},{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"void mainImage( out vec4 c, in vec2 p )\n{\n    initialize(p, iFrame, iResolution);\n    if (iFrame <= 1) {\n        c = vec4(0,0,INIT_MASS,0);\n    } else {\n        if (FRAME_MOD(0)) {\n            Fluid(c, uv*R, iChannel0, iChannel1, iMouse);\n        } else {\n            c = texelFetch(iChannel0, ivec2(p), 0);\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265\n#define TWO_PI 6.28318530718\n\n#define TURBULENCE_SCALE 0.1\n#define VORTICITY_SCALE 0.005\n#define VISCOSITY_SCALE 0.01\n#define MAX_CONSERVATIVE_DISTANCE 4.0\n\n#define MULTISCALE_KERNEL_POWER 3.0\n#define MULTISCALE_KERNEL_STEPS 1\n\n#define ENABLE_BOUNDS\n#define USE_TANH\n#define ENABLE_AUTO_MOUSE\n\n\/\/#define VIRTUAL_PARTICLE_SIZE mix(0.4, 0.01, smoothstep(0., 3., mass * length(v)))\n#define VIRTUAL_PARTICLE_SIZE mix(1.0, 0.15, smoothstep(0., 3., length(v)))\n\/\/#define VIRTUAL_PARTICLE_SIZE 0.15\n\n#define INIT_MASS 0.01\n#define FRAME_DIVIDER 1\n#define FRAME_MOD(x) ((iFrame % FRAME_DIVIDER)==0)\n\n\n\n\nvec2 R;\nint F;\nvec2 uv;\nvec2 texel;\n\nvec4 bounds;\n\n\/\/internal RNG state \nuvec4 s0; \n\nvoid initialize(inout vec2 p, int frame, vec3 res)\n{\n    uv = p \/ res.xy;\n    p = floor(p);\n    R = res.xy;\n    texel = 1.0\/R;\n    F = frame;\n    \n    bounds = vec4(2.0*texel,1.-2.0*texel);\n\n    \/\/white noise seed\n    s0 = uvec4(p, uint(frame), uint(p.x) + uint(p.y));\n}\n\n\/\/ https:\/\/www.pcg-random.org\/\nuvec4 pcg4d(inout uvec4 v)\n{\n\tv = v * 1664525u + 1013904223u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v = v ^ (v>>16u);\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    return v;\n}\n\nfloat rand(){ return float(pcg4d(s0).x)\/float(0xffffffffu); }\nvec2 rand2(){ return vec2(pcg4d(s0).xy)\/float(0xffffffffu); }\nvec3 rand3(){ return vec3(pcg4d(s0).xyz)\/float(0xffffffffu); }\nvec4 rand4(){ return vec4(pcg4d(s0))\/float(0xffffffffu); }\n\n\n#define _PH_COMP xy\n\nvec2 normz(vec2 x) {\n\treturn length(x) < 1e-6 ? vec2(0) : normalize(x);\n}\n\nvec4 normz(vec4 x) {\n\treturn length(x) < 1e-6 ? vec4(0) : normalize(x);\n}\n\n#define pack2x16(d) uintBitsToFloat(packHalf2x16(d))\n#define unpack2x16(d) unpackHalf2x16(floatBitsToUint(d))\n\nbool reset(sampler2D ch) {\n    return texture(ch, vec2(32.5\/256.0, 0.5) ).x > 0.5;\n}\n\n\nfloat G1V(float dnv, float k){\n    return 1.0\/(dnv*(1.0-k)+k);\n}\n\nfloat ggx(vec3 n, vec3 v, vec3 l, float rough, float f0){\n    float alpha = rough*rough;\n    vec3 h = normalize(v+l);\n    float dnl = clamp(dot(n,l), 0.0, 1.0);\n    float dnv = clamp(dot(n,v), 0.0, 1.0);\n    float dnh = clamp(dot(n,h), 0.0, 1.0);\n    float dlh = clamp(dot(l,h), 0.0, 1.0);\n    float f, d, vis;\n    float asqr = alpha*alpha;\n    const float pi = 3.14159;\n    float den = dnh*dnh*(asqr-1.0)+1.0;\n    d = asqr\/(pi * den * den);\n    dlh = pow(1.0-dlh, 5.0);\n    f = f0 + (1.0-f0)*dlh;\n    float k = alpha\/1.0;\n    vis = G1V(dnl, k)*G1V(dnv, k);\n    float spec = dnl * d * f * vis;\n    return spec;\n}\n\n\n\nstruct Vec4Neighborhood {\n    vec4 c; vec4 n; vec4 e; vec4 w; vec4 s; vec4 ne; vec4 nw; vec4 sw; vec4 se;\n};\n\nvec4 GetCenter(Vec4Neighborhood n) {\n    return n.c;\n}\n\nstruct Vec4Kernel {\n    vec4 c; vec4 n; vec4 e; vec4 w; vec4 s; vec4 ne; vec4 nw; vec4 sw; vec4 se;\n};\n\nvec4 ApplyVec4KernelVector(Vec4Neighborhood n, Vec4Kernel k) {\n    return n.c*k.c + n.n*k.n + n.e*k.e + n.w*k.w + n.s*k.s + n.ne*k.ne + n.nw*k.nw + n.sw*k.sw + n.se*k.se;\n}\n\nfloat ApplyVec4KernelScalar(Vec4Neighborhood n, Vec4Kernel k) {\n    return dot(n.c,k.c) + dot(n.n,k.n) + dot(n.e,k.e) + dot(n.w,k.w) + dot(n.s,k.s) \n         + dot(n.ne,k.ne) + dot(n.nw,k.nw) + dot(n.sw,k.sw) + dot(n.se,k.se);\n}\n\nvec4 ApplyVec4KernelPermutationVector(Vec4Neighborhood n, Vec4Kernel k, int v) {\n    return n.c[v]*k.c + n.n[v]*k.n + n.e[v]*k.e + n.w[v]*k.w + n.s[v]*k.s \n         + n.ne[v]*k.ne + n.nw[v]*k.nw + n.sw[v]*k.sw + n.se[v]*k.se;\n}\n\nvec4 ApplyVec4KernelPermutationVectorAbs(Vec4Neighborhood n, Vec4Kernel k, int v) {\n    return abs(n.c[v])*k.c + abs(n.n[v])*k.n + abs(n.e[v])*k.e + abs(n.w[v])*k.w + abs(n.s[v])*k.s \n         + abs(n.ne[v])*k.ne + abs(n.nw[v])*k.nw + abs(n.sw[v])*k.sw + abs(n.se[v])*k.se;\n}\n\nfloat ApplyVec4KernelPermutationScalar(Vec4Neighborhood n, Vec4Kernel k, int v) {\n    return dot(vec4(n.c[v]),k.c) + dot(vec4(n.n[v]),k.n) + dot(vec4(n.e[v]),k.e) \n         + dot(vec4(n.w[v]),k.w) + dot(vec4(n.s[v]),k.s) + dot(vec4(n.ne[v]),k.ne) \n         + dot(vec4(n.nw[v]),k.nw) + dot(vec4(n.sw[v]),k.sw) + dot(vec4(n.se[v]),k.se);\n}\n\n\nbool BoundsCheck(vec2 ouv) {\n    #ifdef ENABLE_BOUNDS\n        return (ouv.x < bounds.x || ouv.y < bounds.y || ouv.x > bounds.z || ouv.y > bounds.w);\n    #else\n        return false;\n    #endif\n}\n\nvec2 BoundsClamp(vec2 ouv) {\n    return clamp(ouv, bounds.xy, bounds.zw);\n}\n\nvec4 BoundedTex(sampler2D ch, vec2 p) {\n    if (BoundsCheck(p)) {\n        return vec4(0,0,0,0);\n    } else {\n        return textureLod(ch, p, 0.);\n    }\n}\n\nvec4 BoundedTex(sampler2D ch, vec2 off, int x, int y) {\n    vec2 ouv = uv + texel * (off + vec2(x,y));\n    return BoundedTex(ch, ouv);\n}\n\nvec4 BoundedTex(sampler2D ch, vec2 off, float x, float y) {\n    vec2 ouv = uv + texel * (off + vec2(x,y));\n    return BoundedTex(ch, ouv);\n}\n\n#define U(name,x,y) vec3 name = BoundedTex(ch, vec2(0), x, y)\n#define S(name,x,y) name = BoundedTex(ch, vec2(0), x, y)\n#define COM(name,x,y) name = BoundedTex(ch_com, vec2(0), x, y).zw\n#define SO(name,x,y) name = BoundedTex(ch, off, float(x), float(y))\n#define SR(name,x,y) name = BoundedTex(ch, off - RK4(ch, uv + texel*(off+vec2(x,y)), 1.0).xy, float(x), float(y))\n#define K(name,x,y,z,w) name = vec4(x,y,z,w)\n#define KV(name,x) name = vec4(x)\n\nvec2 RK4(sampler2D ch, vec2 p, float h){\n    vec2 k1 = BoundedTex(ch,p).xy;\n    vec2 k2 = BoundedTex(ch,p - texel*0.5*h*k1).xy;\n    vec2 k3 = BoundedTex(ch,p - texel*0.5*h*k2).xy;\n    vec2 k4 = BoundedTex(ch,p - texel*h*k3).xy;\n    return h\/3.*(0.5*k1+k2+k3+0.5*k4);\n}\n\nvec2 RK4(sampler2D ch, float h){\n    return RK4(ch, uv, h);\n}\n\nVec4Neighborhood GetVec4Neighborhood(sampler2D ch) {\n    Vec4Neighborhood n;\n    S(n.c,0,0); S(n.n,0,1); S(n.e,1,0); S(n.s,0,-1); S(n.w,-1,0);\n    S(n.nw,-1,1); S(n.sw,-1,-1); S(n.ne,1,1); S(n.se,1,-1);\n    return n;\n}\n\nVec4Neighborhood GetVec4Neighborhood(sampler2D ch, vec2 off) {\n    Vec4Neighborhood n;\n    SO(n.c,0,0); SO(n.n,0,1); SO(n.e,1,0); SO(n.s,0,-1); SO(n.w,-1,0);\n    SO(n.nw,-1,1); SO(n.sw,-1,-1); SO(n.ne,1,1); SO(n.se,1,-1);\n    return n;\n}\n\nVec4Neighborhood GetVec4NeighborhoodRK4(sampler2D ch) {\n    Vec4Neighborhood n;\n    vec2 off = vec2(0);\n    SR(n.c,0,0); SR(n.n,0,1); SR(n.e,1,0); SR(n.s,0,-1); SR(n.w,-1,0);\n    SR(n.nw,-1,1); SR(n.sw,-1,-1); SR(n.ne,1,1); SR(n.se,1,-1);\n    return n;\n}\n\nVec4Neighborhood GetStridedVec4Neighborhood(sampler2D ch, float stride) {\n    Vec4Neighborhood n;\n    vec2 off = vec2(0);\n    float s = stride;\n    SO(n.c,0,0); SO(n.n,0,s); SO(n.e,s,0); SO(n.s,0,-s); SO(n.w,-s,0);\n    SO(n.nw,-s,1); SO(n.sw,-s,-s); SO(n.ne,s,s); SO(n.se,s,-s);\n    return n;\n}\n\nVec4Neighborhood GetStridedVec4NeighborhoodRK4(sampler2D ch, float stride) {\n    Vec4Neighborhood n;\n    vec2 off = vec2(0);\n    float s = stride;\n    SR(n.c,0,0); SR(n.n,0,s); SR(n.e,s,0); SR(n.s,0,-s); SR(n.w,-s,0);\n    SR(n.nw,-s,1); SR(n.sw,-s,-s); SR(n.ne,s,s); SR(n.se,s,-s);\n    return n;\n}\n\n\nVec4Neighborhood GetVec4NeighborhoodRK4(sampler2D ch, vec2 off) {\n    Vec4Neighborhood n;\n    SR(n.c,0,0); SR(n.n,0,1); SR(n.e,1,0); SR(n.s,0,-1); SR(n.w,-1,0);\n    SR(n.nw,-1,1); SR(n.sw,-1,-1); SR(n.ne,1,1); SR(n.se,1,-1);\n    return n;\n}\n\nVec4Kernel Vec4NeighborhoodToVec4KernelTransform(Vec4Neighborhood n, Vec4Kernel k) {\n    Vec4Kernel k2;\n    KV(k2.nw,n.nw*k.nw); KV(k2.n,n.n*k.n); KV(k2.ne,n.ne*k.ne);\n    KV(k2.w,n.w*k.w); KV(k2.c,n.c*k.c); KV(k2.e,n.e*k.e);\n    KV(k2.sw,n.sw*k.sw); KV(k2.s,n.s*k.s); KV(k2.se,n.se*k.se);\n    return k2;\n}\n\nVec4Kernel GetCurlKernel() {\n    const float D = 0.5;\n    Vec4Kernel k;\n    K(k.c, 0, 0, 0, 0);\n    K(k.n, 1, 0, 0, 0);\n    K(k.s,-1, 0, 0, 0);\n    K(k.e, 0,-1, 0, 0);\n    K(k.w, 0, 1, 0, 0);\n    K(k.nw, D, D, 0, 0);\n    K(k.ne, D,-D, 0, 0);\n    K(k.sw,-D, D, 0, 0);\n    K(k.se,-D,-D, 0, 0);\n    return k;\n}\n\n\nVec4Kernel GetDivKernel() {\n    const float D = 0.5;\n    Vec4Kernel k;\n    K(k.c, 0, 0, 0, 0);\n    K(k.n, 0,-1, 0, 0);\n    K(k.s, 0, 1, 0, 0);\n    K(k.e,-1, 0, 0, 0);\n    K(k.w, 1, 0, 0, 0);\n    K(k.nw, D,-D, 0, 0);\n    K(k.ne,-D,-D, 0, 0);\n    K(k.sw, D, D, 0, 0);\n    K(k.se,-D, D, 0, 0);\n    return k;\n}\n\nvec2 Turbulence(Vec4Neighborhood n) {\n    return  - 4.0 * n.c.xy \n            + 2.0 * vec2(n.n.x + n.s.x, n.e.y + n.w.y)\n            + (n.se - n.ne - n.sw + n.nw).yx;\n}\n\n\nVec4Kernel GetScalarKernel(float center, float edge, float vertex) {\n    Vec4Kernel k;\n    KV(k.c, center);\n    KV(k.n, edge);\n    KV(k.s, edge);\n    KV(k.e, edge);\n    KV(k.w, edge);\n    KV(k.nw, vertex);\n    KV(k.ne, vertex);\n    KV(k.sw, vertex);\n    KV(k.se, vertex);\n    return k;\n}\n\nVec4Kernel GetGaussianKernel() {\n    const float G0 = 0.25;\n    const float G1 = 0.125;\n    const float G2 = 0.0625;\n    return GetScalarKernel(G0, G1, G2);\n}\n\nVec4Kernel GetNeighborAvgKernel() {\n    const float G0 = 0.0;\n    const float G1 = 1.0\/6.0;\n    const float G2 = 1.0\/12.0;\n    return GetScalarKernel(G0, G1, G2);\n}\n\nVec4Kernel GetNeighborAvgVonNeumannKernel() {\n    const float G0 = 0.0;\n    const float G1 = 0.25;\n    const float G2 = 0.0;\n    return GetScalarKernel(G0, G1, G2);\n}\n\nVec4Kernel GetLaplacianKernel() {\n    const float L0 = -20.0\/6.0;\n    const float L1 = 4.0\/6.0;\n    const float L2 = 1.0\/6.0;\n    return GetScalarKernel(L0, L1, L2);\n}\n\nvec4 Advect(sampler2D ch, float timestep) {\n    return textureLod(ch,fract(uv - texel*RK4(ch,timestep)), 0.);\n}\n\nvec2 Rotate(vec2 v, float r) {\n    float s = sin(r);\n    float c = cos(r);\n    return mat2(c, -s, s, c) * v;\n}\n\nvec2 SoftBound(vec2 x, float p) {\n    vec2 soft = normz(x) * pow(dot(x,x),1.5);\n    return x - p * soft;\n}\n\nfloat SoftBound(float x, float p) {\n    float soft = sign(x) * pow(abs(x),3.0);\n    return x - p * soft;\n}\n\nvec2 SoftBound(vec2 x, float s, float p) {\n    vec2 soft = normz(x) * pow(dot(s*x,s*x),1.5);\n    return x - p * soft;\n}\n\nfloat SoftBound(float x, float s, float p) {\n    float soft = sign(x) * pow(abs(s*x),3.0);\n    return x - p * soft;\n}\n\nvec2 HardBound(vec2 x, float p) {\n    return max(min((length(x) \/ p) > 1.0 ? (p * normz(x)) : x, p), -p);\n}\n\nfloat HardBound(float x, float p) {\n    return max(min(x, p), -p);\n}\n\nvec2 Vorticity(Vec4Neighborhood n, float curl) {\n    return  -curl * normz(ApplyVec4KernelPermutationVectorAbs(n, GetCurlKernel(), 3).xy);\n}\n\nvec2 Delta(Vec4Neighborhood n, int channel) {\n    return ApplyVec4KernelPermutationVector(n, GetDivKernel(), channel).xy;\n}\n\nvec4 getAutoMouse() {\n    int stage = (F\/120)%4;\n    vec4 auto = vec4(0);\n    switch(stage) {\n        case 0:\n            auto = vec4(0.2, 0.5, 1.0, 0.0); break;\n        case 1:\n            auto = vec4(0.5, 0.2, 0.0, 1.0); break;\n        case 2:\n            auto = vec4(0.8, 0.5, -1.0, 0.0); break;\n        case 3:\n            auto = vec4(0.5, 0.8, 0.0, -1.0); break;\n    }\n    return auto * vec4(R,1,1);\n}\n\nvec4 MouseSpace(vec4 mouse, vec4 phase, vec2 p, float width, float strength) {\n    if (mouse.z > 0.) {\n        phase.xy += strength * exp(-length(p-mouse.xy) \/ width) * normz(mouse.xy-abs(mouse.zw));\n    } else {\n        #ifdef ENABLE_AUTO_MOUSE\n            vec4 auto = getAutoMouse();\n            phase.xy += strength * exp(-length(p-auto.xy) \/ width) * auto.zw;\n        #endif\n    }\n    return phase;\n}\n\nvec4 MouseMass(vec4 mouse, vec4 phase, vec2 p, float width, float strength) {\n    if (mouse.z > 0.) {\n        phase.z += strength * exp(-length(p-mouse.xy) \/ width);\n    } else {\n        #ifdef ENABLE_AUTO_MOUSE\n            vec4 auto = getAutoMouse();\n            phase.z += strength * exp(-length(p-auto.xy) \/ width);\n        #endif\n    }\n    return phase;\n}\n\n#undef T\n#undef V\n\n\nfloat erf(float x) {\n    #ifdef USE_TANH\n        return tanh(1.22848*x);\n    #elif USE_SMOOTHSTEP\n        return -1.+2.*smoothstep(-1.657,1.657,sign(x)*pow(abs(x),0.85715));\n    #else\n    if (x > 9.0) {\n        return 1.0;\n    } else if (x < -9.0) {\n        return -1.0;\n    } else if (abs(x) < 1e-9) {\n        return x;\n    }\n    const float p = 0.3275911;\n    const float a1 = 0.254829592;\n    const float a2 = -0.284496736;\n    const float a3 = 1.421413741;\n    const float a4 = -1.453152027;\n    const float a5 = 1.061405429;\n    float sx = sign(x);\n    x *= sx;\n    float t = 1.0 \/ (1.0 + p * x);\n    return clamp(sx * (1.0 - (a1*t + a2*t*t + a3*t*t*t + a4*t*t*t*t + a5*t*t*t*t*t) * exp(-x*x)),-1.0,1.0);\n    #endif\n}\n\n\nfloat safeexp(float x) {\n    return exp(clamp(x, -87.0, 87.0));\n}\n\n\/\/https:\/\/www.wolframalpha.com\/input\/?i=%28%28sqrt%28k%29+e%5E%28-%28a%5E2+%2B+b%5E2%29%2Fk%29+%28e%5E%28a%5E2%2Fk%29+-+e%5E%28b%5E2%2Fk%29%29+%28erf%28c%2Fsqrt%28k%29%29+-+erf%28d%2Fsqrt%28k%29%29%29%29%2F%284+sqrt%28%CF%80%29%29%29++%2F+%281%2F4+%28erf%28a%2Fsqrt%28k%29%29+-+erf%28b%2Fsqrt%28k%29%29%29+%28erf%28c%2Fsqrt%28k%29%29+-+erf%28d%2Fsqrt%28k%29%29%29%29\nfloat center_of_mass(vec2 b, float K) {\n    float sqK = sqrt(K);\n    float sqP = sqrt(PI);\n    float erax = erf(b.x\/sqK);\n    float erbx = erf(b.y\/sqK);\n    float exabx = safeexp((b.x*b.x + b.y*b.y)\/K);\n    float exax = safeexp(-(b.x*b.x)\/K);\n    float exbx = safeexp(-(b.y*b.y)\/K);\n    \n    \/\/return clamp((sqK * (exax - exbx)) \/ (sqP * (erbx - erax)),-4.0,4.0);\n    return HardBound((sqK * (exax - exbx)) \/ (sqP * (erbx - erax)),16.0);\n}\n\nvec3 distribution(vec2 x, vec2 p, float K)\n{\n    vec2 omin = p - 0.5;\n    vec2 omax = p + 0.5; \n    \n    float sqK = sqrt(K);\n    float sqP = sqrt(PI);\n    \n    \/\/https:\/\/www.wolframalpha.com\/input\/?i=integral+of+%28integral+of+exp%28-%28x%5E2%2By%5E2%29%2Fk%29+with+respect+to+x+from+a+to+b%29+with+respect+to+y+from+c+to+d\n    float masst = 0.25 *\n                    ((erf((omin.x - x.x)\/sqK) - erf((omax.x - x.x)\/sqK)) * \n                    (erf((omin.y - x.y)\/sqK) - erf((omax.y - x.y)\/sqK)));\n    \n    vec2 com2 = x-p+vec2(center_of_mass(vec2(omin.x - x.x,omax.x - x.x), K), center_of_mass(vec2(omin.y - x.y,omax.y - x.y), K));\n    return vec3(com2, masst);\n}\n\n#define range(i, r) for(int i = -r; i < r; i++)\n\n\n\n\nvec2 com(vec2 p, sampler2D ch, sampler2D ch_com) {\n    float mass_t = 0.0;\n    vec2 com_t = vec2(0);\n    range(i, 5) {\n        range(j, 5) {\n            vec2 off = vec2(0);\n            S(vec4 u,i,j);\n            COM(vec2 com_p,i,j);\n            float mass = u.z;\n            float curl = u.w;\n            vec2 v = u.xy;\n            vec2 p0 = com_p + vec2(i,j) + v;\n            vec3 d = distribution(p0, vec2(0), VIRTUAL_PARTICLE_SIZE);\n            float mass_p = mass * d.z;\n            mass_t += mass_p;\n            com_t += mass_p * d.xy;\n        }\n    }\n    if (mass_t != 0.0) {\n        com_t \/= mass_t;\n    }\n    return vec2(com_t);\n}\n\nvec4 ForwardAdvection(vec2 p, sampler2D ch, sampler2D ch_com) {\n    float mass_t = 0.0;\n    vec2 vel_t = vec2(0);\n    float curl_t = 0.0;\n    range(i, 5) {\n        range(j, 5) {\n            vec2 off = vec2(0);\n            S(vec4 u,i,j);\n            COM(vec2 com_p,i,j);\n            float mass = u.z;\n            float curl = u.w;\n            vec2 v = u.xy;\n            vec2 p0 = com_p + vec2(i,j) + v;\n            vec3 d = distribution(p0, vec2(0), VIRTUAL_PARTICLE_SIZE);\n            float mass_p = mass * d.z;\n            mass_t += mass_p;\n            vel_t += v * mass_p;\n            curl_t += curl * mass_p;\n        }\n    }\n    if (mass_t != 0.0) {\n        vel_t \/= mass_t;\n        curl_t \/= mass_t;\n    }\n    return vec4(vel_t, mass_t, curl_t);\n}\n\n\nvec2 MultiscaleTurbulence(sampler2D ch) {\n    vec2 turbulence = vec2(0);\n    for (int i = 1; i <= MULTISCALE_KERNEL_STEPS; i++) {\n        float stride = float(i);\n        Vec4Neighborhood n = GetStridedVec4NeighborhoodRK4(ch, stride);\n        vec4 U = GetCenter(n);\n        float M = length(U.xy);\n        turbulence += M*(1.0\/pow(stride,MULTISCALE_KERNEL_POWER))*Turbulence(n);  \n    }\n    return turbulence;\n}\n\nvec2 MultiscaleVorticity(sampler2D ch) {\n    vec2 vorticity = vec2(0);\n    for (int i = 1; i <= MULTISCALE_KERNEL_STEPS; i++) {\n        float stride = float(i);\n        Vec4Neighborhood n = GetStridedVec4NeighborhoodRK4(ch, stride);\n        vec4 U = GetCenter(n);\n        float M = length(U.xy);\n        float curl = ApplyVec4KernelScalar(n, GetCurlKernel());\n        vorticity += M*(1.0\/pow(stride,MULTISCALE_KERNEL_POWER))*Vorticity(n, curl);\n    }\n    return vorticity;\n}\n\nvec4 MultiscaleViscosity(sampler2D ch) {\n    vec4 viscosity = vec4(0);\n    for (int i = 1; i <= MULTISCALE_KERNEL_STEPS; i++) {\n        float stride = float(i);\n        Vec4Neighborhood n = GetStridedVec4NeighborhoodRK4(ch, stride);\n        vec4 U = GetCenter(n);\n        vec4 laplacian = ApplyVec4KernelVector(n, GetLaplacianKernel());\n        viscosity += (1.0\/pow(stride,MULTISCALE_KERNEL_POWER))*laplacian;\n    }\n    return viscosity;\n}\n\nvoid MultiscaleKernels(sampler2D ch, out vec2 turbulence, out vec2 vorticity, out vec2 viscosity) {\n    turbulence = vec2(0);\n    vorticity = vec2(0);\n    viscosity = vec2(0);\n    for (int i = 1; i <= MULTISCALE_KERNEL_STEPS; i++) {\n        float stride = float(i);\n        Vec4Neighborhood n = GetStridedVec4NeighborhoodRK4(ch, stride);\n        vec4 U = GetCenter(n);\n        float M = length(U.xy);\n        float curl = ApplyVec4KernelScalar(n, GetCurlKernel());\n        vec4 laplacian = ApplyVec4KernelVector(n, GetLaplacianKernel());\n        float W = (1.0\/pow(stride,MULTISCALE_KERNEL_POWER));\n        viscosity += W*laplacian.xy;\n        turbulence += M*W*Turbulence(n);  \n        vorticity += M*W*Vorticity(n, curl);\n    }\n}\n\n\nvoid Fluid( out vec4 U, in vec2 p, sampler2D ch, sampler2D ch_com, vec4 mouse )\n{\n    vec2 turbulence, viscosity, vorticity;\n    MultiscaleKernels(ch, turbulence, vorticity, viscosity);\n\n    Vec4Neighborhood neighborhood = GetVec4NeighborhoodRK4(ch, TURBULENCE_SCALE * turbulence);\n\n    vec4 dist = ForwardAdvection(p, ch, ch_com);\n    U = GetCenter(neighborhood);\n    \/\/U = mix(dist,U,smoothstep(0.0,MAX_CONSERVATIVE_DISTANCE,length(U.xy)));\n    U = mix(dist,U,smoothstep(MAX_CONSERVATIVE_DISTANCE - 1.0,MAX_CONSERVATIVE_DISTANCE,length(U.xy)));\n    \n    \/\/float lU = length(U.xy);\n\n    \/\/ Laplacian\/Viscosity\n    U.xy += VISCOSITY_SCALE*viscosity;\n\n    \/\/ Curl\/Vorticity\n    U.w = ApplyVec4KernelScalar(neighborhood, GetCurlKernel());\n    U.xy += VORTICITY_SCALE*vorticity; \n    \n    \/\/U.xy = lU*normz(U.xy);\n\n    \/\/ Add mass with the mouse\n    U = MouseMass(mouse, U, p, 10.0, 0.2);\n    \n    \/\/ Mouse interaction in phase domain\/space domain\n    U = MouseSpace(mouse, U, p, 20.0, 0.3);\n\n    U.xy = SoftBound(U.xy, 1.0, 0.00001);\n    U.xy = HardBound(U.xy, 16.0);\n    U.z = max(0.0, SoftBound(U.z, 0.00001));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"bool reset() {\n    return iFrame <= 1 || texture(iChannel3, vec2(32.5\/256.0, 0.5) ).x > 0.5;\n}\n\nvec4 Po(int m, int n) {\n    vec2 ouv = uv + texel * vec2(m,n);\n    if (BoundsCheck(ouv)) {\n        return vec4(pack2x16(vec2(0)),pack2x16(vec2(0)),pack2x16(vec2(0)),0);\n    } else {\n        return textureLod(iChannel0, ouv, 0.0);\n    }\n}\n\nfloat Go(int m, int n) {\n    vec2 ouv = uv + texel * vec2(m,n);\n    if (BoundsCheck(ouv)) {\n        return 0.0;\n    } else {\n        return textureLod(iChannel1, ouv, 0.0).x;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    initialize(fragCoord, iFrame, iResolution);\n    \n    vec3 p_y[151] = vec3[](vec3(-0.00039936512386562484,-0.0013037830496811509,-0.003024369266497462),vec3(-0.00043479272952107184,-0.001418247837094988,-0.0032841431420175815),vec3(-0.00047311175208775147,-0.0015418984185112672,-0.0035640171624620187),vec3(-0.0005145378703601011,-0.0016753999013442086,-0.003865351345832546),vec3(-0.0005593015430286112,-0.00181946044562425,-0.004189581775882141),vec3(-0.0006076489826017296,-0.001974833797626846,-0.004538223620654535),vec3(-0.0006598431999115183,-0.002142321974855929,-0.004912874168389093),vec3(-0.0007161651258619417,-0.0023227781140663494,-0.005315215867981123),vec3(-0.0007769148178819725,-0.0025171094952469407,-0.00574701935895483),vec3(-0.0008424127594587307,-0.002726280755872174,-0.0062101464732849465),vec3(-0.0009130012621639432,-0.002951317311279131,-0.006706553188329675),vec3(-0.0009890459807688295,-0.003193308998756704,-0.007238292506523368),vec3(-0.0010709375533892544,-0.0034534139648667857,-0.007807517233220254),vec3(-0.001159093380140449,-0.003732862817675909,-0.008416482619054973),vec3(-0.0012539595555377625,-0.004032963067987648,-0.009067548827244675),vec3(-0.0013560129718921017,-0.004355103886359663,-0.009763183179221676),vec3(-0.0014657636132559054,-0.004700761205697934,-0.010505962123640127),vec3(-0.0015837570621268875,-0.0050715032025820585,-0.011298572863887848),vec3(-0.001710577244168271,-0.005468996194229675,-0.01214381456744096),vec3(-0.0018468494397243054,-0.005895010992201898,-0.01304459906634993),vec3(-0.0019932435949786592,-0.006351429758636426,-0.014003950941382284),vec3(-0.0021504779703164487,-0.006840253416027218,-0.015025006862317022),vec3(-0.0023193231689242525,-0.007363609667412167,-0.016111014032915174),vec3(-0.002500606595033479,-0.007923761690353888,-0.017265327560358507),vec3(-0.002695217398648073,-0.008523117575376556,-0.018491406534454295),vec3(-0.002904111972299025,-0.009164240587639544,-0.019792808560418648),vec3(-0.0031283200755794476,-0.00984986033967067,-0.021173182439071275),vec3(-0.003368951675232755,-0.01058288497304438,-0.022636258627945997),vec3(-0.0036272046027564153,-0.01136641445806573,-0.02418583704385647),vec3(-0.0039043731482907218,-0.012203755132905171,-0.025825771679025524),vec3(-0.004201857729535902,-0.013098435617310009,-0.027559951395473018),vec3(-0.00452117579826187,-0.01405422425106731,-0.029392276131583135),vec3(-0.00486397417548751,-0.015075148223856253,-0.0313266275951637),vec3(-0.005232043040666073,-0.016165514581003473,-0.03336683332200887),vec3(-0.00562733184154224,-0.017329933308865297,-0.03551662273933928),vec3(-0.0060519674414129645,-0.018573342723915864,-0.037779573578614306),vec3(-0.006508274881439065,-0.01990103741075051,-0.040159046618245986),vec3(-0.006998801210110017,-0.021318698975493443,-0.0426581062860751),vec3(-0.007526342923405148,-0.022832429901508428,-0.04527942409155754),vec3(-0.008093977672062791,-0.024448790812264518,-0.048025161159515134),vec3(-0.008705101032420682,-0.026174841459272888,-0.05089682526368315),vec3(-0.009363469312043276,-0.028018185757524506,-0.05389509666073895),vec3(-0.010073249580677117,-0.029987021181332632,-0.05701961564096375),vec3(-0.01083907839404583,-0.03209019280176492,-0.06026872295763385),vec3(-0.011666131030046848,-0.03433725218081176,-0.0636391420650306),vec3(-0.012560203507485332,-0.03673852121908325,-0.06712558924087116),vec3(-0.013527810238371974,-0.03930516085637037,-0.07072029400179898),vec3(-0.014576300919535715,-0.04204924420785956,-0.07441240748450588),vec3(-0.015714001257992345,-0.04498383322316428,-0.07818727031588318),vec3(-0.016950383431117873,-0.04812305719009568,-0.08202550346745388),vec3(-0.018296273925712297,-0.051482190232598785,-0.08590187504816119),vec3(-0.01976410874874513,-0.05507772316147769,-0.0897838820674849),vec3(-0.02136824920173702,-0.05892742230067349,-0.09362996770370406),vec3(-0.02312537581916243,-0.06305036371943105,-0.09738726988920325),vec3(-0.025054984222680283,-0.06746692484105196,-0.10098876378585503),vec3(-0.02718001534382911,-0.07219870536957633,-0.10434961578501721),vec3(-0.02952766495752478,-0.07726833375162516,-0.10736250560624028),vec3(-0.03213043568796663,-0.08269909044537457,-0.10989158977713533),vec3(-0.03502752169832732,-0.08851423913888098,-0.11176466592987913),vec3(-0.03826665722222464,-0.09473589144745072,-0.11276294193733785),vec3(-0.041906623421512364,-0.10138312131867837,-0.11260760327593745),vec3(-0.04602070835716154,-0.10846885934496983,-0.11094209169468648),vec3(-0.050701578024441495,-0.1159947726771164,-0.10730865033138975),vec3(-0.05606828993205902,-0.12394275393722222,-0.10111727591157052),vec3(-0.06227665518595623,-0.13226056303078285,-0.09160486258770702),vec3(-0.06953501099043398,-0.14083708737623918,-0.077782417479591),vec3(-0.07812908130749861,-0.149458503599576,-0.058369977232929894),vec3(-0.08846282054472075,-0.15772775580732623,-0.031725854990398726),vec3(-0.10112895949827036,-0.1649097516191365,0.004199908847829801),vec3(-0.11703860203562352,-0.16961595360355963,0.05178318985988212),vec3(-0.13767855574664672,-0.16911182932471974,0.11316073490042394),vec3(-0.16567645398825667,-0.15763971441508162,0.18793345990415217),vec3(-0.2062192509611813,-0.12179330842214287,0.2642830614724927),vec3(-0.2713074094027817,-0.02537420724641723,0.28182569573805677),vec3(-0.395760620255607,0.2520387049261719,-0.04827629938430805),vec3(-0.4794057541719356,0.45941736433304614,-0.35998402950121244),vec3(-0.39576062025560704,0.25203870492617186,-0.04827629938430784),vec3(-0.27130740940278164,-0.02537420724641726,0.2818256957380568),vec3(-0.20621925096118135,-0.12179330842214289,0.2642830614724926),vec3(-0.16567645398825667,-0.15763971441508165,0.18793345990415228),vec3(-0.13767855574664675,-0.1691118293247198,0.1131607349004239),vec3(-0.11703860203562354,-0.1696159536035597,0.05178318985988209),vec3(-0.10112895949827036,-0.1649097516191365,0.004199908847829665),vec3(-0.0884628205447208,-0.1577277558073263,-0.03172585499039877),vec3(-0.07812908130749864,-0.14945850359957605,-0.05836997723292993),vec3(-0.06953501099043398,-0.14083708737623918,-0.07778241747959105),vec3(-0.06227665518595623,-0.13226056303078287,-0.09160486258770703),vec3(-0.05606828993205902,-0.12394275393722226,-0.10111727591157058),vec3(-0.050701578024441495,-0.11599477267711644,-0.10730865033138978),vec3(-0.04602070835716156,-0.10846885934496989,-0.1109420916946865),vec3(-0.04190662342151239,-0.10138312131867841,-0.11260760327593748),vec3(-0.03826665722222467,-0.09473589144745076,-0.11276294193733784),vec3(-0.03502752169832737,-0.08851423913888105,-0.1117646659298792),vec3(-0.032130435687966606,-0.0826990904453746,-0.10989158977713538),vec3(-0.029527664957524794,-0.0772683337516252,-0.10736250560624033),vec3(-0.027180015343829116,-0.07219870536957636,-0.1043496157850173),vec3(-0.025054984222680304,-0.06746692484105203,-0.10098876378585511),vec3(-0.023125375819162436,-0.06305036371943108,-0.09738726988920338),vec3(-0.02136824920173702,-0.058927422300673514,-0.09362996770370416),vec3(-0.019764108748745155,-0.05507772316147772,-0.08978388206748496),vec3(-0.01829627392571232,-0.05148219023259884,-0.08590187504816127),vec3(-0.01695038343111789,-0.04812305719009571,-0.08202550346745398),vec3(-0.015714001257992355,-0.0449838332231643,-0.07818727031588321),vec3(-0.014576300919535724,-0.04204924420785958,-0.07441240748450599),vec3(-0.013527810238371971,-0.039305160856370404,-0.07072029400179902),vec3(-0.012560203507485332,-0.036738521219083255,-0.06712558924087117),vec3(-0.011666131030046859,-0.03433725218081179,-0.0636391420650307),vec3(-0.01083907839404584,-0.03209019280176495,-0.06026872295763393),vec3(-0.010073249580677119,-0.029987021181332653,-0.05701961564096378),vec3(-0.009363469312043281,-0.02801818575752456,-0.05389509666073898),vec3(-0.008705101032420694,-0.026174841459272933,-0.0508968252636832),vec3(-0.008093977672062803,-0.024448790812264518,-0.04802516115951517),vec3(-0.007526342923405146,-0.02283242990150845,-0.04527942409155761),vec3(-0.006998801210110013,-0.021318698975493443,-0.04265810628607512),vec3(-0.006508274881439066,-0.01990103741075051,-0.040159046618246),vec3(-0.00605196744141298,-0.018573342723915892,-0.03777957357861436),vec3(-0.005627331841542247,-0.017329933308865328,-0.03551662273933936),vec3(-0.005232043040666078,-0.016165514581003487,-0.033366833322008904),vec3(-0.004863974175487524,-0.015075148223856267,-0.031326627595163734),vec3(-0.004521175798261876,-0.01405422425106733,-0.029392276131583166),vec3(-0.004201857729535902,-0.013098435617310021,-0.027559951395473042),vec3(-0.0039043731482907213,-0.012203755132905178,-0.025825771679025535),vec3(-0.003627204602756424,-0.01136641445806575,-0.024185837043856497),vec3(-0.003368951675232753,-0.010582884973044387,-0.022636258627946024),vec3(-0.0031283200755794494,-0.009849860339670675,-0.021173182439071295),vec3(-0.002904111972299031,-0.009164240587639563,-0.019792808560418675),vec3(-0.002695217398648074,-0.00852311757537658,-0.01849140653445433),vec3(-0.002500606595033485,-0.007923761690353899,-0.017265327560358527),vec3(-0.0023193231689242495,-0.007363609667412189,-0.016111014032915188),vec3(-0.002150477970316447,-0.006840253416027219,-0.01502500686231705),vec3(-0.001993243594978657,-0.006351429758636433,-0.014003950941382294),vec3(-0.0018468494397243095,-0.005895010992201904,-0.013044599066349954),vec3(-0.0017105772441682716,-0.005468996194229684,-0.012143814567440982),vec3(-0.0015837570621268916,-0.0050715032025820655,-0.011298572863887869),vec3(-0.0014657636132559086,-0.004700761205697936,-0.010505962123640147),vec3(-0.0013560129718921034,-0.004355103886359678,-0.009763183179221696),vec3(-0.0012539595555377642,-0.004032963067987664,-0.009067548827244698),vec3(-0.0011590933801404499,-0.003732862817675913,-0.00841648261905499),vec3(-0.0010709375533892564,-0.003453413964866797,-0.007807517233220275),vec3(-0.0009890459807688297,-0.0031933089987567142,-0.007238292506523384),vec3(-0.0009130012621639455,-0.002951317311279133,-0.006706553188329679),vec3(-0.0008424127594587336,-0.002726280755872182,-0.006210146473284956),vec3(-0.0007769148178819765,-0.002517109495246948,-0.005747019358954837),vec3(-0.0007161651258619422,-0.002322778114066351,-0.005315215867981134),vec3(-0.0006598431999115193,-0.0021423219748559342,-0.004912874168389099),vec3(-0.0006076489826017314,-0.0019748337976268505,-0.004538223620654547),vec3(-0.0005593015430286124,-0.001819460445624252,-0.004189581775882171),vec3(-0.0005145378703601023,-0.001675399901344218,-0.00386535134583253),vec3(-0.00047311175208774605,-0.001541898418511293,-0.003564017162461541),vec3(-0.0004347927295209686,-0.0014182478370946185,-0.003284143142016918),vec3(-0.0003993651238658139,-0.0013037830496811053,-0.003024369266498018));\n    vec3 p_x[151] = vec3[](vec3(-0.002137124133264062,-0.0045652949750816674,-0.007944999489624014),vec3(-0.002300156955533428,-0.004908806940460253,-0.008525633362203022),vec3(-0.0024740180160609526,-0.0052745508615946735,-0.009141755140060714),vec3(-0.0026593024187144994,-0.005663677685852353,-0.009794948578414675),vec3(-0.0028566298846672803,-0.006077377342767512,-0.010486819494099436),vec3(-0.0030666454073479945,-0.006516878738501725,-0.011218991293007716),vec3(-0.0032900199322388997,-0.0069834496606139915,-0.011993099926857181),vec3(-0.0035274510673012965,-0.007478396589859675,-0.012810788233390612),vec3(-0.0037796638307912127,-0.008003064415882877,-0.013673699609992897),vec3(-0.004047411444335345,-0.008558836053786144,-0.014583470965923965),vec3(-0.004331476180377802,-0.009147131958638085,-0.015541724892891462),vec3(-0.00463267027449884,-0.009769409534995865,-0.01655006098737826),vec3(-0.004951836914666999,-0.010427162438453347,-0.017610046250856503),vec3(-0.005289851321237063,-0.011121919766049194,-0.018723204485601174),vec3(-0.005647621933474761,-0.011855245132051603,-0.019891004594067244),vec3(-0.006026091720604429,-0.012628735625135244,-0.02111484767848965),vec3(-0.0064262396378738365,-0.013444020642236373,-0.02239605282424208),vec3(-0.006849082250952507,-0.014302760593353525,-0.02373584143523893),vec3(-0.007295675555175712,-0.015206645470184573,-0.025135319971921),vec3(-0.0077671170197740995,-0.01615739326966947,-0.026595460921701564),vec3(-0.008264547891358274,-0.01715674826113821,-0.02811708180766433),vec3(-0.008789155795641856,-0.0182064790827157,-0.02970082201319753),vec3(-0.009342177681784285,-0.019308376648754934,-0.031347117167421494),vec3(-0.00992490315993552,-0.02046425184516241,-0.03305617079787943),vec3(-0.010538678289711445,-0.021675932983309377,-0.03482792291202483),vec3(-0.011184909885595262,-0.022945262975493885,-0.036662015116369455),vec3(-0.011865070414853763,-0.024274096185269295,-0.03855775182034264),vec3(-0.01258070357473496,-0.025664294893927936,-0.040514056999271006),vec3(-0.013333430648782561,-0.02711772530945963,-0.042529425905391674),vec3(-0.01412495775744369,-0.028636253025678345,-0.04460187101503015),vec3(-0.014957084136223639,-0.030221737816030457,-0.04672886138108205),vec3(-0.01583171159602881,-0.031876027617728446,-0.04890725441919534),vec3(-0.016750855345744924,-0.03360095152585251,-0.051133218989284704),vec3(-0.01771665638740403,-0.03539831157208638,-0.0534021484360339),vec3(-0.018731395730599044,-0.03726987300644707,-0.055708562016558806),vec3(-0.019797510716488533,-0.0392173527296855,-0.05804599286274144),vec3(-0.020917613794531456,-0.04124240543505191,-0.06040686029055546),vec3(-0.02209451415920214,-0.043346606905710634,-0.06278232386756345),vec3(-0.023331242732158364,-0.045531433771570005,-0.06516211616871623),vec3(-0.024631081071251157,-0.04779823884785927,-0.06753435057251908),vec3(-0.02599759490599191,-0.05014822094579368,-0.06988529975365311),vec3(-0.02743467314560627,-0.05258238774762672,-0.07219913968862342),vec3(-0.028946573388404322,-0.05510150995351754,-0.07445765297670581),vec3(-0.03053797519013025,-0.05770606440794075,-0.07663988405127538),vec3(-0.03221404263776634,-0.0603961632607468,-0.07872173737035694),vec3(-0.033980498142029227,-0.06317146536031418,-0.08067550787447306),vec3(-0.035843709830794705,-0.06603106494154067,-0.08246933081865009),vec3(-0.03781079552984435,-0.0689733511594637,-0.08406653544718634),vec3(-0.03988974710170204,-0.07199582998922682,-0.08542488379813157),vec3(-0.042089579940160424,-0.07509489726503166,-0.08649567210767374),vec3(-0.044420513774308154,-0.0782655478780229,-0.0872226677458533),vec3(-0.046894192744119025,-0.0815010009801992,-0.08754084929384119),vec3(-0.04952395514522684,-0.08479221383871625,-0.08737491127852688),vec3(-0.052325166556904924,-0.08812724684632407,-0.0866374883735367),vec3(-0.05531563463635159,-0.09149042775415551,-0.08522704702612285),vec3(-0.05851613023760088,-0.09486124236558141,-0.0830253865465934),vec3(-0.06195104853165206,-0.09821284847174405,-0.0798946889222969),vec3(-0.06564925675340012,-0.10151006459451122,-0.07567406140614437),vec3(-0.06964519409927278,-0.1047066168725813,-0.07017553687965904),vec3(-0.07398031737724835,-0.10774132259935602,-0.06317955075217202),vec3(-0.0787050285543731,-0.11053272464789683,-0.054430032064937746),vec3(-0.08388128622421473,-0.11297142788834234,-0.0436294939520135),vec3(-0.08958620751898465,-0.1149089568361548,-0.03043501110604133),vec3(-0.09591713730219445,-0.11614122538666281,-0.014456986894158296),vec3(-0.10299894760598283,-0.11638344275691273,0.004735321117216877),vec3(-0.11099482783905858,-0.11523099884933204,0.027593267367261202),vec3(-0.12012272629777299,-0.1120965987947297,0.054535916053032214),vec3(-0.13068130718798532,-0.10610553463683693,0.08582732348023998),vec3(-0.1430926878027598,-0.09591364237278834,0.12130023611322262),vec3(-0.15797644463814361,-0.07937430036055836,0.15972950012046713),vec3(-0.17628590900450966,-0.05289019694443883,0.1973636686263485),vec3(-0.19957914170178254,-0.010050447660950014,0.22428672225770246),vec3(-0.23061230582092926,0.06152568473621712,0.21465485784075855),vec3(-0.2748091985304043,0.18844826204726473,0.09754352781288295),vec3(-0.3445128239871801,0.4367329316543684,-0.34280145660982947),vec3(3.01878863857207e-17,2.1657391732312188e-17,2.1073950360688117e-17),vec3(0.3445128239871802,-0.4367329316543684,0.3428014566098292),vec3(0.27480919853040436,-0.18844826204726473,-0.09754352781288317),vec3(0.23061230582092923,-0.061525684736217036,-0.21465485784075863),vec3(0.19957914170178256,0.01005044766095007,-0.2242867222577026),vec3(0.17628590900450966,0.0528901969444389,-0.19736366862634852),vec3(0.15797644463814361,0.07937430036055836,-0.15972950012046708),vec3(0.14309268780275983,0.09591364237278836,-0.1213002361132226),vec3(0.13068130718798535,0.10610553463683695,-0.08582732348023968),vec3(0.12012272629777299,0.11209659879472973,-0.054535916053032235),vec3(0.11099482783905856,0.11523099884933206,-0.027593267367261167),vec3(0.10299894760598281,0.11638344275691272,-0.004735321117216822),vec3(0.09591713730219444,0.11614122538666284,0.014456986894158358),vec3(0.08958620751898468,0.11490895683615483,0.03043501110604141),vec3(0.08388128622421473,0.11297142788834233,0.04362949395201367),vec3(0.0787050285543731,0.11053272464789683,0.054430032064937794),vec3(0.07398031737724835,0.10774132259935604,0.06317955075217199),vec3(0.06964519409927278,0.10470661687258127,0.07017553687965912),vec3(0.06564925675340012,0.10151006459451126,0.07567406140614436),vec3(0.06195104853165206,0.09821284847174405,0.0798946889222969),vec3(0.05851613023760088,0.09486124236558141,0.08302538654659344),vec3(0.05531563463635159,0.09149042775415551,0.08522704702612297),vec3(0.05232516655690491,0.08812724684632407,0.08663748837353664),vec3(0.04952395514522684,0.08479221383871625,0.08737491127852687),vec3(0.046894192744119025,0.08150100098019919,0.0875408492938412),vec3(0.044420513774308154,0.0782655478780229,0.0872226677458533),vec3(0.04208957994016041,0.07509489726503163,0.08649567210767378),vec3(0.03988974710170204,0.07199582998922681,0.08542488379813157),vec3(0.037810795529844336,0.0689733511594637,0.08406653544718634),vec3(0.03584370983079468,0.06603106494154064,0.0824693308186501),vec3(0.03398049814202922,0.06317146536031418,0.08067550787447306),vec3(0.03221404263776634,0.0603961632607468,0.07872173737035698),vec3(0.03053797519013025,0.05770606440794075,0.07663988405127538),vec3(0.02894657338840431,0.055101509953517515,0.07445765297670578),vec3(0.02743467314560627,0.05258238774762672,0.07219913968862343),vec3(0.025997594905991905,0.05014822094579368,0.06988529975365308),vec3(0.024631081071251146,0.04779823884785925,0.06753435057251908),vec3(0.02333124273215836,0.04553143377157,0.06516211616871614),vec3(0.022094514159202137,0.04334660690571063,0.06278232386756344),vec3(0.020917613794531453,0.041242405435051886,0.060406860290555434),vec3(0.019797510716488522,0.039217352729685476,0.05804599286274142),vec3(0.01873139573059904,0.03726987300644707,0.05570856201655882),vec3(0.017716656387404026,0.035398311572086366,0.05340214843603387),vec3(0.016750855345744917,0.0336009515258525,0.051133218989284704),vec3(0.015831711596028804,0.03187602761772843,0.04890725441919533),vec3(0.01495708413622363,0.030221737816030454,0.04672886138108203),vec3(0.014124957757443688,0.028636253025678342,0.04460187101503013),vec3(0.013333430648782552,0.02711772530945961,0.04252942590539163),vec3(0.012580703574734953,0.025664294893927922,0.040514056999270985),vec3(0.011865070414853759,0.024274096185269285,0.03855775182034264),vec3(0.011184909885595262,0.022945262975493878,0.036662015116369455),vec3(0.010538678289711445,0.02167593298330937,0.0348279229120248),vec3(0.009924903159935513,0.020464251845162408,0.03305617079787941),vec3(0.00934217768178428,0.019308376648754923,0.03134711716742148),vec3(0.00878915579564185,0.01820647908271569,0.029700822013197525),vec3(0.008264547891358267,0.017156748261138197,0.028117081807664302),vec3(0.007767117019774098,0.016157393269669456,0.026595460921701543),vec3(0.0072956755551757,0.015206645470184556,0.02513531997192098),vec3(0.0068490822509524995,0.014302760593353517,0.023735841435238908),vec3(0.006426239637873832,0.013444020642236359,0.022396052824242063),vec3(0.006026091720604427,0.012628735625135236,0.02111484767848964),vec3(0.0056476219334747595,0.011855245132051592,0.019891004594067244),vec3(0.005289851321237059,0.01112191976604919,0.018723204485601167),vec3(0.0049518369146669934,0.010427162438453336,0.017610046250856482),vec3(0.004632670274498837,0.009769409534995856,0.016550060987378257),vec3(0.004331476180377796,0.009147131958638074,0.015541724892891445),vec3(0.004047411444335342,0.008558836053786137,0.014583470965923953),vec3(0.0037796638307912088,0.008003064415882869,0.013673699609992889),vec3(0.0035274510673012917,0.007478396589859665,0.012810788233390602),vec3(0.003290019932238895,0.006983449660613981,0.011993099926857178),vec3(0.0030666454073479924,0.006516878738501718,0.011218991293007703),vec3(0.002856629884667277,0.006077377342767509,0.01048681949409938),vec3(0.0026593024187144963,0.005663677685852356,0.00979494857841503),vec3(0.0024740180160610133,0.0052745508615947585,0.009141755140060302),vec3(0.0023001569555331914,0.004908806940460417,0.00852563336220343),vec3(0.0021371241332640567,0.0045652949750816605,0.007944999489623995));\n    float s_i[3] = float[](0.2424503566193514,0.10170785486914974,0.03723335168874466);\n    float g_x[151] = float[](-0.012893115592183313,-0.013698670060406285,-0.01454270853033401,-0.015426186340698034,-0.01635001813564313,-0.01731507233271321,-0.018322165451038992,-0.01937205631983224,-0.020465440189183726,-0.021602942767020888,-0.022785114207886127,-0.024012423080935617,-0.025285250346210764,-0.02660388336978562,-0.02796851000982456,-0.029379212806879423,-0.030835963312895207,-0.03233861659436575,-0.03388690594586321,-0.03548043785074925,-0.03711868722624115,-0.03880099299014412,-0.04052655398645646,-0.0422944253066969,-0.04410351504318662,-0.04595258150963188,-0.047840230963193016,-0.0497649158607877,-0.0517249336806611,-0.05371842633826146,-0.05574338022319264,-0.057797626881478534,-0.059878844364578875,-0.06198455926355096,-0.06411214944346842,-0.06625884748970856,-0.068421744874013,-0.07059779684434063,-0.07278382803848439,-0.07497653881724314,-0.07717251230864798,-0.0793682221503752,-0.08156004091305374,-0.08374424918274104,-0.0859170452764106,-0.08807455555991833,-0.09021284533361659,-0.09232793024659676,-0.0944157881965094,-0.09647237166805361,-0.09849362045958987,-0.10047547474393566,-0.10241388840629213,-0.10430484259943712,-0.10614435945385038,-0.10792851587831802,-0.109653457384833,-0.11131541187027436,-0.11291070328643685,-0.11443576512950307,-0.11588715368001017,-0.1172615609247814,-0.11855582709315698,-0.11976695274118251,-0.12089211031918369,-0.12192865516037081,-0.12287413583076501,-0.12372630378379504,-0.12448312226638165,-0.12514277442715682,-0.1257036705816586,-0.12616445459385237,-0.126524009338131,-0.12678146121101333,-0.12693618366704282,-0.1269877997588608,-0.12693618366704285,-0.12678146121101333,-0.12652400933813102,-0.12616445459385237,-0.12570367058165863,-0.12514277442715685,-0.12448312226638174,-0.12372630378379511,-0.12287413583076504,-0.12192865516037085,-0.1208921103191837,-0.11976695274118256,-0.11855582709315705,-0.11726156092478153,-0.11588715368001025,-0.11443576512950313,-0.1129107032864369,-0.11131541187027441,-0.10965345738483308,-0.10792851587831806,-0.10614435945385046,-0.10430484259943716,-0.10241388840629222,-0.1004754747439357,-0.09849362045958993,-0.09647237166805367,-0.09441578819650946,-0.09232793024659687,-0.09021284533361669,-0.08807455555991844,-0.08591704527641067,-0.08374424918274113,-0.08156004091305383,-0.07936822215037528,-0.07717251230864812,-0.07497653881724321,-0.07278382803848449,-0.07059779684434074,-0.06842174487401309,-0.06625884748970862,-0.06411214944346849,-0.06198455926355104,-0.05987884436457899,-0.057797626881478596,-0.05574338022319272,-0.05371842633826156,-0.05172493368066117,-0.04976491586078776,-0.047840230963193085,-0.04595258150963194,-0.04410351504318669,-0.04229442530669699,-0.040526553986456555,-0.03880099299014417,-0.0371186872262412,-0.03548043785074932,-0.033886905945863265,-0.03233861659436582,-0.03083596331289527,-0.029379212806879485,-0.02796851000982462,-0.026603883369785666,-0.02528525034621083,-0.02401242308093568,-0.022785114207886165,-0.02160294276702093,-0.020465440189183767,-0.019372056319832277,-0.018322165451039044,-0.017315072332713243,-0.016350018135643175,-0.015426186340698074,-0.014542708530334052,-0.013698670060406317,-0.012893115592183577);\n\n    \n    #define RANGE 75\n    \n    vec2 P1 = vec2(0);\n    vec2 P2 = vec2(0);\n    vec2 P3 = vec2(0);\n    float G = 0.0;\n    float Gw = 0.0;\n    for (int i = -RANGE; i <= RANGE; i++) {\n        int index = RANGE + i;\n\n        vec2 t = Po(i,0).xy;\n        float g = Go(i,0);\n        \n        vec3 py = p_y[index];\n        vec3 px = p_x[index];\n        \n        P1 += vec2(px.x, py.x) * t;\n        P2 += vec2(px.y, py.y) * t;\n        P3 += vec2(px.z, py.z) * t;\n        \n        Gw += abs(g_x[index]);\n        G  += abs(g_x[index]) * g;\n    }\n    \n    G \/= Gw;\n    \n    if(reset()) {\n        fragColor = vec4(0);\n    } else {\n        fragColor = vec4(pack2x16(P1),pack2x16(P2),pack2x16(P3), G);\n    }\n\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":259,"channel":0}],"code":"bool reset() {\n    return iFrame <= 1 || texture(iChannel3, vec2(32.5\/256.0, 0.5) ).x > 0.5;\n}\n\nvec4 Po(int m, int n) {\n    vec2 ouv = uv + texel * vec2(m,n);\n    if (BoundsCheck(ouv)) {\n        return vec4(pack2x16(vec2(0)),pack2x16(vec2(0)),pack2x16(vec2(0)),0);\n    } else {\n        return textureLod(iChannel0, ouv, 0.);\n    }\n}\n\nfloat Go(int m, int n) {\n    vec2 ouv = uv + texel * vec2(m,n);\n    if (BoundsCheck(ouv)) {\n        return 0.0;\n    } else {\n        return textureLod(iChannel1, ouv, 0.0).x;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    initialize(fragCoord, iFrame, iResolution);\n    \n    \n    vec3 p_y[151] = vec3[](vec3(-0.00039936512386562484,-0.0013037830496811509,-0.003024369266497462),vec3(-0.00043479272952107184,-0.001418247837094988,-0.0032841431420175815),vec3(-0.00047311175208775147,-0.0015418984185112672,-0.0035640171624620187),vec3(-0.0005145378703601011,-0.0016753999013442086,-0.003865351345832546),vec3(-0.0005593015430286112,-0.00181946044562425,-0.004189581775882141),vec3(-0.0006076489826017296,-0.001974833797626846,-0.004538223620654535),vec3(-0.0006598431999115183,-0.002142321974855929,-0.004912874168389093),vec3(-0.0007161651258619417,-0.0023227781140663494,-0.005315215867981123),vec3(-0.0007769148178819725,-0.0025171094952469407,-0.00574701935895483),vec3(-0.0008424127594587307,-0.002726280755872174,-0.0062101464732849465),vec3(-0.0009130012621639432,-0.002951317311279131,-0.006706553188329675),vec3(-0.0009890459807688295,-0.003193308998756704,-0.007238292506523368),vec3(-0.0010709375533892544,-0.0034534139648667857,-0.007807517233220254),vec3(-0.001159093380140449,-0.003732862817675909,-0.008416482619054973),vec3(-0.0012539595555377625,-0.004032963067987648,-0.009067548827244675),vec3(-0.0013560129718921017,-0.004355103886359663,-0.009763183179221676),vec3(-0.0014657636132559054,-0.004700761205697934,-0.010505962123640127),vec3(-0.0015837570621268875,-0.0050715032025820585,-0.011298572863887848),vec3(-0.001710577244168271,-0.005468996194229675,-0.01214381456744096),vec3(-0.0018468494397243054,-0.005895010992201898,-0.01304459906634993),vec3(-0.0019932435949786592,-0.006351429758636426,-0.014003950941382284),vec3(-0.0021504779703164487,-0.006840253416027218,-0.015025006862317022),vec3(-0.0023193231689242525,-0.007363609667412167,-0.016111014032915174),vec3(-0.002500606595033479,-0.007923761690353888,-0.017265327560358507),vec3(-0.002695217398648073,-0.008523117575376556,-0.018491406534454295),vec3(-0.002904111972299025,-0.009164240587639544,-0.019792808560418648),vec3(-0.0031283200755794476,-0.00984986033967067,-0.021173182439071275),vec3(-0.003368951675232755,-0.01058288497304438,-0.022636258627945997),vec3(-0.0036272046027564153,-0.01136641445806573,-0.02418583704385647),vec3(-0.0039043731482907218,-0.012203755132905171,-0.025825771679025524),vec3(-0.004201857729535902,-0.013098435617310009,-0.027559951395473018),vec3(-0.00452117579826187,-0.01405422425106731,-0.029392276131583135),vec3(-0.00486397417548751,-0.015075148223856253,-0.0313266275951637),vec3(-0.005232043040666073,-0.016165514581003473,-0.03336683332200887),vec3(-0.00562733184154224,-0.017329933308865297,-0.03551662273933928),vec3(-0.0060519674414129645,-0.018573342723915864,-0.037779573578614306),vec3(-0.006508274881439065,-0.01990103741075051,-0.040159046618245986),vec3(-0.006998801210110017,-0.021318698975493443,-0.0426581062860751),vec3(-0.007526342923405148,-0.022832429901508428,-0.04527942409155754),vec3(-0.008093977672062791,-0.024448790812264518,-0.048025161159515134),vec3(-0.008705101032420682,-0.026174841459272888,-0.05089682526368315),vec3(-0.009363469312043276,-0.028018185757524506,-0.05389509666073895),vec3(-0.010073249580677117,-0.029987021181332632,-0.05701961564096375),vec3(-0.01083907839404583,-0.03209019280176492,-0.06026872295763385),vec3(-0.011666131030046848,-0.03433725218081176,-0.0636391420650306),vec3(-0.012560203507485332,-0.03673852121908325,-0.06712558924087116),vec3(-0.013527810238371974,-0.03930516085637037,-0.07072029400179898),vec3(-0.014576300919535715,-0.04204924420785956,-0.07441240748450588),vec3(-0.015714001257992345,-0.04498383322316428,-0.07818727031588318),vec3(-0.016950383431117873,-0.04812305719009568,-0.08202550346745388),vec3(-0.018296273925712297,-0.051482190232598785,-0.08590187504816119),vec3(-0.01976410874874513,-0.05507772316147769,-0.0897838820674849),vec3(-0.02136824920173702,-0.05892742230067349,-0.09362996770370406),vec3(-0.02312537581916243,-0.06305036371943105,-0.09738726988920325),vec3(-0.025054984222680283,-0.06746692484105196,-0.10098876378585503),vec3(-0.02718001534382911,-0.07219870536957633,-0.10434961578501721),vec3(-0.02952766495752478,-0.07726833375162516,-0.10736250560624028),vec3(-0.03213043568796663,-0.08269909044537457,-0.10989158977713533),vec3(-0.03502752169832732,-0.08851423913888098,-0.11176466592987913),vec3(-0.03826665722222464,-0.09473589144745072,-0.11276294193733785),vec3(-0.041906623421512364,-0.10138312131867837,-0.11260760327593745),vec3(-0.04602070835716154,-0.10846885934496983,-0.11094209169468648),vec3(-0.050701578024441495,-0.1159947726771164,-0.10730865033138975),vec3(-0.05606828993205902,-0.12394275393722222,-0.10111727591157052),vec3(-0.06227665518595623,-0.13226056303078285,-0.09160486258770702),vec3(-0.06953501099043398,-0.14083708737623918,-0.077782417479591),vec3(-0.07812908130749861,-0.149458503599576,-0.058369977232929894),vec3(-0.08846282054472075,-0.15772775580732623,-0.031725854990398726),vec3(-0.10112895949827036,-0.1649097516191365,0.004199908847829801),vec3(-0.11703860203562352,-0.16961595360355963,0.05178318985988212),vec3(-0.13767855574664672,-0.16911182932471974,0.11316073490042394),vec3(-0.16567645398825667,-0.15763971441508162,0.18793345990415217),vec3(-0.2062192509611813,-0.12179330842214287,0.2642830614724927),vec3(-0.2713074094027817,-0.02537420724641723,0.28182569573805677),vec3(-0.395760620255607,0.2520387049261719,-0.04827629938430805),vec3(-0.4794057541719356,0.45941736433304614,-0.35998402950121244),vec3(-0.39576062025560704,0.25203870492617186,-0.04827629938430784),vec3(-0.27130740940278164,-0.02537420724641726,0.2818256957380568),vec3(-0.20621925096118135,-0.12179330842214289,0.2642830614724926),vec3(-0.16567645398825667,-0.15763971441508165,0.18793345990415228),vec3(-0.13767855574664675,-0.1691118293247198,0.1131607349004239),vec3(-0.11703860203562354,-0.1696159536035597,0.05178318985988209),vec3(-0.10112895949827036,-0.1649097516191365,0.004199908847829665),vec3(-0.0884628205447208,-0.1577277558073263,-0.03172585499039877),vec3(-0.07812908130749864,-0.14945850359957605,-0.05836997723292993),vec3(-0.06953501099043398,-0.14083708737623918,-0.07778241747959105),vec3(-0.06227665518595623,-0.13226056303078287,-0.09160486258770703),vec3(-0.05606828993205902,-0.12394275393722226,-0.10111727591157058),vec3(-0.050701578024441495,-0.11599477267711644,-0.10730865033138978),vec3(-0.04602070835716156,-0.10846885934496989,-0.1109420916946865),vec3(-0.04190662342151239,-0.10138312131867841,-0.11260760327593748),vec3(-0.03826665722222467,-0.09473589144745076,-0.11276294193733784),vec3(-0.03502752169832737,-0.08851423913888105,-0.1117646659298792),vec3(-0.032130435687966606,-0.0826990904453746,-0.10989158977713538),vec3(-0.029527664957524794,-0.0772683337516252,-0.10736250560624033),vec3(-0.027180015343829116,-0.07219870536957636,-0.1043496157850173),vec3(-0.025054984222680304,-0.06746692484105203,-0.10098876378585511),vec3(-0.023125375819162436,-0.06305036371943108,-0.09738726988920338),vec3(-0.02136824920173702,-0.058927422300673514,-0.09362996770370416),vec3(-0.019764108748745155,-0.05507772316147772,-0.08978388206748496),vec3(-0.01829627392571232,-0.05148219023259884,-0.08590187504816127),vec3(-0.01695038343111789,-0.04812305719009571,-0.08202550346745398),vec3(-0.015714001257992355,-0.0449838332231643,-0.07818727031588321),vec3(-0.014576300919535724,-0.04204924420785958,-0.07441240748450599),vec3(-0.013527810238371971,-0.039305160856370404,-0.07072029400179902),vec3(-0.012560203507485332,-0.036738521219083255,-0.06712558924087117),vec3(-0.011666131030046859,-0.03433725218081179,-0.0636391420650307),vec3(-0.01083907839404584,-0.03209019280176495,-0.06026872295763393),vec3(-0.010073249580677119,-0.029987021181332653,-0.05701961564096378),vec3(-0.009363469312043281,-0.02801818575752456,-0.05389509666073898),vec3(-0.008705101032420694,-0.026174841459272933,-0.0508968252636832),vec3(-0.008093977672062803,-0.024448790812264518,-0.04802516115951517),vec3(-0.007526342923405146,-0.02283242990150845,-0.04527942409155761),vec3(-0.006998801210110013,-0.021318698975493443,-0.04265810628607512),vec3(-0.006508274881439066,-0.01990103741075051,-0.040159046618246),vec3(-0.00605196744141298,-0.018573342723915892,-0.03777957357861436),vec3(-0.005627331841542247,-0.017329933308865328,-0.03551662273933936),vec3(-0.005232043040666078,-0.016165514581003487,-0.033366833322008904),vec3(-0.004863974175487524,-0.015075148223856267,-0.031326627595163734),vec3(-0.004521175798261876,-0.01405422425106733,-0.029392276131583166),vec3(-0.004201857729535902,-0.013098435617310021,-0.027559951395473042),vec3(-0.0039043731482907213,-0.012203755132905178,-0.025825771679025535),vec3(-0.003627204602756424,-0.01136641445806575,-0.024185837043856497),vec3(-0.003368951675232753,-0.010582884973044387,-0.022636258627946024),vec3(-0.0031283200755794494,-0.009849860339670675,-0.021173182439071295),vec3(-0.002904111972299031,-0.009164240587639563,-0.019792808560418675),vec3(-0.002695217398648074,-0.00852311757537658,-0.01849140653445433),vec3(-0.002500606595033485,-0.007923761690353899,-0.017265327560358527),vec3(-0.0023193231689242495,-0.007363609667412189,-0.016111014032915188),vec3(-0.002150477970316447,-0.006840253416027219,-0.01502500686231705),vec3(-0.001993243594978657,-0.006351429758636433,-0.014003950941382294),vec3(-0.0018468494397243095,-0.005895010992201904,-0.013044599066349954),vec3(-0.0017105772441682716,-0.005468996194229684,-0.012143814567440982),vec3(-0.0015837570621268916,-0.0050715032025820655,-0.011298572863887869),vec3(-0.0014657636132559086,-0.004700761205697936,-0.010505962123640147),vec3(-0.0013560129718921034,-0.004355103886359678,-0.009763183179221696),vec3(-0.0012539595555377642,-0.004032963067987664,-0.009067548827244698),vec3(-0.0011590933801404499,-0.003732862817675913,-0.00841648261905499),vec3(-0.0010709375533892564,-0.003453413964866797,-0.007807517233220275),vec3(-0.0009890459807688297,-0.0031933089987567142,-0.007238292506523384),vec3(-0.0009130012621639455,-0.002951317311279133,-0.006706553188329679),vec3(-0.0008424127594587336,-0.002726280755872182,-0.006210146473284956),vec3(-0.0007769148178819765,-0.002517109495246948,-0.005747019358954837),vec3(-0.0007161651258619422,-0.002322778114066351,-0.005315215867981134),vec3(-0.0006598431999115193,-0.0021423219748559342,-0.004912874168389099),vec3(-0.0006076489826017314,-0.0019748337976268505,-0.004538223620654547),vec3(-0.0005593015430286124,-0.001819460445624252,-0.004189581775882171),vec3(-0.0005145378703601023,-0.001675399901344218,-0.00386535134583253),vec3(-0.00047311175208774605,-0.001541898418511293,-0.003564017162461541),vec3(-0.0004347927295209686,-0.0014182478370946185,-0.003284143142016918),vec3(-0.0003993651238658139,-0.0013037830496811053,-0.003024369266498018));\n    vec3 p_x[151] = vec3[](vec3(-0.002137124133264062,-0.0045652949750816674,-0.007944999489624014),vec3(-0.002300156955533428,-0.004908806940460253,-0.008525633362203022),vec3(-0.0024740180160609526,-0.0052745508615946735,-0.009141755140060714),vec3(-0.0026593024187144994,-0.005663677685852353,-0.009794948578414675),vec3(-0.0028566298846672803,-0.006077377342767512,-0.010486819494099436),vec3(-0.0030666454073479945,-0.006516878738501725,-0.011218991293007716),vec3(-0.0032900199322388997,-0.0069834496606139915,-0.011993099926857181),vec3(-0.0035274510673012965,-0.007478396589859675,-0.012810788233390612),vec3(-0.0037796638307912127,-0.008003064415882877,-0.013673699609992897),vec3(-0.004047411444335345,-0.008558836053786144,-0.014583470965923965),vec3(-0.004331476180377802,-0.009147131958638085,-0.015541724892891462),vec3(-0.00463267027449884,-0.009769409534995865,-0.01655006098737826),vec3(-0.004951836914666999,-0.010427162438453347,-0.017610046250856503),vec3(-0.005289851321237063,-0.011121919766049194,-0.018723204485601174),vec3(-0.005647621933474761,-0.011855245132051603,-0.019891004594067244),vec3(-0.006026091720604429,-0.012628735625135244,-0.02111484767848965),vec3(-0.0064262396378738365,-0.013444020642236373,-0.02239605282424208),vec3(-0.006849082250952507,-0.014302760593353525,-0.02373584143523893),vec3(-0.007295675555175712,-0.015206645470184573,-0.025135319971921),vec3(-0.0077671170197740995,-0.01615739326966947,-0.026595460921701564),vec3(-0.008264547891358274,-0.01715674826113821,-0.02811708180766433),vec3(-0.008789155795641856,-0.0182064790827157,-0.02970082201319753),vec3(-0.009342177681784285,-0.019308376648754934,-0.031347117167421494),vec3(-0.00992490315993552,-0.02046425184516241,-0.03305617079787943),vec3(-0.010538678289711445,-0.021675932983309377,-0.03482792291202483),vec3(-0.011184909885595262,-0.022945262975493885,-0.036662015116369455),vec3(-0.011865070414853763,-0.024274096185269295,-0.03855775182034264),vec3(-0.01258070357473496,-0.025664294893927936,-0.040514056999271006),vec3(-0.013333430648782561,-0.02711772530945963,-0.042529425905391674),vec3(-0.01412495775744369,-0.028636253025678345,-0.04460187101503015),vec3(-0.014957084136223639,-0.030221737816030457,-0.04672886138108205),vec3(-0.01583171159602881,-0.031876027617728446,-0.04890725441919534),vec3(-0.016750855345744924,-0.03360095152585251,-0.051133218989284704),vec3(-0.01771665638740403,-0.03539831157208638,-0.0534021484360339),vec3(-0.018731395730599044,-0.03726987300644707,-0.055708562016558806),vec3(-0.019797510716488533,-0.0392173527296855,-0.05804599286274144),vec3(-0.020917613794531456,-0.04124240543505191,-0.06040686029055546),vec3(-0.02209451415920214,-0.043346606905710634,-0.06278232386756345),vec3(-0.023331242732158364,-0.045531433771570005,-0.06516211616871623),vec3(-0.024631081071251157,-0.04779823884785927,-0.06753435057251908),vec3(-0.02599759490599191,-0.05014822094579368,-0.06988529975365311),vec3(-0.02743467314560627,-0.05258238774762672,-0.07219913968862342),vec3(-0.028946573388404322,-0.05510150995351754,-0.07445765297670581),vec3(-0.03053797519013025,-0.05770606440794075,-0.07663988405127538),vec3(-0.03221404263776634,-0.0603961632607468,-0.07872173737035694),vec3(-0.033980498142029227,-0.06317146536031418,-0.08067550787447306),vec3(-0.035843709830794705,-0.06603106494154067,-0.08246933081865009),vec3(-0.03781079552984435,-0.0689733511594637,-0.08406653544718634),vec3(-0.03988974710170204,-0.07199582998922682,-0.08542488379813157),vec3(-0.042089579940160424,-0.07509489726503166,-0.08649567210767374),vec3(-0.044420513774308154,-0.0782655478780229,-0.0872226677458533),vec3(-0.046894192744119025,-0.0815010009801992,-0.08754084929384119),vec3(-0.04952395514522684,-0.08479221383871625,-0.08737491127852688),vec3(-0.052325166556904924,-0.08812724684632407,-0.0866374883735367),vec3(-0.05531563463635159,-0.09149042775415551,-0.08522704702612285),vec3(-0.05851613023760088,-0.09486124236558141,-0.0830253865465934),vec3(-0.06195104853165206,-0.09821284847174405,-0.0798946889222969),vec3(-0.06564925675340012,-0.10151006459451122,-0.07567406140614437),vec3(-0.06964519409927278,-0.1047066168725813,-0.07017553687965904),vec3(-0.07398031737724835,-0.10774132259935602,-0.06317955075217202),vec3(-0.0787050285543731,-0.11053272464789683,-0.054430032064937746),vec3(-0.08388128622421473,-0.11297142788834234,-0.0436294939520135),vec3(-0.08958620751898465,-0.1149089568361548,-0.03043501110604133),vec3(-0.09591713730219445,-0.11614122538666281,-0.014456986894158296),vec3(-0.10299894760598283,-0.11638344275691273,0.004735321117216877),vec3(-0.11099482783905858,-0.11523099884933204,0.027593267367261202),vec3(-0.12012272629777299,-0.1120965987947297,0.054535916053032214),vec3(-0.13068130718798532,-0.10610553463683693,0.08582732348023998),vec3(-0.1430926878027598,-0.09591364237278834,0.12130023611322262),vec3(-0.15797644463814361,-0.07937430036055836,0.15972950012046713),vec3(-0.17628590900450966,-0.05289019694443883,0.1973636686263485),vec3(-0.19957914170178254,-0.010050447660950014,0.22428672225770246),vec3(-0.23061230582092926,0.06152568473621712,0.21465485784075855),vec3(-0.2748091985304043,0.18844826204726473,0.09754352781288295),vec3(-0.3445128239871801,0.4367329316543684,-0.34280145660982947),vec3(3.01878863857207e-17,2.1657391732312188e-17,2.1073950360688117e-17),vec3(0.3445128239871802,-0.4367329316543684,0.3428014566098292),vec3(0.27480919853040436,-0.18844826204726473,-0.09754352781288317),vec3(0.23061230582092923,-0.061525684736217036,-0.21465485784075863),vec3(0.19957914170178256,0.01005044766095007,-0.2242867222577026),vec3(0.17628590900450966,0.0528901969444389,-0.19736366862634852),vec3(0.15797644463814361,0.07937430036055836,-0.15972950012046708),vec3(0.14309268780275983,0.09591364237278836,-0.1213002361132226),vec3(0.13068130718798535,0.10610553463683695,-0.08582732348023968),vec3(0.12012272629777299,0.11209659879472973,-0.054535916053032235),vec3(0.11099482783905856,0.11523099884933206,-0.027593267367261167),vec3(0.10299894760598281,0.11638344275691272,-0.004735321117216822),vec3(0.09591713730219444,0.11614122538666284,0.014456986894158358),vec3(0.08958620751898468,0.11490895683615483,0.03043501110604141),vec3(0.08388128622421473,0.11297142788834233,0.04362949395201367),vec3(0.0787050285543731,0.11053272464789683,0.054430032064937794),vec3(0.07398031737724835,0.10774132259935604,0.06317955075217199),vec3(0.06964519409927278,0.10470661687258127,0.07017553687965912),vec3(0.06564925675340012,0.10151006459451126,0.07567406140614436),vec3(0.06195104853165206,0.09821284847174405,0.0798946889222969),vec3(0.05851613023760088,0.09486124236558141,0.08302538654659344),vec3(0.05531563463635159,0.09149042775415551,0.08522704702612297),vec3(0.05232516655690491,0.08812724684632407,0.08663748837353664),vec3(0.04952395514522684,0.08479221383871625,0.08737491127852687),vec3(0.046894192744119025,0.08150100098019919,0.0875408492938412),vec3(0.044420513774308154,0.0782655478780229,0.0872226677458533),vec3(0.04208957994016041,0.07509489726503163,0.08649567210767378),vec3(0.03988974710170204,0.07199582998922681,0.08542488379813157),vec3(0.037810795529844336,0.0689733511594637,0.08406653544718634),vec3(0.03584370983079468,0.06603106494154064,0.0824693308186501),vec3(0.03398049814202922,0.06317146536031418,0.08067550787447306),vec3(0.03221404263776634,0.0603961632607468,0.07872173737035698),vec3(0.03053797519013025,0.05770606440794075,0.07663988405127538),vec3(0.02894657338840431,0.055101509953517515,0.07445765297670578),vec3(0.02743467314560627,0.05258238774762672,0.07219913968862343),vec3(0.025997594905991905,0.05014822094579368,0.06988529975365308),vec3(0.024631081071251146,0.04779823884785925,0.06753435057251908),vec3(0.02333124273215836,0.04553143377157,0.06516211616871614),vec3(0.022094514159202137,0.04334660690571063,0.06278232386756344),vec3(0.020917613794531453,0.041242405435051886,0.060406860290555434),vec3(0.019797510716488522,0.039217352729685476,0.05804599286274142),vec3(0.01873139573059904,0.03726987300644707,0.05570856201655882),vec3(0.017716656387404026,0.035398311572086366,0.05340214843603387),vec3(0.016750855345744917,0.0336009515258525,0.051133218989284704),vec3(0.015831711596028804,0.03187602761772843,0.04890725441919533),vec3(0.01495708413622363,0.030221737816030454,0.04672886138108203),vec3(0.014124957757443688,0.028636253025678342,0.04460187101503013),vec3(0.013333430648782552,0.02711772530945961,0.04252942590539163),vec3(0.012580703574734953,0.025664294893927922,0.040514056999270985),vec3(0.011865070414853759,0.024274096185269285,0.03855775182034264),vec3(0.011184909885595262,0.022945262975493878,0.036662015116369455),vec3(0.010538678289711445,0.02167593298330937,0.0348279229120248),vec3(0.009924903159935513,0.020464251845162408,0.03305617079787941),vec3(0.00934217768178428,0.019308376648754923,0.03134711716742148),vec3(0.00878915579564185,0.01820647908271569,0.029700822013197525),vec3(0.008264547891358267,0.017156748261138197,0.028117081807664302),vec3(0.007767117019774098,0.016157393269669456,0.026595460921701543),vec3(0.0072956755551757,0.015206645470184556,0.02513531997192098),vec3(0.0068490822509524995,0.014302760593353517,0.023735841435238908),vec3(0.006426239637873832,0.013444020642236359,0.022396052824242063),vec3(0.006026091720604427,0.012628735625135236,0.02111484767848964),vec3(0.0056476219334747595,0.011855245132051592,0.019891004594067244),vec3(0.005289851321237059,0.01112191976604919,0.018723204485601167),vec3(0.0049518369146669934,0.010427162438453336,0.017610046250856482),vec3(0.004632670274498837,0.009769409534995856,0.016550060987378257),vec3(0.004331476180377796,0.009147131958638074,0.015541724892891445),vec3(0.004047411444335342,0.008558836053786137,0.014583470965923953),vec3(0.0037796638307912088,0.008003064415882869,0.013673699609992889),vec3(0.0035274510673012917,0.007478396589859665,0.012810788233390602),vec3(0.003290019932238895,0.006983449660613981,0.011993099926857178),vec3(0.0030666454073479924,0.006516878738501718,0.011218991293007703),vec3(0.002856629884667277,0.006077377342767509,0.01048681949409938),vec3(0.0026593024187144963,0.005663677685852356,0.00979494857841503),vec3(0.0024740180160610133,0.0052745508615947585,0.009141755140060302),vec3(0.0023001569555331914,0.004908806940460417,0.00852563336220343),vec3(0.0021371241332640567,0.0045652949750816605,0.007944999489623995));\n    float s_i[3] = float[](0.2424503566193514,0.10170785486914974,0.03723335168874466);\n    float g_x[151] = float[](-0.012893115592183313,-0.013698670060406285,-0.01454270853033401,-0.015426186340698034,-0.01635001813564313,-0.01731507233271321,-0.018322165451038992,-0.01937205631983224,-0.020465440189183726,-0.021602942767020888,-0.022785114207886127,-0.024012423080935617,-0.025285250346210764,-0.02660388336978562,-0.02796851000982456,-0.029379212806879423,-0.030835963312895207,-0.03233861659436575,-0.03388690594586321,-0.03548043785074925,-0.03711868722624115,-0.03880099299014412,-0.04052655398645646,-0.0422944253066969,-0.04410351504318662,-0.04595258150963188,-0.047840230963193016,-0.0497649158607877,-0.0517249336806611,-0.05371842633826146,-0.05574338022319264,-0.057797626881478534,-0.059878844364578875,-0.06198455926355096,-0.06411214944346842,-0.06625884748970856,-0.068421744874013,-0.07059779684434063,-0.07278382803848439,-0.07497653881724314,-0.07717251230864798,-0.0793682221503752,-0.08156004091305374,-0.08374424918274104,-0.0859170452764106,-0.08807455555991833,-0.09021284533361659,-0.09232793024659676,-0.0944157881965094,-0.09647237166805361,-0.09849362045958987,-0.10047547474393566,-0.10241388840629213,-0.10430484259943712,-0.10614435945385038,-0.10792851587831802,-0.109653457384833,-0.11131541187027436,-0.11291070328643685,-0.11443576512950307,-0.11588715368001017,-0.1172615609247814,-0.11855582709315698,-0.11976695274118251,-0.12089211031918369,-0.12192865516037081,-0.12287413583076501,-0.12372630378379504,-0.12448312226638165,-0.12514277442715682,-0.1257036705816586,-0.12616445459385237,-0.126524009338131,-0.12678146121101333,-0.12693618366704282,-0.1269877997588608,-0.12693618366704285,-0.12678146121101333,-0.12652400933813102,-0.12616445459385237,-0.12570367058165863,-0.12514277442715685,-0.12448312226638174,-0.12372630378379511,-0.12287413583076504,-0.12192865516037085,-0.1208921103191837,-0.11976695274118256,-0.11855582709315705,-0.11726156092478153,-0.11588715368001025,-0.11443576512950313,-0.1129107032864369,-0.11131541187027441,-0.10965345738483308,-0.10792851587831806,-0.10614435945385046,-0.10430484259943716,-0.10241388840629222,-0.1004754747439357,-0.09849362045958993,-0.09647237166805367,-0.09441578819650946,-0.09232793024659687,-0.09021284533361669,-0.08807455555991844,-0.08591704527641067,-0.08374424918274113,-0.08156004091305383,-0.07936822215037528,-0.07717251230864812,-0.07497653881724321,-0.07278382803848449,-0.07059779684434074,-0.06842174487401309,-0.06625884748970862,-0.06411214944346849,-0.06198455926355104,-0.05987884436457899,-0.057797626881478596,-0.05574338022319272,-0.05371842633826156,-0.05172493368066117,-0.04976491586078776,-0.047840230963193085,-0.04595258150963194,-0.04410351504318669,-0.04229442530669699,-0.040526553986456555,-0.03880099299014417,-0.0371186872262412,-0.03548043785074932,-0.033886905945863265,-0.03233861659436582,-0.03083596331289527,-0.029379212806879485,-0.02796851000982462,-0.026603883369785666,-0.02528525034621083,-0.02401242308093568,-0.022785114207886165,-0.02160294276702093,-0.020465440189183767,-0.019372056319832277,-0.018322165451039044,-0.017315072332713243,-0.016350018135643175,-0.015426186340698074,-0.014542708530334052,-0.013698670060406317,-0.012893115592183577);\n\n\n    #define RANGE 75\n    \n    vec2 P = vec2(0);\n    float G = 0.0;\n    float Gw = 0.0;\n    for (int i = -RANGE; i <= RANGE; i++) {\n        int index = RANGE + i;\n        \n        vec4 tx = Po(0,i);\n        vec2 t1 = unpack2x16(tx.x);\n        vec2 t2 = unpack2x16(tx.y);\n        vec2 t3 = unpack2x16(tx.z);\n\n        float g = tx.w;\n        \n        vec3 py = p_y[index];\n        vec3 px = p_x[index];\n        \n        P += s_i[0] * vec2(px.x, py.x).yx * t1;\n        P += s_i[1] * vec2(px.y, py.y).yx * t2;\n        P += s_i[2] * vec2(px.z, py.z).yx * t3;\n        Gw += abs(g_x[index]);\n        G  += abs(g_x[index]) * g;\n    }\n    \n    G \/= Gw;\n\n    if(reset()) {\n        fragColor = vec4(0);\n    } else {\n        vec2 com_n;\n        if (FRAME_MOD(0)) {\n            com_n = com(fragCoord, iChannel2, iChannel1);\n        } else {\n            com_n = textureLod(iChannel1, uv, 0.0).zw;\n        }\n        fragColor = vec4(vec2((P.x + P.y) + G),com_n);\n    }\n\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":260,"channel":0}],"code":"bool reset() {\n    return iFrame <= 1 || texture(iChannel3, vec2(32.5\/256.0, 0.5) ).x > 0.5;\n}\n\nvoid mainImage( out vec4 c, in vec2 p )\n{\n    initialize(p, iFrame, iResolution);\n    Vec4Neighborhood pn = GetVec4Neighborhood(iChannel0);\n    vec4 U = texelFetch(iChannel1, ivec2(p), 0);\n    vec2 dp = Delta(pn, 0);\n    c = U + vec4(dp,0,0)\/2.0;\n    \n    if (reset()) {\n        c = vec4(0,0,INIT_MASS,0);\n    }\n}","name":"Buffer D","description":"","type":"buffer"}]}}