{"Shader":{"ver":"0.1","info":{"id":"ssS3DV","date":"1618147751","viewed":396,"name":"Image Morph Bleed Effect (v.Fab)","username":"FabriceNeyret2","description":"refactoring, commenting and extending _bm' \"Image Morph Bleed Effect\" [url]https:\/\/shadertoy.com\/view\/NdS3WK[\/url]\n\nmorphing one image into another only by swapping random pixels every frame\nBuffer A iChannel1 is the source image, it morphs into iChannel3","likes":13,"published":3,"flags":32,"usePreview":1,"tags":["experiment","glitch","morph"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ Fork of \"Image Morph Bleed Effect\" by _bm. https:\/\/shadertoy.com\/view\/NdS3WK\n\/\/ 2021-04-09 11:50:28\n\/\/ Refactoring, commenting and extending\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord \/ iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":5,"src":"\/media\/a\/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","ctype":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":8,"src":"\/media\/a\/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":30,"src":"\/media\/a\/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","ctype":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ --- metrics for color similarity \n\n\/\/#define dist(c1,c2) distance(c1,c2)\n  #define dist(c1,c2) distance(c1.rgb,c2.rgb)\n\/\/#define dist(c1,c2) distance( c1 \/ max(c1.r,max(c1.g,c1.b)), c2 \/ max(c2.r,max(c2.g,c2.b)) )\n\/\/#define dist(c1,c2) distance(c1.r,c2.r)\n\/\/#define dist(c1,c2) max(0.,1.-distance(c1.rgb,c2.rgb))\n\n#define DIST 8.\n\n#define hash(s)  ( texture(iChannel2, U + iTime * s \/R ).xy - .5 )\n\n#define T(s)       texture(iChannel0, U + amnt* hash(s)\/R )\n \nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, \n         U = u\/R;\n         \n    vec4 bg = texture(iChannel3, U);             \/\/ target image\n    \n    O = texture(iChannel0, U);                   \/\/ current stage\n    float amnt = DIST * dist(bg, O);             \/\/ difference to target\n    vec4 c1 = T(1.93937174e6),                   \/\/ pull alternate value\n         c2 = T(1.12380517e5);                   \/\/ as far as unconverged\n   \n    float a = dist(c1, bg),                      \/\/ difference to target\n          b = dist(c2, bg);\n    if ( b < a ) a = b, c1 = c2;                 \/\/ get the closest\n    O =  mix(c1, O, min(2.*a, 1.) );             \/\/  is close enought, blend it weigthed by convergence\n\n    if (O==vec4(0))  O = texture(iChannel1, U);  \/\/ init texture (for the color palette)\n}","name":"Buffer A","description":"","type":"buffer"}]}}