{"Shader":{"ver":"0.1","info":{"id":"7djcWR","date":"1643452812","viewed":82,"name":"Creeping Waves","username":"thesage1014","description":"A simple experiment with using a buffer. Initially I was experimenting with game of life from the yt video https:\/\/www.youtube.com\/watch?v=xh61Ol2X4GA","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["buffer"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord\/iResolution.xy;\n\n    \/\/ Time varying pixel color\n    vec3 col =  texture(iChannel0,uv).rgb;\n    \n    \/\/ Output to screen\n    col.r \/= 2.; \/\/ value data stored in r, lighting in gb\n    col.r += col.b;\n    fragColor = vec4(col.brr,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":17,"src":"\/media\/a\/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"#define SCANSIZE 2\nfloat DECAY = .9;\n\/\/ Adjust the decay if you adjust the scansize. Try 1 and .925. There are lots of wild effects with different\n\/\/ values\n\/\/\n\/\/ It's funny how at scansize 1, there is this stable pattern where a black pixel will be surrounded by lit pixels.\n\/\/ Each frame, a given pixel adds the direction of nearby brigtness, so if it's surrounded, it will stay dark\n\/\/ because I'm using the length of the scan vector to estimate the brightness, which is zero when it's surrounded.\n\nvec2 ScanNeighbors(ivec2 p) {\n    vec2 dir = vec2(0.);\n    for (int y=-SCANSIZE; y<=SCANSIZE; y++) {\n        for (int x=-SCANSIZE; x<=SCANSIZE; x++) {\n            if(x==0 && y==0) continue;\n            dir += vec2(x,y)*texelFetch(iChannel1, p+ivec2(x,y), 0).r;\n        }\n    }\n    \/\/ returns the average direction of the nearby brigtness\n    return (dir);\n}\nvec3 iterate(ivec2 ifrag) {\n   \/\/float DECAY = .89+sin(iTime*.5)*.02; \/\/ animating decay\n\n    vec3 col = vec3(0.);\n   \/\/ if(ifrag.y == int(iResolution.y\/2.+10.*sin(iTime*2.))){  \/\/ sweeping line\n   \/\/     col.r = 0.;\n   \/\/ } else {\n        vec3 tc = vec3(texelFetch(iChannel1, ifrag, 0).rgb);\n        \n        \n        vec2 dir = ScanNeighbors(ifrag);\n        vec2 lightDir = normalize( (vec2(sin(iTime),cos(iTime))));\n        tc.bg = vec2(smoothstep(-3.,3.,dot(dir, lightDir)));\n        tc.r += smoothstep(0.,7.*float(SCANSIZE*SCANSIZE),length(dir));\n        tc.r *= DECAY;\n        tc.g = smoothstep(.8,1.,DECAY);\n        col = clamp(tc,0.,1.);\n    \/\/}\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord\/iResolution.xy;\n    ivec2 ifrag = ivec2(fragCoord);\n    vec3 col = vec3(0);\n    \n    if(iFrame <10) {\n        col = texture(iChannel0, uv).rgb;\n    } else {\n        col = iterate(ifrag);\n    }\n    \n    fragColor = vec4(col,1.0);\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}}