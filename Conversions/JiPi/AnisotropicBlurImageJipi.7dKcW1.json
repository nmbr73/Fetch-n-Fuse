{
 "ver": "0.1",
 "info": {
  "id": "7dKcW1",
  "date": "0",
  "viewed": 0,
  "name": "Anisotropic Blur Image JiPi",
  "description": "Warps an image using an anisotropic blur kernel controlled by a vector field. Use mouse controls to mess with the underlying vector field, and spacebar to reset in fullscreen.",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "blur",
   "warp",
   "image",
   "anisotropic"
  ],
  "hasliked": 0,
  "parentid": "ldcSDB",
  "parentname": "Anisotropic Blur Image Warp"
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "XsXGR8",
     "filepath": "/media/previz/buffer01.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "#define SIGMOID_CONTRAST 12.0\n\nvec4 contrast(vec4 x, float s) {\n\treturn 1.0 / (1.0 + exp(-s * (x - 0.5)));    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 texel = 1. / iResolution.xy;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = contrast(texture(iChannel0, uv), SIGMOID_CONTRAST);\n}",
   "name": "Image",
   "description": "",
   "type": "image"
  },
  {
   "inputs": [
    {
     "id": "Xsf3zn",
     "filepath": "/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png",
     "type": "texture",
     "channel": 1,
     "sampler": {
      "filter": "mipmap",
      "wrap": "repeat",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "4dXGRr",
     "filepath": "/presets/tex00.jpg",
     "type": "keyboard",
     "channel": 3,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dXGR8",
     "channel": 0
    }
   ],
   "code": "/*\n    Generates a vector field using a dynamical system. \n\tTo see it in action on its own see this shadertoy:\n    https://www.shadertoy.com/view/XddSRX\n*/\n\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvec2 normz(vec2 x) {\n\treturn x == vec2(0.0, 0.0) ? vec2(0.0, 0.0) : normalize(x);\n}\n\n// reverse advection\nvec3 advect(vec2 ab, vec2 vUv, vec2 step, float sc) {\n    \n    vec2 aUv = vUv - ab * sc * step;\n    \n    const float _G0 = 0.25; // center weight\n    const float _G1 = 0.125; // edge-neighbors\n    const float _G2 = 0.0625; // vertex-neighbors\n    \n    // 3x3 neighborhood coordinates\n    float step_x = step.x;\n    float step_y = step.y;\n    vec2 n  = vec2(0.0, step_y);\n    vec2 ne = vec2(step_x, step_y);\n    vec2 e  = vec2(step_x, 0.0);\n    vec2 se = vec2(step_x, -step_y);\n    vec2 s  = vec2(0.0, -step_y);\n    vec2 sw = vec2(-step_x, -step_y);\n    vec2 w  = vec2(-step_x, 0.0);\n    vec2 nw = vec2(-step_x, step_y);\n\n    vec3 uv =    texture(iChannel0, fract(aUv)).xyz;\n    vec3 uv_n =  texture(iChannel0, fract(aUv+n)).xyz;\n    vec3 uv_e =  texture(iChannel0, fract(aUv+e)).xyz;\n    vec3 uv_s =  texture(iChannel0, fract(aUv+s)).xyz;\n    vec3 uv_w =  texture(iChannel0, fract(aUv+w)).xyz;\n    vec3 uv_nw = texture(iChannel0, fract(aUv+nw)).xyz;\n    vec3 uv_sw = texture(iChannel0, fract(aUv+sw)).xyz;\n    vec3 uv_ne = texture(iChannel0, fract(aUv+ne)).xyz;\n    vec3 uv_se = texture(iChannel0, fract(aUv+se)).xyz;\n    \n    return _G0*uv + _G1*(uv_n + uv_e + uv_w + uv_s) + _G2*(uv_nw + uv_sw + uv_ne + uv_se);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float _K0 = -20.0/6.0; // center weight\n    const float _K1 = 4.0/6.0;   // edge-neighbors\n    const float _K2 = 1.0/6.0;   // vertex-neighbors\n    const float cs = -0.6;  // curl scale\n    const float ls = 0.05;  // laplacian scale\n    const float ps = -0.8;  // laplacian of divergence scale\n    const float ds = -0.05; // divergence scale\n    const float dp = -0.04; // divergence update scale\n    const float pl = 0.3;   // divergence smoothing\n    const float ad = 6.0;   // advection distance scale\n    const float pwr = 1.0;  // power when deriving rotation angle from curl\n    const float amp = 1.0;  // self-amplification\n    const float upd = 0.8;  // update smoothing\n    const float sq2 = 0.6;  // diagonal weight\n\n    vec2 vUv = fragCoord.xy / iResolution.xy;\n    vec2 texel = 1. / iResolution.xy;\n    \n    // 3x3 neighborhood coordinates\n    float step_x = texel.x;\n    float step_y = texel.y;\n    vec2 n  = vec2(0.0, step_y);\n    vec2 ne = vec2(step_x, step_y);\n    vec2 e  = vec2(step_x, 0.0);\n    vec2 se = vec2(step_x, -step_y);\n    vec2 s  = vec2(0.0, -step_y);\n    vec2 sw = vec2(-step_x, -step_y);\n    vec2 w  = vec2(-step_x, 0.0);\n    vec2 nw = vec2(-step_x, step_y);\n\n    vec3 uv =    texture(iChannel0, fract(vUv)).xyz;\n    vec3 uv_n =  texture(iChannel0, fract(vUv+n)).xyz;\n    vec3 uv_e =  texture(iChannel0, fract(vUv+e)).xyz;\n    vec3 uv_s =  texture(iChannel0, fract(vUv+s)).xyz;\n    vec3 uv_w =  texture(iChannel0, fract(vUv+w)).xyz;\n    vec3 uv_nw = texture(iChannel0, fract(vUv+nw)).xyz;\n    vec3 uv_sw = texture(iChannel0, fract(vUv+sw)).xyz;\n    vec3 uv_ne = texture(iChannel0, fract(vUv+ne)).xyz;\n    vec3 uv_se = texture(iChannel0, fract(vUv+se)).xyz;\n    \n    // uv.x and uv.y are the x and y components, uv.z is divergence \n\n    // laplacian of all components\n    vec3 lapl  = _K0*uv + _K1*(uv_n + uv_e + uv_w + uv_s) + _K2*(uv_nw + uv_sw + uv_ne + uv_se);\n    float sp = ps * lapl.z;\n    \n    // calculate curl\n    // vectors point clockwise about the center point\n    float curl = uv_n.x - uv_s.x - uv_e.y + uv_w.y + sq2 * (uv_nw.x + uv_nw.y + uv_ne.x - uv_ne.y + uv_sw.y - uv_sw.x - uv_se.y - uv_se.x);\n    \n    // compute angle of rotation from curl\n    float sc = cs * sign(curl) * pow(abs(curl), pwr);\n    \n    // calculate divergence\n    // vectors point inwards towards the center point\n    float div  = uv_s.y - uv_n.y - uv_e.x + uv_w.x + sq2 * (uv_nw.x - uv_nw.y - uv_ne.x - uv_ne.y + uv_sw.x + uv_sw.y + uv_se.y - uv_se.x);\n    float sd = uv.z + dp * div + pl * lapl.z;\n\n    vec2 norm = normz(uv.xy);\n    \n    vec3 ab = advect(vec2(uv.x, uv.y), vUv, texel, ad);\n    \n    // temp values for the update rule\n    float ta = amp * ab.x + ls * lapl.x + norm.x * sp + uv.x * ds * sd;\n    float tb = amp * ab.y + ls * lapl.y + norm.y * sp + uv.y * ds * sd;\n\n    // rotate\n    float a = ta * cos(sc) - tb * sin(sc);\n    float b = ta * sin(sc) + tb * cos(sc);\n    \n    vec3 abd = upd * uv + (1.0 - upd) * vec3(a,b,sd);\n    \n    if (iMouse.z > 0.0) {\n    \tvec2 d = fragCoord.xy - iMouse.xy;\n        float m = exp(-length(d) / 20.0);\n        abd.xy += m * normz(d);\n    }\n    \n    vec3 init = texture(iChannel1, fragCoord.xy / iResolution.xy).xyz;\n    // initialize with noise\n    if((uv == vec3(0.0) && init != vec3(0.0)) || reset()) {\n        fragColor = vec4(init - 0.5, 0.0);\n    } else {\n        abd.z = clamp(abd.z, -1.0, 1.0);\n        abd.xy = clamp(length(abd.xy) > 1.0 ? normz(abd.xy) : abd.xy, -1.0, 1.0);\n        fragColor = vec4(abd, 0.0);\n    }\n    \n\n}",
   "name": "Buffer A",
   "description": "",
   "type": "buffer"
  },
  {
   "inputs": [
    {
     "id": "4dXGRr",
     "filepath": "/presets/tex00.jpg",
     "type": "keyboard",
     "channel": 3,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "XdXGzr",
     "filepath": "/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg",
     "type": "texture",
     "channel": 0,
     "sampler": {
      "filter": "mipmap",
      "wrap": "repeat",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 2,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "XsXGR8",
     "filepath": "/media/previz/buffer01.png",
     "type": "buffer",
     "channel": 1,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "XsXGR8",
     "channel": 0
    }
   ],
   "code": "/*\n\tBlurs each pixel with its neighbors according to the underlying\n\tvector field in Buffer A.\n*/\n\n#define GAMMA_CORRECT\t\t// use gamma-corrected blending\n#define GAMMA vec3(2.2)     // gamma\n#define NORMALIZE_AB\t\t// normalize the vector value\n#define BLUR_RATIO 0.2\t\t// ratio of the original pixel value to the blurred value\n#define SHARPNESS 1.0\t\t// sharpness of the blur kernel, 0.0 gives a uniform distribution\n#define VECTOR_SHARPEN 12.0 // sharpens the vector field\n\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvec2 normz(vec2 x) {\n\treturn x == vec2(0.0, 0.0) ? vec2(0.0, 0.0) : normalize(x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 vUv = fragCoord.xy / iResolution.xy;\n    vec2 texel = 1. / iResolution.xy;\n    \n    // 3x3 neighborhood coordinates\n    float step_x = texel.x;\n    float step_y = texel.y;\n    vec2 n  = vec2(0.0, step_y);\n    vec2 ne = vec2(step_x, step_y);\n    vec2 e  = vec2(step_x, 0.0);\n    vec2 se = vec2(step_x, -step_y);\n    vec2 s  = vec2(0.0, -step_y);\n    vec2 sw = vec2(-step_x, -step_y);\n    vec2 w  = vec2(-step_x, 0.0);\n    vec2 nw = vec2(-step_x, step_y);\n    \n    vec2 ab =    texture(iChannel2, fract(vUv)).xy;\n    vec2 ab_n =  texture(iChannel2, fract(vUv+n)).xy;\n    vec2 ab_e =  texture(iChannel2, fract(vUv+e)).xy;\n    vec2 ab_s =  texture(iChannel2, fract(vUv+s)).xy;\n    vec2 ab_w =  texture(iChannel2, fract(vUv+w)).xy;\n    vec2 ab_nw = texture(iChannel2, fract(vUv+nw)).xy;\n    vec2 ab_sw = texture(iChannel2, fract(vUv+sw)).xy;\n    vec2 ab_ne = texture(iChannel2, fract(vUv+ne)).xy;\n    vec2 ab_se = texture(iChannel2, fract(vUv+se)).xy;\n    \n    const float _K0 = -20.0/6.0; // center weight\n    const float _K1 = 4.0/6.0;   // edge-neighbors\n    const float _K2 = 1.0/6.0;   // vertex-neighbors\n    \n    // laplacian\n    vec2 lapl  = _K0*ab + _K1*(ab_n + ab_e + ab_w + ab_s) + _K2*(ab_nw + ab_sw + ab_ne + ab_se);\n    \n    ab += -VECTOR_SHARPEN * lapl;\n    \n    #ifdef NORMALIZE_AB\n    \tab = normz(ab);\n    #endif\n    \n    \n    #ifdef GAMMA_CORRECT\n        vec3 im =    pow(texture(iChannel1, fract(vUv)).xyz, GAMMA);\n        vec3 im_n =  pow(texture(iChannel1, fract(vUv+n)).xyz, GAMMA);\n        vec3 im_e =  pow(texture(iChannel1, fract(vUv+e)).xyz, GAMMA);\n        vec3 im_s =  pow(texture(iChannel1, fract(vUv+s)).xyz, GAMMA);\n        vec3 im_w =  pow(texture(iChannel1, fract(vUv+w)).xyz, GAMMA);\n        vec3 im_nw = pow(texture(iChannel1, fract(vUv+nw)).xyz, GAMMA);\n        vec3 im_sw = pow(texture(iChannel1, fract(vUv+sw)).xyz, GAMMA);\n        vec3 im_ne = pow(texture(iChannel1, fract(vUv+ne)).xyz, GAMMA);\n        vec3 im_se = pow(texture(iChannel1, fract(vUv+se)).xyz, GAMMA);\n    #else\n        vec3 im =    texture(iChannel1, fract(vUv)).xyz;\n        vec3 im_n =  texture(iChannel1, fract(vUv+n)).xyz;\n        vec3 im_e =  texture(iChannel1, fract(vUv+e)).xyz;\n        vec3 im_s =  texture(iChannel1, fract(vUv+s)).xyz;\n        vec3 im_w =  texture(iChannel1, fract(vUv+w)).xyz;\n        vec3 im_nw = texture(iChannel1, fract(vUv+nw)).xyz;\n        vec3 im_sw = texture(iChannel1, fract(vUv+sw)).xyz;\n        vec3 im_ne = texture(iChannel1, fract(vUv+ne)).xyz;\n        vec3 im_se = texture(iChannel1, fract(vUv+se)).xyz;\n    #endif\n\n    // a gaussian centered around the point at 'ab'\n    #define e(x,y) exp(-SHARPNESS * dot(vec2(x,y) - ab, vec2(x,y) - ab))\n    \n    float D_c =  e( 0.0, 0.0);\n    float D_e =  e( 1.0, 0.0);\n    float D_w =  e(-1.0, 0.0);\n    float D_n =  e( 0.0, 1.0);\n    float D_s =  e( 0.0,-1.0);\n    float D_ne = e( 1.0, 1.0);\n    float D_nw = e(-1.0, 1.0);\n    float D_se = e( 1.0,-1.0);\n    float D_sw = e(-1.0,-1.0);\n    \n    // normalize the blur kernel\n    float dn = D_c + D_e + D_w + D_n + D_s + D_ne + D_nw + D_se + D_sw;\n\n    vec3 blur_im = (D_c*im \n        + im_n*D_n + im_ne*D_ne \n        + im_e*D_e + im_se*D_se \n        + im_s*D_s + im_sw*D_sw \n        + im_w*D_w + im_nw*D_nw) / dn;\n    \n    #ifdef GAMMA_CORRECT\n    \tblur_im = pow(blur_im, 1.0 / GAMMA);\n    \tim = pow(im, 1.0 / GAMMA);\n    #endif\n\n    // initialize with image\n    vec4 init = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    if((im == vec3(0.0) && init != vec4(0.0)) || reset()) {\n        fragColor = init;\n    } else {\n        fragColor = vec4(clamp(BLUR_RATIO * im + (1.0 - BLUR_RATIO) * blur_im, 0.0, 1.0), 0.0);\n    }\n}",
   "name": "Buffer B",
   "description": "",
   "type": "buffer"
  }
 ]
}