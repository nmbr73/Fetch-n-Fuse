{"Shader":{"ver":"0.1","info":{"id":"4s3GDs","date":"1452669868","viewed":2239,"name":"Fourier workflow","username":"FabriceNeyret2","description":"workflow for all applications working in Fourier domain.  SPACE toggles Fourier depiction.\nbuf B and D do the space transforms, buf C operates in Fourier.\n                                     Adapted from  Flyguy's https:\/\/www.shadertoy.com\/view\/MscGWS#","likes":24,"published":3,"flags":48,"usePreview":1,"tags":["fft","fourier","dft"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ adapted from  Flyguy's https:\/\/www.shadertoy.com\/view\/MscGWS#\n\/\/ see also https:\/\/www.shadertoy.com\/view\/4dGGz1 to play with spectrum.\n\/\/ NB: see new version here: https:\/\/www.shadertoy.com\/view\/XtScWt <<<<\n\n\/\/ set your module and phase in Buf A\n\n#define SIZE 256. \/\/Size must be changed in each tab.\n\n\/\/Display modes\n#define MAGNITUDE 0.\n#define PHASE 1.\n#define COMPONENT 2.\n\nfloat DISPLAY_MODE = MAGNITUDE;\n\n\/\/Scaling\n#define LOG 0\n#define LINEAR 1\n\n#define MAG_SCALE LOG\n\nvec4 rainbow(float x)  { return .5 + .5 * cos(6.2832*(x - vec4(0,1,2,0)\/3.)); }\nvec4 rainbow(vec2 C)   { return rainbow(atan(C.y,C.x)\/3.1416 + .5); }\n\nvec4 paintDFT(vec2 F) {\n  if (DISPLAY_MODE == MAGNITUDE)\n     #if MAG_SCALE == LOG\n        return vec4( log(length(F)) \/ log(SIZE*SIZE) );\n     #elif MAG_SCALE == LINEAR\n        return vec4( length(F) \/ SIZE );\n     #endif\n\n    else if ( DISPLAY_MODE == PHASE )     return rainbow(F);        \n    else \/* if ( DISPLAY_MODE == COMPONENT ) *\/ return vec4(.5 + .5*F\/SIZE, 0,0);        \n}\n\nfloat message(vec2 p) {  \/\/ the alert function to add to your shader\n    int x = int(p.x+1.)-1, y=int(p.y)-10,  i;\n    if (x<1||x>32||y<0||y>2) return -1.; \n    i = ( y==2? i=  757737252: y==1? i= 1869043565: y==0? 623593060: 0 )\/ int(exp2(float(32-x)));\n \treturn i==2*(i\/2) ? 1. : 0.;\n}\n\n\nvoid mainImage( out vec4 O,  vec2 uv )\n{\n    vec2 R = iResolution.xy;\n    if (iResolution.y<200.) \/\/ alert for the icon\n        {   float c=message(uv\/8.); if(c>=0.){ O=vec4(c,0,0,0);return; } }\n        \n    vec2 pixel = ( uv - iResolution.xy\/2.) \/ SIZE  + vec2(2,1)\/2.,\n         tile  = floor(pixel),\n         stile = floor(mod(2.*pixel,2.));\n         uv = fract(pixel) * SIZE \/ R ;\n\n    O-=O;\n    \n    DISPLAY_MODE = floor(texture(iChannel3, .5\/R).w); \/\/ persistant key flag.\n    if (tile.y==-1. && abs(tile.x-.5)<1.) {   \/\/ buttons displaying current flags value\n        for (float i=0.; i<3.; i++) \n            O += smoothstep(.005,.0,abs(length(uv*R\/SIZE-vec2(.2+i\/7.,.97))-.025));\n        float v = DISPLAY_MODE;\n        O.b += smoothstep(.03,.02,length(uv*R\/SIZE-vec2(.2+v\/7.,.97)));\n    }\n    \n    if(tile == vec2(0,0))  \/\/Input + DFT (Left)\n        if (stile == vec2(0) )\n             O += paintDFT(texture(iChannel1, 2.*uv).xy);\n        else O += length(texture(iChannel0, uv).rgb);\n\n    if(tile == vec2(1,0))  \/\/ Output +DFT (Right)\n        if (stile == vec2(0) )\n             O += paintDFT(texture(iChannel3, 2.*uv).xy);\n        else \n            O += .5+.5*texture(iChannel2, uv).x;\n          \/\/O += length(texture(iChannel2, uv).xy);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":36,"src":"\/media\/a\/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","ctype":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ creation of the input\n\n#define SIZE 256. \/\/Size must be changed in each tab.\n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    O-=O; \n    \n    if(uv.x > SIZE || uv.y > SIZE) return;\n        \n    vec2 R = iResolution.xy;\n    O.x = length( texture(iChannel0, uv\/R* R.y\/SIZE).rgb );\n    \/\/ O.y = ...\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/ Fourier transform of the input\n\n\/\/ Horizontal + Vertical Discrete Fourier Transform of the input \n\/\/ 2 passes pipelined : in -> buf.zw -> buf.xy -> out\n\/\/ ( adapted from  Flyguy's https:\/\/www.shadertoy.com\/view\/MscGWS# )\n\n\n#define SIZE 256. \/\/Size must be changed in each tab.\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x) * vec2(cos(b),sin(b)); } \n\/\/ #define ang(a)  vec2(cos(a), sin(a))\n\/\/ vec2 cmul (vec2 a,float t) { vec2 b=ang(t); return mat2(b,-b.y,b.x)*a; } \n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    O-=O; \n    \n    if(uv.x > SIZE || uv.y > SIZE) return;\n        \n    for(float n = 0.; n < SIZE; n++)  {\n        vec2 xn = texture(iChannel0, vec2(n+.5, uv.y) \/ iResolution.xy).xy,\n             yn = texture(iChannel1, vec2(uv.x, n+.5) \/ iResolution.xy).zw,\n             a = - 6.2831853 * (uv-.5 -SIZE\/2.) * n\/SIZE;\n        \n        O.zw += cmul(xn, a.x);\n        O.xy += cmul(yn, a.y);\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":259,"channel":0}],"code":"\/\/ do your operation in spectral domain here\n\n#define SIZE 256. \/\/Size must be changed in each tab.\n\nbool keyPress(int ascii) { return (texture(iChannel2,vec2((.5+float(ascii))\/256.,0.25)).x > 0.); }\nfloat rand(vec2 uv) { return fract(1e5*sin(dot(uv,vec2(17.4,123.7)))); }\nfloat gauss(float x) { return exp(-.5*x*x); }\n#define ang(a)  vec2(cos(a), sin(a))\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x) * vec2(cos(b),sin(b)); } \n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 T = texture(iChannel0, U \/ iResolution.xy).xy;\n    U -= .5;\n    vec2 X = 2.*U\/SIZE - 1.;\n    float l = length(X), s = sign(-X.x), y = iMouse.y\/iResolution.y;\n    \n# if 1        \n    \/\/ --- your custom Fourier-space filter here --------------------\n    float    \n       \/\/ F = l*10.;                     \/\/ derivative\n       \/\/ F = .01\/(.01+l);               \/\/ integral\n       \/\/ F = gauss(l\/.125);             \/\/ gaussian blur\n          F = smoothstep(.3,.0, abs(l-.5)) * 20.; \/\/ ring filter\n       \/\/ F = smoothstep(-.1,.1,l-y) * 20.; \/\/ kill LF (mouse tuning)\n       \/\/ F = float(fract(U.x\/2.)*fract(U.y\/2.)>0.);   \/\/ odd  freq only\n       \/\/ F = float(fract(U.x\/2.)+fract(U.y\/2.)==0.);  \/\/ even freq only\n\n    T *= F;\n    O = vec4(T,F,F);\n    \n# else\n    \/\/ --- or, your custom Fourier-space function here ------------\n    \/\/            see also https:\/\/www.shadertoy.com\/view\/4dGGz1\n       T = ang(6.2832*rand(U));                \/\/ white noise\n    \/\/ T *= gauss(l\/.05)*10.;                  \/\/ modulus profile : gauss\n       T *= gauss(abs(l-.12)\/.005)*10.;        \/\/ modulus profile : ring (blue noise)\n       T = cmul(T,iTime*s);              \/\/ phase shift with time\n    \n    T *= SIZE;\n             \n    O = vec4(T,T);\n    \n#endif\n    \n    if ( U==vec2(0)) {\n        O.w = texture(iChannel1,U\/iResolution.xy).w;\n        if ( keyPress(32) ) O.w = mod(O.w+.1, 3.) ; \/\/ persistant key flag\n    }\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":260,"channel":0}],"code":"\/\/ invFourier transform \n\n\/\/ Horizontal + Vertical Discrete Fourier Transform of the input \n\/\/ 2 passes pipelined : in -> buf.zw -> buf.xy -> out\n\/\/ ( adapted from  Flyguy's https:\/\/www.shadertoy.com\/view\/MscGWS# )\n\n\n#define SIZE 256. \/\/Size must be changed in each tab.\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x)*vec2(cos(b), sin(b)); } \n#define W(uv)   mod(uv+SIZE\/2.,SIZE)                    \/\/ wrap [-1\/2,1\/2] to [0,1]\n\n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    O-=O; \n    \n    if(uv.x > SIZE || uv.y > SIZE) return;\n\n    for(float n = 0.; n < SIZE; n++)  {\n        float m = W(n);       \/\/ W to warp 0,0 to mid-window.\n        vec2 xn = texture(iChannel0, vec2(m+.5, uv.y) \/ iResolution.xy).xy,\n             yn = texture(iChannel1, vec2(uv.x, m+.5) \/ iResolution.xy).zw,\n             a =  6.2831853 *  (uv-.5) * n\/SIZE;\n        \n        O.zw += cmul(xn, a.x);\n        O.xy += cmul(yn, a.y);\n    }\n    O \/= SIZE;\n}","name":"Buffer D","description":"","type":"buffer"}]}}