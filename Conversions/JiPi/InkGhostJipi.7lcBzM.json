{
 "ver": "0.1",
 "info": {
  "id": "7lcBzM",
  "date": "0",
  "viewed": 0,
  "name": "Ink Ghost JiPi",
  "description": "A variant of a shader i did some time ago : https://www.shadertoy.com/view/Mt33DH.\nYou can use the mouse to change the effect (horizontal axis).",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "post",
   "effect",
   "ghost",
   "ink",
   "process"
  ],
  "hasliked": 0,
  "parentid": "4t3GDj",
  "parentname": "Ink Ghost"
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "4sfGRn",
     "filepath": "/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg",
     "type": "texture",
     "channel": 1,
     "sampler": {
      "filter": "mipmap",
      "wrap": "repeat",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "XsXGR8",
     "filepath": "/media/previz/buffer01.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "vec4 color1 = vec4(1.0,0.25,0.15,1.0);\nvec4 color2 = vec4(0.5,0.1,0.1,1.0);\nvec4 color3 = vec4(0.0,0.0,0.0,1.0);\nfloat multiplier = 1.0;\nfloat midPosition = 0.5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 c = texture(iChannel0, uv);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec4 tex = texture(iChannel1, uv);\n    \n    float l = clamp(((c.x+c.y+c.z)/3.0)*multiplier,0.0,1.0);\n    \n    vec4 res1 = mix(color1, color2, smoothstep(0.0,midPosition,l));\n    vec4 res2 = mix(res1, color3, smoothstep(midPosition,1.0,l));\n    \n    fragColor = res2*(0.9 + tex*0.1);\n}",
   "name": "Image",
   "description": "",
   "type": "image"
  },
  {
   "inputs": [
    {
     "id": "XdfGRr",
     "filepath": "/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm",
     "type": "video",
     "channel": 1,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dXGR8",
     "channel": 0
    }
   ],
   "code": "\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 cam = texture(iChannel1, uv);\n    float keying = smoothstep(0.0,1.0,distance(cam.xyz, vec3(13.0/255.0,163.0/255.0,37.0/255.0))*1.0);\n    \n    fragColor = vec4(clamp(cam.xyz + vec3(0.8), vec3(0.0), vec3(1.0))*keying, keying);\n}",
   "name": "Buffer A",
   "description": "",
   "type": "buffer"
  },
  {
   "inputs": [
    {
     "id": "4dXGRr",
     "filepath": "/presets/tex00.jpg",
     "type": "keyboard",
     "channel": 2,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "XsXGR8",
     "filepath": "/media/previz/buffer01.png",
     "type": "buffer",
     "channel": 1,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "4sXGR8",
     "filepath": "/media/previz/buffer02.png",
     "type": "buffer",
     "channel": 3,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "XsXGR8",
     "channel": 0
    }
   ],
   "code": "float sampleDistance = 30.0;\nfloat diffusion = 1.0;\nfloat turbulence = 0.2;\nfloat fluidify = 0.1;\nfloat attenuate = 0.005;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy/iResolution.xy);\n    \n    vec4 baseColor = texture(iChannel0, uv);\n    \n    vec2 sDist = sampleDistance/iResolution.xy;\n    \n    vec4 newColor = texture(iChannel1, uv);\n    vec2 turb = (texture(iChannel3, uv).xy*2.0-1.0);\n\n    vec4 newColor1 = texture(iChannel1, uv + vec2(1.0,0.0)*sDist);\n    vec4 newColor2 = texture(iChannel1, uv + vec2(-1.0,0.0)*sDist);\n    vec4 newColor3 = texture(iChannel1, uv + vec2(0.0,1.0)*sDist);\n    vec4 newColor4 = texture(iChannel1, uv + vec2(0.0,-1.0)*sDist);\n    \n    vec4 newColor5 = texture(iChannel1, uv + vec2(1.0,1.0)*sDist);\n    vec4 newColor6 = texture(iChannel1, uv + vec2(-1.0,1.0)*sDist);\n    vec4 newColor7 = texture(iChannel1, uv + vec2(1.0,-1.0)*sDist);\n    vec4 newColor8 = texture(iChannel1, uv + vec2(-1.0,-1.0)*sDist);\n     \n    vec2 t = (newColor1.x+newColor1.y+newColor1.z)/3.0 * vec2(1.0,0.0);\n    t += (newColor2.x+newColor2.y+newColor2.z)/3.0 * vec2(-1.0,0.0);\n    t += (newColor3.x+newColor3.y+newColor3.z)/3.0 * vec2(0.0,1.0);\n    t += (newColor4.x+newColor4.y+newColor4.z)/3.0 * vec2(0.0,-1.0);\n    \n    t += (newColor5.x+newColor5.y+newColor5.z)/3.0 * vec2(1.0,1.0);\n    t += (newColor6.x+newColor6.y+newColor6.z)/3.0 * vec2(-1.0,1.0);\n    t += (newColor7.x+newColor7.y+newColor7.z)/3.0 * vec2(1.0,-1.0);\n    t += (newColor8.x+newColor8.y+newColor8.z)/3.0 * vec2(-1.0,-1.0);\n    \n    t /= 8.0;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    vec2 dir = vec2(t+turb*turbulence)*iTimeDelta*diffusion*(m.x*2.0-1.0);\n    \n    vec4 res = texture(iChannel1, uv + dir);\n    \n    if(iFrame < 10 || texture(iChannel2, vec2(32.5/256.0, 0.5) ).x > 0.5)\n    {\n    \tfragColor =  baseColor;\n    }\n    else\n    {\n    \tfragColor = mix(res, baseColor, clamp(baseColor.a*fluidify + attenuate,0.0,1.0));\n    }\n}",
   "name": "Buffer B",
   "description": "",
   "type": "buffer"
  },
  {
   "inputs": [],
   "outputs": [
    {
     "id": "4sXGR8",
     "channel": 0
    }
   ],
   "code": "vec2 speed = vec2(1.0,2.0);\nfloat v = 30.0;\nfloat dist = 0.3;\nfloat random1 = 1.0;\nfloat random2 = 100.0;\n\nfloat hash(float n)\n{\n   return fract(sin(dot(vec2(n,n) ,vec2(12.9898,78.233))) * 43758.5453);  \n}  \n\nvec2 turbulence(vec2 uv)\n{\n    vec2 turb;\n    turb.x = sin(uv.x);\n    turb.y = cos(uv.y);\n    \n    for(int i = 0; i < 10; i++)\n    {\n        float ifloat = 1.0 + float(i);\n        float ifloat1 = ifloat + random1;\n        float ifloat2 = ifloat + random2; \n        \n        float r1 = hash(ifloat1)*2.0-1.0;\n        float r2 = hash(ifloat2)*2.0-1.0;\n        \n        vec2 turb2;\n        turb2.x = sin(uv.x*(1.0 + r1*v) + turb.y*dist*ifloat + iTime*speed.x*r2);\n        turb2.y = cos(uv.y*(1.0 + r1*v) + turb.x*dist*ifloat + iTime*speed.y*r2);\n        \n        turb.x = mix(turb.x, turb2.x, 0.5);\n        turb.y = mix(turb.y, turb2.y, 0.5);\n    }\n    \n    return turb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ratio = iResolution.x/iResolution.y;\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv.x *= ratio;\n\n    vec2 turb = turbulence(uv)*0.5+0.5;\n    \n    fragColor = vec4(turb.x, turb.y, 0.0, 0.0);\n      \n}",
   "name": "Buffer C",
   "description": "",
   "type": "buffer"
  }
 ]
}