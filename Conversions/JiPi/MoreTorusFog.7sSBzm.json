{"Shader":{"ver":"0.1","info":{"id":"7sSBzm","date":"1645841403","viewed":343,"name":"More Torus \"Fog\"","username":"SnoopethDuckDuck","description":"i like this technique","likes":10,"published":3,"flags":0,"usePreview":0,"tags":["e"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 50.\n#define SURF_DIST 0.0001\n\n#define pi 3.14159\n\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec3 distort(vec3 p) {\n    float o = 2.* pi \/ 3.;\n    float t = 3. * length(p) - 0.5 * iTime;\n   \/\/ p = abs(p) - 0.5;\n    p.xy *= Rot(t - o);\n    p.yz *= Rot(t);\n    p.zx *= Rot(t + o);\n    return fract(0.8 * p) - 0.5;\n}\n\nfloat GetDist(vec3 p) {\n   \n    p = distort(p); \n    float d = length(p.xz) - 0.5;\n    \n    \/\/ lower k => more \"fog\"\n    float k = 0.25;\n    \/\/return length(p) -0.3 + SURF_DIST;\n    return k * length(vec2(d, p.y)) + 1. * SURF_DIST;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\t\n    float dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        if(abs(dS)<SURF_DIST || dO>MAX_DIST) break;\n        dO += dS*z; \n    }\n    \n    return min(dO, MAX_DIST);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)\/iResolution.y;\n\n    float t = 0.125 * iTime, o = 2. * pi \/ 3.;\n    vec3 ro = 3. * vec3(cos(t - o), cos(t), cos(t + o));\n\n    vec3 rd = GetRayDir(uv, ro, vec3(0), 0.95);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n\n        vec3 dp = distort(p);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n       \/\/ col = vec3(step(0., dif));\n        \n        \/\/ darken with distance from origin\n        float v = exp(-0.31 * length(p));\n        \n        \/\/ idk what this does\n        v = smoothstep(0., 1., v);\n        v *= v;\n      \n        \/\/ color + lighten\n        vec3 e = vec3(1);\n        col = v * pal(0.77 + 0.15 * length(p), e, e, e, 0.8 * vec3(0,1,2)\/3.);    \n        \/\/col -= 0.1;\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}}