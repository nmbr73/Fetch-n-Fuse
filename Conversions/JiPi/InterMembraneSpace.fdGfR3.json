{"Shader":{"ver":"0.1","info":{"id":"fdGfR3","date":"1658669989","viewed":157,"name":"Inter Membrane Space","username":"leon","description":"another Lipschitz discontinuity","likes":16,"published":3,"flags":32,"usePreview":0,"tags":["noise","abstract","gyroid"],"hasliked":0},"renderpass":[{"inputs":[{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\n\/\/ Inter Membrane Space\n\n\/\/ Buffer A : raymarching and lighting\n\/\/ Buffer B : temporal anti aliasing\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord\/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":257,"channel":0}],"code":"\nfloat details;\n\nfloat map(vec3 p)\n{\n    \/\/ spicy fbm cyclic gyroid noise\n    details = sin(iTime*.2-fbm(p)+length(p));\n    return max(abs(details*.05), p.z+2.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ salt\n    vec3 rng = hash33(vec3(fragCoord, iFrame));\n    \n    \/\/ coordinates\n    vec2 uv = (fragCoord-iResolution.xy\/2.)\/iResolution.y;\n    vec3 color = vec3(0);\n    vec3 ray = normalize(vec3(uv, -1.));\n    ray.xy *= rot(-.7);\n    vec3 pos = ray*(.5+.5*rng.z);\n    \n    \/\/ raymarch\n    float maxDist = 5.;\n    const float count = 100.;\n    float steps = 0.;\n    float total = 0.;\n    for (steps = count; steps > 0.; --steps) {\n        float dist = map(pos);\n        if (dist < total\/iResolution.y || total > maxDist) break;\n        dist *= 0.9+0.1*rng.x;\n        pos += ray * dist;\n        total += dist;\n    }\n    \n    \/\/ lighting\n    float shade = steps\/count;\n    if (shade > .001 && total < maxDist) {\n        vec2 noff = vec2(.001,0); \/\/ NuSan https:\/\/www.shadertoy.com\/view\/3sBGzV\n        vec3 normal = normalize(map(pos)-vec3(map(pos-noff.xyy), map(pos-noff.yxy), map(pos-noff.yyx)));\n        float top = dot(reflect(ray, normal), vec3(0,1,0))*.5+.5;\n        vec3 tint = .5+.5*cos(vec3(1,2,3)+pos.y+details*6.);\n        color = vec3(0.2) + vec3(.8)*top;\n        color += tint * .5;\n        color *= shade*shade;\n    }\n    \n    fragColor = vec4(color, 1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/ Temporal Anti Aliasing from:\n\/\/ https:\/\/www.elopezr.com\/temporal-aa-and-the-quest-for-the-holy-trail\/\n\n\/\/ but only the color clamping...\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec3 color = texture(iChannel0, uv).rgb;\n    vec3 temporal = texture(iChannel1, uv).rgb;\n    vec3 minColor = vec3(9999.), maxColor = vec3(-9999.);\n    for(int x = -1; x <= 1; ++x){\n        for(int y = -1; y <= 1; ++y){\n            vec3 c = texture(iChannel0, uv + vec2(x, y) \/ iResolution.xy).rgb;\n            minColor = min(minColor, c);\n            maxColor = max(maxColor, c);\n        }\n    }\n    temporal = clamp(temporal, minColor, maxColor);\n    fragColor.rgb = mix(color, temporal, 0.9);\n    fragColor.a = 1.0;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n\/\/ fbm gyroid noise\nfloat gyroid (vec3 seed) { return dot(sin(seed),cos(seed.yzx)); }\nfloat fbm (vec3 seed) {\n    float result = 0.;\n    float a = .5;\n    for (int i = 0; i < 5; ++i) {\n        result += gyroid(seed\/a+result\/a)*a;\n        a \/= 2.;\n    }\n    return result;\n}\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c,-s,s,c);\n}\n\n\/\/ Dave Hoskins\n\/\/ https:\/\/www.shadertoy.com\/view\/4djSRW\nvec3 hash33(vec3 p3) {\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n","name":"Common","description":"","type":"common"}]}}