{"Shader":{"ver":"0.1","info":{"id":"4sjcz1","date":"1490903804","viewed":3462,"name":"Cubemap to Gnomonic Projection","username":"starea","description":"Just contribute a gnomonic projection shader to ShaderToy! Move mouse to change the central point. Press space for the Equirectangular Projection; press 1-3 for FoVs. The gnomonic \/ rectilinear projection represents the image formed by a spherical lens.","likes":16,"published":3,"flags":16,"usePreview":0,"tags":["2d","cubemap","projection","panorama","equirectangular","gnomonic","rectilinear","cylindricalequidistant"],"hasliked":0},"renderpass":[{"inputs":[{"id":22,"src":"\/media\/a\/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","ctype":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/** \n * Cubemap to Gnomonic \/ Rectilinear unwrapping by Ruofei Du (DuRuofei.com)\n * Link to demo: https:\/\/www.shadertoy.com\/view\/4sjcz1\n * starea @ ShaderToy, License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. \n * https:\/\/creativecommons.org\/licenses\/by-nc-sa\/3.0\/\n *\n * Reference: \n * [1] Gnomonic projection: https:\/\/en.wikipedia.org\/wiki\/Gnomonic_projection\n * [2] Weisstein, Eric W. \"Gnomonic Projection.\" From MathWorld--A Wolfram Web Resource. http:\/\/mathworld.wolfram.com\/GnomonicProjection.html\n *\n **\/\nconst float PI = 3.1415926536;\nconst float PI_2 = PI * 0.5; \nconst float PI2 = PI * 2.0; \nconst int KEY_SPACE = 32;\nconst int KEY_ENTER = 13;\nconst int KEY_1 = 49;\nconst int KEY_2 = 50;\nconst int KEY_3 = 51; \n\n\/\/ Forked from fb39ca4's keycode viewer tool @ https:\/\/www.shadertoy.com\/view\/4tt3Wn\nfloat keyPressed(int keyCode) {\n\treturn texture(iChannel1, vec2((float(keyCode) + 0.5) \/ 256., .5\/3.)).r;   \n}\n\n\/\/ Main function, convert screen coordinate system to spherical coordinates in gnomonic projection\n\/\/ screenCoord: [0, 1], centralPoint: [0, 1], FoVScale: vec2(0.9, 0.2) recommended\nvec2 calcSphericalCoordsInGnomonicProjection(in vec2 screenCoord, in vec2 centralPoint, in vec2 FoVScale) {\n    vec2 cp = (centralPoint * 2.0 - 1.0) * vec2(PI, PI_2);  \/\/ [-PI, PI], [-PI_2, PI_2]\n    \n    \/\/ Convert screen coord in gnomonic mapping to spherical coord in [PI, PI\/2]\n    vec2 convertedScreenCoord = (screenCoord * 2.0 - 1.0) * FoVScale * vec2(PI, PI_2); \n    float x = convertedScreenCoord.x, y = convertedScreenCoord.y;\n    \n    float rou = sqrt(x * x + y * y), c = atan(rou); \n\tfloat sin_c = sin( c ), cos_c = cos( c );  \n    \n    float lat = asin(cos_c * sin(cp.y) + (y * sin_c * cos(cp.y)) \/ rou);\n\tfloat lon = cp.x + atan(x * sin_c, rou * cos(cp.y) * cos_c - y * sin(cp.y) * sin_c);\n    \n\tlat = (lat \/ PI_2 + 1.0) * 0.5; lon = (lon \/ PI + 1.0) * 0.5; \/\/[0, 1]\n\n    \/\/ uncomment the following if centralPoint ranges out of [0, PI\/2] [0, PI]\n\t\/\/ while (lon > 1.0) lon -= 1.0; while (lon < 0.0) lon += 1.0;\n\t\/\/ while (lat > 1.0) lat -= 1.0; while (lat < 0.0) lat += 1.0;\n    \n    \/\/ convert spherical coord to cubemap coord\n   return (bool(keyPressed(KEY_SPACE)) ? screenCoord : vec2(lon, lat)) * vec2(PI2, PI);\n}\n\n\/\/ convert cubemap coordinates to spherical coordinates: \nvec3 sphericalToCubemap(in vec2 sph) {\n    return vec3(sin(sph.y) * sin(sph.x), cos(sph.y), sin(sph.y) * cos(sph.x));\n}\n    \n\/\/ convert screen coordinate system to cube map coordinates in rectilinear projection\nvec3 calcCubeCoordsInGnomonicProjection(in vec2 screenCoord, in vec2 centralPoint, in vec2 FoVScale) {\n\treturn sphericalToCubemap( calcSphericalCoordsInGnomonicProjection(screenCoord, centralPoint, FoVScale) );\n}\n\n\/\/ the inverse function of calcSphericalCoordsInGnomonicProjection()\nvec2 calcEquirectangularFromGnomonicProjection(in vec2 sph, in vec2 centralPoint) {\n    vec2 cp = (centralPoint * 2.0 - 1.0) * vec2(PI, PI_2);\n\tfloat cos_c = sin(cp.y) * sin(sph.y) + cos(cp.y) * cos(sph.y) * cos(sph.y - cp.y);\n    float x = cos(sph.y) * sin(sph.y - cp.y) \/ cos_c;\n    float y = ( cos(cp.y) * sin(sph.y) - sin(cp.y) * cos(sph.y) * cos(sph.y - cp.y) ) \/ cos_c; \n    return vec2(x, y) + vec2(PI, PI_2); \n}\n\n\/\/ Forked from: https:\/\/www.shadertoy.com\/view\/MsXGz4, press enter for comparison\nvec3 iqCubemap(in vec2 q, in vec2 mo) {\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x \/ iResolution.y;\n\t\n    \/\/ camera\n\tfloat an1 = -6.2831 * (mo.x + 0.25);\n\tfloat an2 = clamp( (1.0-mo.y) * 2.0, 0.0, 2.0 );\n    vec3 ro = 2.5 * normalize(vec3(sin(an2)*cos(an1), cos(an2)-0.5, sin(an2)*sin(an1)));\n    vec3 ww = normalize(vec3(0.0, 0.0, 0.0) - ro);\n    vec3 uu = normalize(cross( vec3(0.0, -1.0, 0.0), ww ));\n    vec3 vv = normalize(cross(ww, uu));\n    return normalize( p.x * uu + p.y * vv + 1.4 * ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n    \n\t\/\/ Modify this to adjust the field of view\n    vec2 FoVScale = vec2(0.45, 0.4); \n    if (bool(keyPressed(KEY_1))) {\n        FoVScale = vec2(0.225, 0.2);\n    } else if (bool(keyPressed(KEY_2))) {\n        FoVScale = vec2(1.0, 1.0);\n    } else if (bool(keyPressed(KEY_3))) {\n        FoVScale = vec2(0.5, 0.5);\n    } \n         \n    \/\/ central \/ foveated point, iMouse.xy corresponds to longitude and latitude \n    vec2 centralPoint = (length(iMouse.xy) < 1e-4) ? vec2(0.25, 0.5) : (iMouse.xy \/ iResolution.xy);\n    \n    \/\/ press enter to compare with iq's cubemaps https:\/\/www.shadertoy.com\/view\/MsXGz4\n    vec3 dir = (!bool(keyPressed(KEY_ENTER))) ? calcCubeCoordsInGnomonicProjection(q, centralPoint, FoVScale) : iqCubemap(q, centralPoint);\n    \n\tvec3 col = texture(iChannel0, dir).rgb;\n    \n    \/\/ test if the inverse function works correctly by pressing z\n    if (bool(keyPressed(90))) {\n    \tvec2 sph = calcSphericalCoordsInGnomonicProjection(q, centralPoint, FoVScale);    \n        sph = calcEquirectangularFromGnomonicProjection(sph, centralPoint);\n        col = vec3(sph \/ vec2(PI2, PI), 0.5); \n    }\n    \n    col *= 0.25 + 0.75 * pow( 16.0 * q.x * q.y * (1.0 - q.x) * (1.0 - q.y), 0.15 );\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}}