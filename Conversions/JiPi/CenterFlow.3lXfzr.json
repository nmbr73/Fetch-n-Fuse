{"Shader":{"ver":"0.1","info":{"id":"3lXfzr","date":"1595884427","viewed":578,"name":"Center flow","username":"michael0884","description":"Obfuscated code and new rendering","likes":33,"published":3,"flags":32,"usePreview":0,"tags":["particles","ca"],"hasliked":0},"renderpass":[{"inputs":[{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ Fork of \"Everflow\" by michael0884. https:\/\/shadertoy.com\/view\/ttBcWm\n\/\/ 2020-07-19 18:18:22\n\n\/\/ Fork of \"Paint streams\" by michael0884. https:\/\/shadertoy.com\/view\/WtfyDj\n\/\/ 2020-07-11 22:38:47\n\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); \/\/ cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 col, in vec2 pos )\n{\n    ivec2 p = ivec2(pos);\n   \n    vec4 data = T(pos); \n    vec2 X = DECODE(data.x) + pos;\n    vec2 V = DECODE(data.y);\n    float M = data.z;\n    \n    \/\/how much mass falls into this pixel\n    vec4 rho = vec4(V, M, 1.)*GS((pos - X)\/0.5); \n    vec3 dx = vec3(-3., 0., 3.);\n\n    float ang = atan(V.x, V.y);\n    float mag = 0. + 3.*length(V.xy)*rho.z;\n    \n    float a = pow(smoothstep(fluid_rho*0., fluid_rho*2., rho.z),0.1);\n    \/\/ Output to screen\n    col.xyz += 0.2*a;\n    col.xyz += 0.5 - 0.5*cos(2.*vec3(0.3,0.5,1.)*mix(rho.w,rho.z,0.));\n    \/\/col.xyz += vec3(1,1,1)*bord;\n    col.xyz = tanh(4.*pow(col.xyz,vec3(1.5))) + hsv2rgb(vec3(5.*ang\/PI, 1.2, mag));\n    col.w=1.0;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define T(p) texelFetch(iChannel0, ivec2(mod(p,R)), 0)\n#define P(p) texture(iChannel0, mod(p,R)\/R)\n\n#define PI 3.14159265\n#define dt 1.5\n#define R iResolution.xy\n\n\/\/mold stuff \n#define sense_ang 0.4\n#define sense_dis 2.5\n#define sense_force 0.1\n#define trailing 0.\n#define acceleration 0.01\n\n\/\/SPH pressure\n#define Pressure(rho) 1.*rho\n#define fluid_rho 0.2\n\n\/\/useful functions\n#define GS(x) exp(-dot(x,x))\n#define GS0(x) exp(-length(x))\n#define Dir(ang) vec2(cos(ang), sin(ang))\n#define loop(i,x) for(int i = 0; i < x; i++)\n#define range(i,a,b) for(int i = a; i <= b; i++)\n\n\/\/data packing\n#define PACK(X) ( uint(round(65534.0*clamp(0.5*X.x+0.5, 0., 1.))) + \\\n           65535u*uint(round(65534.0*clamp(0.5*X.y+0.5, 0., 1.))) )   \n               \n#define UNPACK(X) (clamp(vec2(X%65535u, X\/65535u)\/65534.0, 0.,1.)*2.0 - 1.0)              \n\n#define DECODE(X) UNPACK(floatBitsToUint(X))\n#define ENCODE(X) uintBitsToFloat(PACK(X))","name":"Common","description":"","type":"common"},{"inputs":[{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"void mainImage( out vec4 U, in vec2 pos )\n{\n    ivec2 p = ivec2(pos);\n    \n    vec2 X = vec2(0);\n    vec2 V = vec2(0);\n    float M = 0.;\n    \n    \/\/basically integral over all updated neighbor distributions\n    \/\/that fall inside of this pixel\n    \/\/this makes the tracking conservative\n    range(i, -2, 2) range(j, -2, 2)\n    {\n        vec2 tpos = pos + vec2(i,j);\n        vec4 data = T(tpos);\n       \n        vec2 X0 = DECODE(data.x) + tpos;\n    \tvec2 V0 = DECODE(data.y);\n    \tvec2 M0 = data.zw;\n       \n        X0 += V0*dt; \/\/integrate position\n\n        \/\/particle distribution size\n        float K = 1.3;\n        \n        vec4 aabbX = vec4(max(pos - 0.5, X0 - K*0.5), min(pos + 0.5, X0 + K*0.5)); \/\/overlap aabb\n        vec2 center = 0.5*(aabbX.xy + aabbX.zw); \/\/center of mass\n        vec2 size = max(aabbX.zw - aabbX.xy, 0.); \/\/only positive\n        \n        \/\/the deposited mass into this cell\n        float m = M0.x*size.x*size.y\/(K*K); \n        \n        \/\/add weighted by mass\n        X += center*m;\n        V += V0*m;\n      \n        \/\/add mass\n        M += m;\n    }\n    \n    \/\/normalization\n    if(M != 0.)\n    {\n        X \/= M;\n        V \/= M;\n    }\n    \n    \/\/initial condition\n    if(iFrame < 1)\n    {\n        X = pos;\n        V = vec2(0.);\n        M = 1e-6;\n    }\n    \n    X = clamp(X - pos, vec2(-0.5), vec2(0.5));\n    U = vec4(ENCODE(X), ENCODE(V), M, 0.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"void mainImage( out vec4 U, in vec2 pos )\n{\n    ivec2 p = ivec2(pos);\n        \n    vec4 data = T(pos); \n    vec2 X = DECODE(data.x) + pos;\n    vec2 V = DECODE(data.y);\n    float M = data.z;\n    \n    if(M != 0.) \/\/not vacuum\n    {\n        \/\/Compute the SPH force\n        vec2 F = vec2(0.);\n        vec3 avgV = vec3(0.);\n        range(i, -2, 2) range(j, -2, 2)\n        {\n            vec2 tpos = pos + vec2(i,j);\n            vec4 data = T(tpos);\n\n            vec2 X0 = DECODE(data.x) + tpos;\n            vec2 V0 = DECODE(data.y);\n            float M0 = data.z;\n            vec2 dx = X0 - X;\n            \n            float avgP = 0.5*M0*(Pressure(M) + Pressure(M0)); \n            F -= 0.5*GS(1.*dx)*avgP*dx;\n            avgV += M0*GS(1.*dx)*vec3(V0,1.);\n        }\n        avgV.xy \/= avgV.z;\n\n        \/\/slime mold sensors\n        float ang = atan(V.y, V.x);\n        vec4 dir = sense_dis*vec4(Dir(ang+sense_ang), Dir(ang - sense_ang));\n        vec2 sd = vec2(P(X + dir.xy).z, P(X + dir.zw).z);\n        F += sense_force*(Dir(ang+PI*0.5)*sd.x + Dir(ang-PI*0.5)*sd.y); \n\n        \/\/integrate velocity\n        V += F*dt\/M;\n        \n        \/\/acceleration for fun effects\n        V *= 1. + acceleration;\n        \n        \/\/velocity limit\n        float v = length(V);\n        V \/= (v > 1.)?1.*v:1.;\n    }\n    \n    \/\/mass decay\n    M *= 0.99;\n    \n    \/\/input\n    if(iMouse.z > 0.)\n    \tM = mix(M, 0.5, GS((pos - iMouse.xy)\/13.));\n    else\n        M = mix(M, 0.5, GS((pos - R*0.5)\/13.));\n    \n    \/\/save\n    X = clamp(X - pos, vec2(-0.5), vec2(0.5));\n    U = vec4(ENCODE(X), ENCODE(V), M, 0.);\n}","name":"Buffer B","description":"","type":"buffer"}]}}