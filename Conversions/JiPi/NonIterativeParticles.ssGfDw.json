{"Shader":{"ver":"0.1","info":{"id":"ssGfDw","date":"1658291892","viewed":149,"name":"Non Iterative Particles ","username":"Plento","description":" A WIP concept in making a ton of individual point particles. Energy is definitely not being conserved properly but so far it looks ok. Use the MOUSE to drag stuff around and press A to zoom in while using the mouse.","likes":14,"published":3,"flags":48,"usePreview":0,"tags":["2d","mouse","experiment","fluid","particles","physics","mass"],"hasliked":0},"renderpass":[{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/*\n    By Cole Peterson (Plento)\n    \n    \n    A WIP experiment in making a ton of individual particles that behave like you'd expect.\n    Still some things to work out but so far Im happy.\n    \n    Cells store mass and velocity.\n    \n    Use the MOUSE to drag stuff around.\n    \n    Press A to zoom while using the mouse.\n    \n*\/\n\n\nvoid zoom(inout vec2 u){\n    u -= iMouse.xy;\n    u *= .6;\n    u += iMouse.xy;\n}\n\nvec3 pal(float t){\n    return 0.5+0.44*cos(vec3(1.4, 1.1, 1.4)*t + vec3(1.1, 6.1, 4.4) + .5);\n}\n\n\/\/ Main color\nvec3 color(vec2 u, vec4 bA){\n    float t = abs(bA.z*2.) + abs(bA.w*4.) + 3.6*length(bA.zw);\n    vec3 col = vec3(clamp(bA.x, 0., 1.)) * pal(t*.2 + .3);\n    return col * 1.6;\n}\n\n\n\/\/ glow effect\nfloat glow(vec2 u){\n    vec2 uv = u \/ R;\n    float blur = 0.;\n\n    const float N = 3.;\n    \n    for(float i = 0.; i < N; i++)\n    {\n        blur += texture(iChannel0, uv + vec2(i*.001, 0.), 1.1).x;\n        blur += texture(iChannel0, uv - vec2(i*.001, 0.), 1.1).x;\n    \n        blur += texture(iChannel0, uv + vec2(0., i*.001), 1.1).x;\n        blur += texture(iChannel0, uv - vec2(0., i*.001), 1.1).x;\n    }\n        \n    return blur \/ N*4.;\n}\n\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = u \/ R;\n        \n    if(KEY(65., 0.) > 0.) zoom(u);\n\n    vec4 bA = A(u);\n\n    vec3 col = color(u, bA);\n\n    float g = glow(u);\n    \n    col += 0.08*g*pal(1.5*length(bA.zw));\n    \n    f = vec4(sqrt(clamp(col, 0.0, 1.0)), 1.0);\n}\n\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R iResolution.xy\n#define m vec2((iMouse.xy - .5*R) \/ R.y)\n#define KEY(v,m) texelFetch(iChannel3, ivec2(v, m), 0).x\n#define ss(a, b, t) smoothstep(a, b, t)\n\n#define A(p) texelFetch(iChannel0,  ivec2(p), 0)\n#define B(p) texelFetch(iChannel1,  ivec2(p), 0)\n#define C(p) texelFetch(iChannel2,  ivec2(p), 0)\n#define D(p) texelFetch(iChannel3,  ivec2(p), 0)\n\n\n\n\/\/ Add the force coming from the side\n#define SIDE_FORCE\n\n\n\n\/\/ Constants\nconst vec2 UP = vec2(0., 1.);\nconst vec2 DOWN = vec2(0., -1.);\nconst vec2 LEFT = vec2(-1., 0.);\nconst vec2 RIGHT = vec2(1., 0.);\nconst vec2 UPL = vec2(-1., 1.);\nconst vec2 DOWNL = vec2(-1., -1.);\nconst vec2 UPR = vec2(1., 1.);\nconst vec2 DOWNR = vec2(1., -1.);\n\n\n\n\/\/ https:\/\/www.shadertoy.com\/view\/4djSRW\nvec2 hash22(vec2 p){\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat hash12(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/*\n    Buffer A: \n    \n    Track cell's mass and velocity.\n    \n    4 main things hapening.\n    \n    1. Add mass to cell proportional  to: (change in mass) * (dot(mass gradient direction, cell  velocity))\n    2. Subtract mass from cell proportional to: (average mass of neighborhood) * (dot(mass gradient direction, cell  velocity))\n    3. Apply acceleration to cell velocity: CellVelocity += (VelocityAverage - CellVelocity) \n    4. Apply a gravity ish force to cell velocity. This \"de snakes\" the particles and clumps them into points.\n    \n    x = mass\n    zw = velocity\n    \n*\/\n\n\n \n\/\/ Neighborhood averages\nvec4 Grad(vec2 u)\n{\n    float h = 1.;\n    \n    vec4 up = A((u + vec2(0., h)));\n    vec4 down = A((u - vec2(0., h)));\n    vec4 left = A((u - vec2(h, 0.)));\n    vec4 right = A((u + vec2(h, 0.)));\n    \n    \n    vec4 upl = A((u + UPL));\n    vec4 downl = A((u + DOWNL));\n    vec4 upr = A((u + UPR));\n    vec4 downr = A((u + DOWNR));\n    \n    vec4 avg = (up+down+left+right+upr+downr+upl+downl) \/ 8.;\n    return avg;\n}\n\n\/\/ Direction of most mass relative to cell\nvec2 massGrad(vec2 u)\n{\n    float up = A((u + UP)).x;\n    float down = A((u + DOWN)).x;\n    float left = A((u + LEFT)).x;\n    float right = A((u + RIGHT)).x;\n\n    float upl = A((u + UPL)).x;\n    float downl = A((u + DOWNL)).x;\n    float upr = A((u + UPR)).x;\n    float downr = A((u + DOWNR)).x;\n    \n    vec2 cm = vec2(0., 0.);\n    cm += up*UP;\n    cm += down*DOWN;\n    cm += left*LEFT;\n    cm += right*RIGHT;\n    \n    cm += upl*UPL;\n    cm += downl*DOWNL;\n    cm += upr*UPR;\n    cm += downr*DOWNR;\n    \n    return cm;\n}\n\n\nvoid mainImage( out vec4 f, in vec2 u ){\n    vec2 uv = vec2(u.xy - 0.5*R.xy)\/R.y;\n    \n    \/\/ bA.x = mass, bA.zw = velocity\n    vec4 bA = A(u);\n    \n    vec4 grad = Grad(u); \/\/ Gradient at point of cell\n    vec2 vAvg = grad.zw; \/\/ Average velocity of surrounding cells\n    vec2 acc = vAvg - bA.zw; \/\/ Cell acceleration\n    acc = clamp(acc, -1., 1.);\n\n    bA = mix(bA, grad, .02); \/\/ Substitute in a little bit of the average\n\n    vec2 mg = massGrad(u); \/\/ Direction relative to current cell of most mass\n\n    float massAvg = grad.x; \/\/ Average surrounding mass\n    float massDif = massAvg - bA.x; \/\/ How fast the mass should be changing\n    \n    \/\/ Add and subtract mass from cell based on how much its moving in the direction of most mass\n    \/\/ and how fast the mass is changing\n    float dp = dot(mg, bA.zw); \/\/ How much the cell is moving toward the center of mass gradient\n    bA.x -= dp*massAvg;\n    bA.x += .999*dp*massDif;\n    \n    \/\/ Apply acceleration\n    bA.zw += acc;\n    \n    \/\/ Apply a gravity ish force (clumps stuff into single points)\n    float r = max(length(mg), 1.);\n    float grav = -(3.5*massAvg*bA.x) \/ (r*r);\n    bA.zw -= (mg)*grav;\n    \n    \/\/ Apply some friction\n    bA.zw -= bA.zw*.0003;\n    \n    \n    \/\/ Add stuff with mouse\n    if(iMouse.z > 0.){\n       vec2 v = (C(u).xy - iMouse.xy);\n       if(length(v) < 100.){\n        \n            float d = length(iMouse.xy-u);\n            float frc = .025*exp2(-d*.025);       \n        \n            bA.zw -= frc * v;    \n            bA.x+=.08*frc;\n        }\n    }\n   \n    \n    #ifdef SIDE_FORCE\n    \/\/ Apple a small force coming from the left and add some mass\n    float sf = .002*ss(R.x, 0., u.x * 0.9);\n    bA.zw += sf*vec2(1., 0.);\n    bA.x += .06*sf;\n    #endif\n   \n    \/\/ Inita\n    if(iFrame < 8){\n        bA = vec4(0);\n        \n        if(hash12(u*343. + 232.) < .1){\n            bA.zw = 12.*(2.*hash22(u*543. + 332.) - 1.);\n            bA.x = hash22(u*543. + 332.).x;\n        }\n    }\n    \n    \n    bA.zw = clamp(bA.zw, -120., 120.);\n    bA.x = clamp(bA.x, 0., 1.);\n   \n    \n    f = bA;\n \n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":259,"channel":0}],"code":"\/\/ Store mouse last pos nothin to see here\nvoid mainImage( out vec4 f, in vec2 u ){\n    f = vec4(iMouse.xy, 0., 0.);\n}","name":"Buffer C","description":"","type":"buffer"}]}}