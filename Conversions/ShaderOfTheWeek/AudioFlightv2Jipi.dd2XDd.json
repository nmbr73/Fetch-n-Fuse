{
 "ver": "0.1",
 "info": {
  "id": "dd2XDd",
  "date": "0",
  "viewed": 0,
  "name": "Audio FlightV2 JiPi",
  "description": "Audio Flight ðŸš€ v2 - >> caution/strobing effects << - seriously in 46 seconds..\n> click and drag <\nmusic Boris Brejcha - Gravity\n(if audio doesn't start - stop, rewind and play)\n",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "audioflightv2"
  ],
  "hasliked": 0,
  "parentid": "7tfyRl",
  "parentname": "Audio Flight v2 (strobes)"
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "4lSXzz",
     "filepath": "https://soundcloud.com/gustav-granath/boris-brejcha-gravity",
     "type": "musicstream",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 0
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "/** \n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    AudioFlight  v2 - music Boris Brejcha - Gravity\n    4/14/22 @byt3_m3chanic\n    \n    Path shader based around @Shane's stuff - he has a ton of amazing ones.\n    https://www.shadertoy.com/view/MlXSWX\n    \n    Music EQ based around @blackle's domain rep tricks\n    \n    Lots of fo\n\n*/\n\n\n#define R           iResolution\n#define T           iTime\n#define M           iMouse\n\n#define PI2         6.28318530718\n#define PI          3.14159265358\n\n#define MINDIST     .0001\n#define MAXDIST     125.\n\n#define r2(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nfloat hash21(vec2 p){  return fract(sin(dot(p, vec2(27.609, 57.583)))*43758.5453); }\nfloat sampleFreq(float freq) {\n    return texture(iChannel0, vec2(freq, 0.1)).x;\n}\n\n//http://mercury.sexy/hg_sdf/\nfloat pMod(inout float p, float size) {\n\tfloat c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5, size) - size*0.5;\n\treturn c;\n}\nvec2 pMod(inout vec2 p, float size) {\n\tvec2 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5, size) - size*0.5;\n\treturn c;\n}\nvec3 pMod(inout vec3 p, float size) {\n\tvec3 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5, size) - size*0.5;\n\treturn c;\n}\nfloat pModPolar(inout vec2 p, float repetitions) {\n    float angle = 2.*PI/repetitions;\n    float a = atan(p.y, p.x) + angle/2.,\n          r = length(p),\n          c = floor(a/angle);\n    a = mod(a,angle) - angle/2.;\n    p = vec2(cos(a), sin(a))*r;\n    if (abs(c) >= (repetitions/2.)) c = abs(c);\n    return c;\n}\nfloat vmax(vec2 v) {\treturn max(v.x, v.y);\t\t\t\t\t\t}\nfloat vmax(vec3 v) {\treturn max(max(v.x, v.y), v.z);\t\t\t\t}\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax(min(d, vec3(0)));\n}\nfloat fBox2(vec2 p, vec2 b) {\n\tvec2 d = abs(p) - b;\n\treturn length(max(d, vec2(0))) + vmax(min(d, vec2(0)));\n}\n//@iq\nfloat sdCap( vec3 p, float h, float r ){\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n// @Shane - https://www.shadertoy.com/view/MlXSWX\nvec2 path(in float z){ \n    vec2 p1 =vec2(2.35*sin(z * .125)+2.38*cos(z * .25), 3.5*cos(z * .0945));\n    vec2 p2 =vec2(3.2*sin(z * .19), 4.31*sin(z * .125)-2.38*cos(z * .115));\n    return (p1 - p2)*.3;\n}\n\n// globals\nfloat time,tm,travelSpeed;\n\n// globals and stuff\nfloat glow,iqd,flight,beams,gcolor,objglow,offWobble,boxsize;\nfloat ga,sa,slp;\nvec3 g_hp,s_hp;\nmat2 r4,r5;\n\nconst vec3 cxz = vec3(3.15,4.75,3.);\nconst float scale = 3.0;\n\nvec2 fragtail(vec3 pos) {\n    float ss=1.15;\n    float r = 1e5;\n    \n    for (int i = 0;i<2;i++) {\n        pos=abs(pos);\n        if ( pos.x- pos.y<0.) pos.yx = pos.xy;\n        if ( pos.x- pos.z<0.) pos.zx = pos.xz;\n        if ( pos.y- pos.z<0.) pos.zy = pos.yz;\n        \n        pos.x=scale * pos.x-cxz.x*(scale-1.);\n        pos.y=scale * pos.y-cxz.y*(scale-1.);\n        pos.z=scale * pos.z;\n        \n        if (pos.z>0.5*cxz.z*(scale-1.)) pos.z-=cxz.z*(scale-1.);\n\n        r = fBox2(pos.xy,vec2(5,1.5+.25*sin(pos.x*5.)))-.0015;\n        ss*=1./scale;\n    }\n\n    return vec2(r*ss,1.);\n}\n\n//@blackle domain rep https://www.shadertoy.com/view/Wl3fD2 \nvec2 edge(vec2 p) {\n    vec2 p2 = abs(p);\n    if (p2.x > p2.y) return vec2((p.x < 0.) ? -1. : 1., 0.);\n    else             return vec2(0., (p.y < 0.) ? -1. : 1.);\n}\nfloat ths= 13.25;\n// scene map\nvec2 map (in vec3 p, float sg) {\n  \n    vec2 res = vec2(100.,-1.);\n    float msize = 7.25;\n    \n    // set path(s) vector(s)\n    vec2 tun = p.xy - path(p.z);\n    vec3 q = vec3(tun,p.z);\n    vec3 o = vec3(tun+vec2(0.,.0),p.z+travelSpeed+4.25);\n   \n    vec3 s = q;\n\n    o.zx*=r5;\n    o.yz*=r4;\n    o = abs(o)-(offWobble*.25);\n    float obj = fBox(o,vec3(.15*offWobble))-.015;\n    if(obj<res.x ) {\n        res = vec2(obj,11.);\n        g_hp=o;\n    }\n    \n    // mods and vectors\n    float pid = floor((q.z+(msize/2.))/msize);\n    float trackmod = mod(pid,18.);\n    float deg = trackmod<12. ? trackmod<6. ? 4. : 6. : 10.;\n    pModPolar(q.xy,deg);\n    pModPolar(s.xy,deg*.5);\n    \n    vec3 r =s;\n    vec3 fs=s-vec3(2.85,0,0);\n    r = vec3(abs(r.x),abs(r.y),r.z);\n\n    // audio bards\n    fs.z*=2.;\n    vec2 center = floor(fs.xz) + .5;\n    vec2 neighbour = center + edge(fs.xz - center);\n\n    float chs = floor(center.y);\n    float bmod = mod(chs,16.);\n\n    float height = (sampleFreq(bmod*.0465));\n    height=smoothstep(.001,1.,height);\n    \n    ga=height;\n    float ids = pMod(s.z,msize);\n    vec3 qid = pMod(q,msize);\n    float ld = mod(ids,6.);\n    float lq = mod(ids,2.);    \n\n    iqd=qid.x;\n\n    float zprs= mod(chs, tm <8.? tm <4.? tm <4.? 2.: 2.: 5.: floor(height*1.45));\n\n    float d4a = length(r.xy-vec2(2.5,1.75))-.1;\n    float d4 =  length(r.xy-vec2(2.5,1.75))-.04+.027+.027*sin(r.z-time*4.5);\n    if(d4<res.x ) {\n        res = vec2(d4,12.);\n        g_hp=p;\n    }\n   \n    // fractal\n    vec2 d1 = fragtail(q);\n    d1.x = max(d1.x,-d4a);\n \n    s.z=abs(s.z);\n    float blt = sdCap(s-vec3(2.45,-.58,2.725),1.16 ,.015);\n    if(lq<2.) d1.x = min(blt,d1.x);\n    if(d1.x<res.x) {\n        res = d1.xy;\n        g_hp = p;\n    }\n    \n    float me =   fBox(fs-vec3(0,0,center.y),   vec3(.05,.150+height,.25));\n    float next = fBox(fs-vec3(0,0,neighbour.y),vec3(.05,.001+height,.25));\n    float dlt = min(me, next);\n    if(dlt<res.x) {\n        //float mid= zprs<4.? zprs<3.? zprs<2.? 3. : 4. : 4.  : 3.;\n        res = vec2(dlt,4.);//tm <8. ? mid : 4.);\n        g_hp = p;\n    }\n\n    if(sg==1.)beams += .0001/(.000003+d4*d4);\n    if(sg==1.&&lq<1.)flight += .00025/(.0000001+blt*blt);\n    if(sg==1.&&zprs<.1)glow += .00015/(.000002+dlt*dlt);\n    if(sg==1.&&tm<ths)objglow += .0005/(.0005+obj*obj);\n    \n    \n    return res;\n}\n\nvec2 marcher(vec3 ro, vec3 rd, int maxstep, float sg){\n    float d =  0.,\n          m = -1.;\n        for(int i=0;i<maxstep;i++){\n            vec3 p = ro + rd * d;\n            vec2 t = map(p,sg);\n            if(abs(t.x)<d*MINDIST||d>MAXDIST)break;\n            d += i<42? t.x*.35 : t.x;\n            m  = t.y;\n        }\n    return vec2(d,m);\n}\n\nvec3 normal(vec3 p, float t) {\n    float e = MINDIST*t;\n    vec2 h = vec2(1,-1)*.5773;\n    return normalize( \n        h.xyy*map( p + h.xyy*e,0.).x + \n        h.yyx*map( p + h.yyx*e,0.).x + \n        h.yxy*map( p + h.yxy*e,0.).x + \n        h.xxx*map( p + h.xxx*e,0.).x );\n}\n\n//iq of hsv2rgb\nvec3 hsv2rgb( in vec3 c ) {\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 O, in vec2 F ) {\n    // precal\n    time = iTime;\n    tm = mod(time*.3, 18.);\n    travelSpeed = (time * 5.);\n    \n    offWobble = 1.5+1.15*sin(tm+time*.1);\n    \n    r4 =r2(time);\n    r5 =r2(time);\n    \n    // pixel screen coordinates\n    vec2 uv = (F.xy - R.xy*0.5)/max(R.x,R.y);\n    vec3 C = vec3(0.),\n         FC = vec3(.03);\n\n    float crop = clamp((-.05)+(T*.05),0.,.18);\n    if(uv.y<crop&&uv.y>-crop){\n    vec3 lp = vec3(0.,0.,0.-travelSpeed);\n    vec3 ro = vec3(0.,0,.15);\n\n    // mouse\n    float x = M.xy==vec2(0) || M.z<0. ? 0.:(M.y/R.y*1.-.5)*PI;\n    float y = M.xy==vec2(0) || M.z<0. ? 0.:-(M.x/R.x*2.-1.)*PI;\n\n    ro.zy*=r2(x);\n    \n    ro +=lp; \n\n    lp.xy += path(lp.z);\n    ro.xy += path(ro.z);\n\n    // set camera\n    vec3 f=normalize(lp-ro),\n         r=normalize(cross(vec3(0,1,0),f)),\n         u=normalize(cross(f,r)),\n         c=ro+f*.183,\n         i=c+uv.x*r+uv.y*u,\n        rd=i-ro;\n\n    // center tracking\n        rd.xy = r2( (.2*sin(time*.3))-path(lp.z).x/ 24. )*rd.xy;\n        rd.xz = r2( y-path(lp.z+1.).y/ 14. )*rd.xz;\n\n    // march\n    vec2 t = marcher(ro,rd, 164,1.);\n    float d = t.x,\n          m = t.y;\n    s_hp=g_hp;\n    \n    // if visible \n    if(d<MAXDIST)\n    {\n        vec3 p = ro+rd*d;\n\n        vec3 n = normal(p,d);\n        vec3 lpos = vec3(0,0,.25)-p;\n        lpos +=lp;\n        lpos.xy += path(lpos.z);\n        vec3 l = normalize(lpos);\n        \n        float diff = clamp(dot(n,l),.01,1.);\n\n        float spec = pow(max(dot(reflect(l,n),rd),.01),24.);\n\n        vec3 h = m==11.? vec3(.005): vec3(1.0);\n        if(m==3.||m==4.) h = vec3(.012);\n        if(tm>ths) {\n            C =(h * diff + spec);\n        } else {\n            if(m==3.||m==4.) C =(hsv2rgb(vec3(s_hp.z*.01,.8,.6))  * diff);\n        }\n        \n    } \n    \n    if(tm>ths) {\n        if(mod(T,.1)<.05)FC=vec3(.8);\n    }else{\n\n        C += abs(glow*.7)*hsv2rgb(vec3(s_hp.z*.01,.8,.6));\n        C += abs(objglow*.65)*vec3(1,1,1);\n    }\n    C = mix( C, FC, 1.-exp(-0.000075*t.x*t.x*t.x));\n    C += abs(beams*.65)*hsv2rgb(vec3(s_hp.z*.025,.8,.6));\n    C += abs(flight*.75)*vec3(.5,1,.2);\n    }\n    \n    \n    float px = 1./R.x;\n\n            \n    float d1 = fBox2(uv+vec2(-.485,.2675),vec2(.005))-.002;\n    d1=smoothstep(px,-px,d1);\n    C=mix(C,vec3(0.212,0.671,0.576),d1);\n    \n    d1 = fBox2(uv+vec2(-.465,.2675),vec2(.005))-.002;\n    d1=smoothstep(px,-px,d1);\n    C=mix(C,vec3(0.757,0.686,0.341),d1);\n    \n    d1 = fBox2(uv+vec2(-.445,.2675),vec2(.005))-.002;\n    d1=smoothstep(px,-px,d1);\n    C=mix(C,vec3(0.882,0.459,0.867),d1);\n    \n    C=pow(C, vec3(0.4545));\n    O = vec4(C,1.0);\n}\n",
   "name": "Image",
   "description": "",
   "type": "image"
  }
 ]
}