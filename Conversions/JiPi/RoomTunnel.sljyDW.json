{"Shader":{"ver":"0.1","info":{"id":"sljyDW","date":"1649727368","viewed":66,"name":"room tunnel","username":"jorge2017a2","description":"room tunnel","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["roomtunnel"],"hasliked":0},"renderpass":[{"inputs":[{"id":3,"src":"\/media\/a\/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/----------image\n\/\/por jorge2017a2-\n#define MAX_STEPS 100\n#define MAX_DIST 110.\n#define MIN_DIST 0.001\n#define EPSILON 0.001\n#define Ka 0.5\n#define Kd 0.4\n\/\/room tunnel---11-abril-2022\n\/\/gracias a la comunidad de Shadertoy por su Informacion \n\/\/y a IQ por compartir su conocimieto :)\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material);\nvec3 getMaterial( vec3 pp, float id_material);\nvec3 light_pos1;  vec3 light_color1 ;\nvec3 light_pos2;  vec3 light_color2 ;\n\n\/\/operacion de Union  por FabriceNeyret2\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\nfloat sdBox( vec3 p, vec3 b )\n\t{ vec3 d = abs(p) - b;   return length(max(d,0.0))+ min(max(d.x,max(d.y,d.z)),0.0); }\nfloat sdCylinderXY( vec3 p, vec2 h )\n\t{ vec2 d = abs(vec2(length(p.xy),p.z)) - h; return min(max(d.x,d.y),0.0) + length(max(d,0.0)); }\n\nfloat Intersect(float distA, float distB) { return max(distA, distB);}\nfloat Union(float distA, float distB)  { return min(distA, distB);}\nfloat Difference(float distA, float distB) { return max(distA, -distB);}\n\n\/\/ object transformation\nvec3 rotate_x(vec3 p, float phi)\n{   float c = cos(phi);\tfloat s = sin(phi);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\nvec3 rotate_y(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x);\n}\nvec3 rotate_z(vec3 p, float phi)\n{\tfloat c = cos(phi);\tfloat s = sin(phi);\n\treturn vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{ vec3 q = abs(p);\n  return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nvec2 GetDist(vec3 p  ) \n{\tvec2 res= vec2(9999.0, -1.0); \n    vec3 p0=p;\n\n\t p.y=p.y-11.0;\n    vec3 prep1=p;\n    vec3 prep2=p;\n    vec3 prep3=p;\n    prep1.z= opRep1D(prep1.z,24.0 );\n    prep2.z= opRep1D(prep2.z,55.0 );\n    prep3.z= opRep1D(prep3.z,30.0 );\n    \n    \n    vec3 pos;\n    float d0= sdBox( prep2, vec3(35.0,25.0,9.0) ); \/\/bloque 1\n    \/\/---plataforma\n    float d0a= sdBox( prep1-vec3(0.0,-12.5,-8.0), vec3(30.,2.5,20.0) ); \/\/bloque 1\n    float d0b= sdBox( prep1-vec3(0.0,-11.5,-8.0), vec3(10.,2.0,21.0) ); \/\/bloque 2\n    d0a=Difference(d0a, d0b);\n    \n    float d1a= sdCylinderXY(prep2, vec2(10.0,10.0) );  \/\/tubo ext\n    float d1b= sdCylinderXY(prep2, vec2(9.0,11.0) );  \/\/tubo int\n    float dif1=Difference(d1a, d1b);\n    d0=Difference(d0, d1a);\n    pos=vec3(0.0,0.0,10.0);\n    float d2a= sdCylinderXY(prep2-pos, vec2(10.0,1.0) ); \/\/tubo ch,ext\n    float d2b= sdCylinderXY(prep2-pos, vec2(8.0,1.5) ); \/\/ tubo ch,int\n    float dif2=Difference(d2a, d2b);\n    float d3=sdTriPrism(prep3-vec3(0.0,-12.0,5.0), vec2(5.0,20.0) );\n    \n    res =opU2(res, vec2(dif1,100.0));\n    res =opU2(res, vec2(dif2,100.0));\n    res =opU2(res, vec2(d0,100.0));\n    res =opU2(res, vec2(d0a,100.0));\n    res =opU2(res, vec2(d3,101.0));\n    return res;\n}\n\nvec3 GetNormal(vec3 p)\n{   float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy).x,GetDist(p-e.yxy).x,GetDist(p-e.yyx).x);\n    return normalize(n);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, int PMaxSteps)\n{   vec3 p;\n    vec2 hit, object=vec2(0.1,0.0);\n    for(int i=0; i <= PMaxSteps; i++) \n    { p = ro + rd*object.x;\n      hit = GetDist(p);\n      object.x += hit.x;\n      object.y = hit.y;\n      if (abs(hit.x) < EPSILON || object.x > MAX_DIST) break;\n    }    \n    return object;\n}\n\n\nfloat getSoftShadow(vec3 p, vec3 lightPos) {\n    float res = 9999.0;\n    float dist = 0.01;\n    float lightSize = 0.03;\n    for (int i = 0; i < MAX_STEPS; i++) {\n      float hit = GetDist(p + lightPos * dist).x;\n      res = min(res, hit \/ (dist * lightSize));\n      dist += hit;\n      if (hit < 0.0001 || dist > 60.0) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat occlusion(vec3 pos, vec3 nor)\n{   float sca = 2.0, occ = 0.0;\n    for(int i = 0; i < 10; i++) {    \n      float hr = 0.01 + float(i) * 0.5 \/ 4.0;\n      float dd = GetDist(nor * hr + pos).x;\n      occ += (hr - dd)*sca;\n      sca *= 0.6;\n    }\n    return clamp( 1.0 - occ, 0.0, 1.0 );    \n}\n\nvec3 lightingv3(vec3 normal,vec3 p, vec3 lp, vec3 rd, vec3 ro,vec3 lightColor, float t) \n{   vec3 lightPos=lp;\n    vec3 worldPos = p;\n    vec3 V = -rd;\n    vec3 N = normal;\n    vec3 L = normalize (lightPos - worldPos);\n    vec3 R = reflect (-L, N);\n\n    float lightDist = max(length(L), .001);\n    float atten=1.0 \/ (1.0 + lightDist * 0.125 + lightDist * lightDist * .05);\n    L \/= (lightDist*atten);\n\n    float shadow = getSoftShadow(worldPos, L);\/\/ shadows\n        \n    float occ = occlusion(worldPos, N);\/\/ occ\n    vec3 ambient = Ka + Ka * dot(normal, vec3(0., 1., 0.))*lightColor;\n    ambient*=0.5;\n\n    vec3 fresnel =  lightColor *  pow(clamp(1.0 + dot(rd, N), 0.0, 1.0), 2.0);;\n    float diff= clamp(dot(N, L), 0.0, 1.0);\n    vec3 diffuse =  lightColor * diff;\n    float shininess=10.0;\n    float specular    = pow(max(dot(R, V), 0.0), shininess);\n\n    vec3 back = 0.5 * lightColor * clamp(dot(N, -L), 0.0, 1.0); \/\/ back\n    vec3 colOut = occ*lightColor*(ambient+diffuse*shadow+.25 +back) + vec3(.7,.9,1)*specular*specular;\n    return colOut;\n}\n\nvec3 getColorTextura( vec3 p, vec3 nor,  int i)\n{\tif (i==100 )\n    { vec3 col=tex3D(iChannel0, p\/32., nor); return col*2.0; }\n\tif (i==101 ) { return tex3D(iChannel0, p\/32., nor)+0.2; }\n}\n\nvec3 render_sky_color(vec3 rd)\n{   float t = (rd.x + 1.0) \/ 2.0;\n    vec3 col= vec3((1.0 - t) + t * 0.3, (1.0 - t) + t * 0.5, (1.0 - t) + t);\n    vec3  sky = mix(vec3(.0, .1, .4)*col, vec3(.3, .6, .8), 1.0 - rd.y);\n    return sky;\n}\n\n\nvec3 GetMaterial(vec3 p,  vec3 nor, vec3 ro,  vec3 rd, int id_color)\n{  \tvec3 colobj; \n    if (id_color>=100 ){ return  getColorTextura( p, nor,id_color); }\n}\n\nvec3 linear2srgb(vec3 c) \n{ return mix(12.92 * c,1.055 * pow(c, vec3(1.0\/1.8)) - 0.055, step(vec3(0.0031308), c)); }\n\nvec3 exposureToneMapping(float exposure, vec3 hdrColor) \n{ return vec3(1.0) - exp(-hdrColor * exposure); }\n\nvec3 ACESFilm(vec3 x)\n{   float a,b,c,d,e;\n    a = 2.51; b = 0.03; c = 2.43;d = 0.59; e = 0.14;\n    return (x*(a*x+b))\/(x*(c*x+d)+e);\n}\n\nvec3 Render(vec3 ro, vec3 rd)\n{  vec3 col = vec3(0);\n  vec3 p;\n     vec2 hit=RayMarch(ro,rd, MAX_STEPS);\n      if(hit.x<MAX_DIST)\n       {   p = (ro + rd * hit.x );\n        vec3 nor=GetNormal(p);\n        vec3 colobj;\n        colobj=GetMaterial( p, nor, ro, rd,  int(hit.y));\n        vec3 result;\n         result= lightingv3(nor, p,light_pos1, rd,ro,colobj,hit.x)*light_color1;\n        result+= lightingv3(nor, p,light_pos2,rd, ro,colobj,hit.x)*light_color2;\n        col= result\/2.0;\n        col= (ACESFilm(col)+linear2srgb(col)+col+ exposureToneMapping(3.0, col))\/4.0 ;\n        \/\/if(5.0*sin(1.0-iTime)>0.0)\n        \/\/{ float sum=(col.x+col.y+col.z)\/3.0; col=vec3(sum);} \/\/grises\n        \/\/if(hit.y!=101.0)\n        { float sum=col.x*0.299+col.y*0.587+col.z*0.11; col=vec3(sum);} \/\/grises\n        \/\/Y'=0.299R'+0.587G'+0.114B'\n    }\n    \/\/else if(hit.x>MAX_DIST)\n    \/\/col= render_sky_color(rd);\n   return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  vec2 uv = (fragCoord-.5*iResolution.xy)\/iResolution.y;\n    float t,t0;t0=iTime;\n    t=mod(t0*10.0,1000.0);\n \tlight_pos1= vec3(-40.0, 80.0, -20.); light_color1=vec3( 1.0,1.0,1.0 );\n \tlight_pos2= vec3( 40.0, 80.0, -25.0 ); light_color2 =vec3( 1.0,1.0,1.0 );\n   vec3 ro=vec3(0.0+4.0*sin(t0),10.0,t);\n   vec3 rd=normalize( vec3(uv.x,uv.y,1.0));\n   float ang=0.58*cos(180.-t0*0.5);\n   rd= rotate_y(rd, ang);\n    light_pos1+=ro;\n    light_pos2+=ro;\n    vec3 col= Render( ro,  rd);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\/\/-------common\n#define PI 3.14159265\n\/\/\/Gracias a Shane...16-jun-2020\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n  n = max(n*n - .2, .001); \/\/ max(abs(n), 0.001), etc.\n  n \/= dot(n, vec3(1)); \n  vec3 tx = texture(tex, p.yz).xyz;\n  vec3 ty = texture(tex, p.zx).xyz;\n  vec3 tz = texture(tex, p.xy).xyz;\n  return mat3(tx*tx, ty*ty, tz*tz)*n; \n}\n\n","name":"Common","description":"","type":"common"}]}}