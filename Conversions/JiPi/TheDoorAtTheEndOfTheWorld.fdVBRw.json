{"Shader":{"ver":"0.1","info":{"id":"fdVBRw","date":"1657858634","viewed":67,"name":"The door at the end of the world","username":"leon","description":"final boss vibes","likes":11,"published":3,"flags":32,"usePreview":0,"tags":["fire","smoke","plastic"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":14854,"src":"\/media\/a\/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","ctype":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\n\/\/ The door at the end of the world\n\/\/ revisiting Smell of Burning Plastic https:\/\/www.shadertoy.com\/view\/7dyBRm\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord\/iResolution.xy;\n    vec3 blue = texture(iChannel1, fragCoord\/1024.).rgb;\n    vec3 color = vec3(0);\n    \n    \/\/ masks\n    float shade = texture(iChannel0, uv).r;\n    float flame = pow(shade, 3.);\n    float smoke = pow(shade, .5);\n    float height = flame;\n    \n    \/\/ normal\n    float range = 30.*blue.x;\n    vec3 unit = vec3(range\/iResolution.xy,0);\n    vec3 normal = normalize(vec3(\n        TEX(uv + unit.xz)-TEX(uv - unit.xz),\n        TEX(uv - unit.zy)-TEX(uv + unit.zy),\n        height));\n        \n    \/\/ lighting\n    vec3 tint = .5+.5*cos(vec3(1,2,3)-flame*5.-4.);\n    vec3 dir = normalize(vec3(0,-.5,0.5));\n    float light = dot(normal, dir)*.5+.5;\n    light = pow(light,.5);\n    light *= (uv.y+.5); \n    color += tint * flame;\n    color += vec3(.5) * light;\n    color *= smoke;\n    color -= .1*blue.x;\n    color += smoothstep(.1,.0,1.-shade);\n    \n    \/\/ show layers\n    if (iMouse.z > 0.5) {\n        if (iMouse.x < 20.) {\n            if (uv.y < .25) {\n                color = vec3(shade);\n            } else if (uv.y < .5) {\n                color = normal;\n            } else if (uv.y < .75) {\n                color = tint;\n            } else {\n                color = vec3(.5)*light;\n            }\n        }\n    }\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":14854,"src":"\/media\/a\/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","ctype":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\n\/\/ fbm gyroid cyclic noise\nfloat gyroid (vec3 seed) { return dot(sin(seed),cos(seed.yzx)); }\nfloat fbm (vec3 seed) {\n    float result = 0.;\n    float a = .5;\n    for (int i = 0; i < 4; ++i) {\n        result += (gyroid(seed\/a))*a;\n        a \/= 2.;\n    }\n    return result;\n}\n\n\/\/ the fluidish simulacre\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord\/iResolution.xy;\n    vec2 p = (fragCoord-iResolution.xy\/2.)\/iResolution.y;\n    vec3 blue = texture(iChannel1, fragCoord\/1024.).rgb;\n    \n    float dt = iTimeDelta;\n    float current = texture(iChannel0, uv).r;\n    \n    \/\/ shape\n    float shape = abs(max(abs(p.x)-.1, abs(p.y)-.2))-.01;    \n    \n    \/\/ masks\n    float shade = smoothstep(.01,.0,shape);\n    float smoke = pow(uv.y,.5);\n    float flame = 1.-uv.y;\n    float steam = pow(current, 0.2);\n    float cycle = .5 + .5 * sin(iTime-uv.x*3.);\n    \n    vec2 offset = vec2(0);\n    \n    \/\/ bubble animation cycle\n    vec2 pp = fract(p*1.-vec2(.5,iTime*.2))-.5;\n    float lpp = length(pp);\n    float mask = smoothstep(.5,.0,lpp);\n    offset += (-pp)*mask*5.;\n    \n    \/\/ ignit with bubble\n    shade *= .5+.5*mask;\n    \n    \/\/ environment\n    \/*\n    vec2 q = p;\n    float c = .05;\n    q.x += floor(q.y\/c)*.02+.1;\n    q.y = repeat(q.y, c);\n    shape = max(p.y+.22, abs(box(q, vec2(.1,.002))));\n    shape = min(shape, abs(length(p+vec2(0,.2))-.8));\n    shade = min(1., shade+.75*smoothstep(.01,.0,abs(shape)));\n    *\/\n    \n    \/\/ expansion\n    vec4 data = texture(iChannel0, uv);\n    vec3 unit = vec3(2.\/iResolution.xy,0);\n    vec3 normal = normalize(vec3(\n        TEX(uv - unit.xz)-TEX(uv + unit.xz),\n        TEX(uv - unit.zy)-TEX(uv + unit.zy),\n        data.x*data.x*data.x)+.001);\n    offset -= normal.xy * smoke;\n    \n    \/\/ turbulence\n    vec3 seed = vec3(p*4.,p.y+iTime);\n    float angle = fbm(seed)*6.28*2.;\n    offset += vec2(cos(angle),sin(angle)) * flame;\n    \n    \/\/ energy loss\n    vec4 frame = texture(iChannel0, uv+offset\/iResolution.xy);\n    shade = max(shade, frame.r-dt*.4);\n    fragColor = vec4(shade);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define repeat(p,r) (mod(p,r)-r\/2.)\n#define TEX(uv) texture(iChannel0, uv).r\nmat2 rot (float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\nfloat box (vec2 p, vec2 r) { return max(abs(p.x)-r.x,abs(p.y)-r.y); }","name":"Common","description":"","type":"common"}]}}