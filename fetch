#!/usr/bin/env python3

import os
import io
import re
import requests
import json
import yaml
import argparse
from dotenv import load_dotenv


def convert(code):

  code=re.sub(r'([^\w])(fragCoord)\.xy([^\w])',r'\1\2\3', code)
  code=re.sub(r'(\w+)\.([xyzw]{2,4})',r'swi\2(\1)', code)
  code=re.sub(r'(^\w+)texture(\s*)\(',r'\g<1>_tex2DVecN\2(',code)

  for s in [
      # prefix, suffix, fuctions
      [ '' ,   '_f', 'mod'], # '_f' dahinter, um auf eigene Implementierung umzubiegen
      [ '_',   'f' , 'pow|log2|log10|log|copysign|saturate|sqrt|trunc|hypot|cos|sin|cospi|sinpi|tan|acos|asinh|atanh|cosh|sinh|tanh|cbrt|lgamma|tgamma|rsqrt|exp|exp2'],
      [ '_',   '2f', 'atan'],
      [ '_f',  'f' , 'max|min|dim'],
      [ '_' ,  ''  , 'ceil|floor|round|mix'],
      [ '_f',  ''  , 'maf|divide|recip|abs|remainder']
    ]:
    code=re.sub(r'([^\w])('+s[2]+r')(\s*)\(',r'\g<1>'+s[0]+r'\g<2>'+s[1]+r'\3(', code)


  code=re.sub(r'([ \t\(,\+\-\*=]+)(\.[0-9]+f{0,1})([ \t\),\+\-\*=;]+)',r'\g<1>0\2\3', code)
  code=re.sub(r'([ \t\(,\+\-\*=]+)(\.[0-9]+f{0,1})([ \t\),\+\-\*=;]+)',r'\g<1>0\2\3', code)
  code=re.sub(r'([ \t\(,\+\-\*=]+)([0-9]+\.)([ \t\),\+\-\*=;]+)',r'\1\g<2>0\3', code)
  code=re.sub(r'([ \t\(,\+\-\*=]+)([0-9]+\.)([ \t\),\+\-\*=;]+)',r'\1\g<2>0\3', code)
  code=re.sub(r'([ \t\(,\+\-\*=]+)([0-9]+\.[0-9]+)([ \t\),\+\-\*=;]+)',r'\1\2f\3', code)
  code=re.sub(r'([ \t\(,\+\-\*=]+)([0-9]+\.[0-9]+)([ \t\),\+\-\*=;]+)',r'\1\2f\3', code)

  # vecN ... =  -> floatN ... =
  code=re.sub(r'\n(\s*)vec([234])(\s+[_A-Za-z][_A-Za-z0-9]*\s*=)',r'\n\1float\2\3', code)
  code=re.sub(r'\n(\s*)const(\s+)vec([234])(\s+[_A-Za-z][_A-Za-z0-9]*\s*=)',r'\n\1const\2float\3\4', code)

  # vecN(float) -> to_floatN_s(float)
  code=re.sub(r'vec([234])(\s*\(\s*[0-9]+\.[0-9]+f\s*\))',r'to_float\1_s\2', code)

  # versuche floatN_aw zu erwischen - geht aber natuerlich nur sehr bedingt
  code=re.sub(r'vec([34])(\s*\([^,]+,[^,\)]+\))',r'to_float\1_aw\2', code)

  code=re.sub(r'vec([234])(\s*\()',r'to_float\1\2', code)

  # am Schluss alle verbleibenden 'vecN' weghauen:
  code=re.sub(r'([\s\(\)\*\+\-;,=])vec([234])(\s)',r'\1float\2\3', code)


  return code


def check_if_exists(path,id,suffix):

  files=[entry for entry in os.scandir(path) if entry.is_file() and entry.name.endswith(f".{id}.{suffix}")]

  if len(files) < 1:
    return None

  if len(files) > 1:
    raise Exception(f"multiple files matching '{path}*.{id}.{suffix}'")

  return re.sub(r'^(.+)\.'+id+'\.'+suffix+'$',r'\1',files[0].name)



def do_fetch(id,force=False,nocache=False):

  path='./Conversions/'


  url="https://www.shadertoy.com/view/"+id

  fetched_from_cache=False
  json_text=""

  fuse_name=check_if_exists(path,id,'json')

  if fuse_name!=None and not nocache: # os.path.isfile(shaders_path+id+".json") and not nocache:
    print("read from cache")
    with open(path+fuse_name+'.'+id+".json", "r") as f:
      json_text=f.read()
      fetched_from_cache=True

  else:
    print("fetch from shadertoy.com")
    response = requests.get("https://www.shadertoy.com/api/v1/shaders/" +id+"?key="+os.getenv('APIKEY'))

    if response.status_code != 200:
      raise Exception(url+"\nHTTP Error "+str(response.status_code))

    json_text=response.text


  json_data = json.loads(json_text)

  error=json_data.get('Error',None)

  if error!=None:
    raise Exception(url+"\n"+error)




  if 'Shader' in json_data:
     json_data=json_data['Shader']

  info=json_data['info']



  shader_name=info['name']
  if 'username' in info:
    shader_author=info['username']
  else:
    shader_author="N.N."

  shader_description=info['description']


  n=re.sub(r'[^A-Za-z0-9]+','', shader_name)

  if fuse_name!=None:
    pass
  # if n!=fuse_name:
  #    raise Exception(url+"\nfuse name inconsistency")
  else:
    fuse_name=n

  if not fetched_from_cache and not nocache:
    print("write to cache")
    with io.open(path+fuse_name+'.'+id+".json", 'w') as f:
      f.write(json_text)


  fuse_author=os.getenv('AUTHOR')

  fuse_filename='Conversions/'+fuse_name+'.'+id

  if os.path.isfile(fuse_filename+".c") and not force:
    raise Exception(url+"\nconversion already exists (use -f to overwrite)")



  with io.open(fuse_filename+".yaml", 'w', encoding='utf8') as outfile:
      yaml.dump({
        'shader':{
          'id':id,
          'name':shader_name,
          'author':shader_author,
          'url':'https://www.shadertoy.com/view/'+id
        },
        'fuse':{
          'name':fuse_name,
          'author':fuse_author

        }
      },outfile, default_flow_style=False, allow_unicode=True)

  code=""

  assets_exists=False


# for entry in json_data['Shader']['renderpass']:
  for entry in json_data['renderpass']:

    code="\n// ----------------------------------------------------------------------------------\n"+ \
      "// - "+entry['name']+(" "*(79-len(entry['name'])))+"-\n" \
      "// ----------------------------------------------------------------------------------\n"+ \
      "\n\n\n"+entry['code']+"\n\n\n"+code

    inputs=entry.get('inputs',None)

    if inputs!=None and len(inputs)>0:
      buffer_name=re.sub(r'[^A-Za-z0-9_]+','', re.sub(r' ','_', entry['name']))

      if not assets_exists and not os.path.exists(fuse_filename+'.assets'):
          os.makedirs(fuse_filename+'.assets')
          assets_exists = True

      for input in inputs:

          src=None

          if 'src' in input:
            src=input['src']
          elif 'filepath' in input:
            src=input['filepath']


          ctype=None

          if 'ctype' in input:
            ctype=input['ctype']
          elif 'type' in input:
            ctype=input['type']


          if src!=None and ctype!=None:
            filename, suffix = os.path.splitext(src)
            filename=f"{fuse_filename}.assets/{buffer_name}-Channel{input['channel']}-{ctype}{suffix}"

            if not os.path.exists(filename):
              data = requests.get("https://www.shadertoy.com"+src)

              with open(filename, 'wb') as f:
                  f.write(data.content)




  code = code.replace("\t", "    ")
  code = convert(code)
  code = re.sub(r'void\s+mainImage\s*\(', '__KERNEL__ void '+fuse_name+'Kernel(', code)


  with open(fuse_filename+".c", 'w') as f:
     f.write(code)



# ltfXzj - tut's nicht
# td2SDz - tut's
# MlKGWK - hat mehrere Buffer
# lstXRl - hat assets
# Wl3fzM - den will ich als Test dann hiermit mal machen

if not(os.path.isfile(".env")):
  with open(".env", 'w') as f:
     f.write( "AUTHOR=\"\"\n"
              "APIKEY=\"\"\n"
            )
  print(".env file created - please enter your credentials to use")


load_dotenv()



parser = argparse.ArgumentParser(description='Fetch fuse source code.')
# parser.add_argument('-t','--test',action='store_true',help='use existing file to avoid http access')
parser.add_argument('-f','--force',action='store_true',help='overwrite code if it already exists')
parser.add_argument('-nc','--no-cache',action='store_true',help='overwrite code if it already exists')
parser.add_argument('-i','--id', help='shadertoy id as used in the URL', required=True)
args = parser.parse_args()


try:
  do_fetch(args.id,force=args.force,nocache=args.no_cache)
except Exception as e:
  print("ERROR: "+str(e))
