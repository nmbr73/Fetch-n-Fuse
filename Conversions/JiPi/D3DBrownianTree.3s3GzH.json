{"Shader":{"ver":"0.1","info":{"id":"3s3GzH","date":"1567980696","viewed":414,"name":"3D Brownian Tree","username":"mathmasterzach","description":"3D Brownian Tree generation (sorta because there is a bias towards the center. Drag with the mouse to look around. Change the number of balls and reset based on the limits of your computer.","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["3d","simulation","sphere","tree","brownian","dynamic"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/3D Brownian Tree (sorta because there is a bias towards the center)\n\/\/Drag with the mouse to look-around\n\nconst float TAU=2.*acos(-1.);\n\n\/\/Distance between sphere and ray if they intersect, -1 otherwise\nfloat sphereRayDist(vec3 o, vec3 r, vec4 s){\n    vec3 oc = o-s.xyz;\n    float b = dot(oc,r);\n    float c = dot(oc,oc)-s.w*s.w;\n    float t = b*b-c;\n    if( t > 0.0) \n        t = -b - sqrt(t);\n    return t;\n}\n\n\/\/Thanks to iq for this helpful shadow function\nfloat sphereRayShadow(vec3 o,vec3 r,vec4 s,float k){\n    vec3 oc = o - s.xyz;\n    float b = dot( oc, r );\n    float c = dot( oc, oc ) - s.w*s.w;\n    float h = b*b - c;\n    return (b>0.0) ? step(-0.0001,c) : smoothstep( 0.0, 1.0, h*k\/b );\n}\n\n\/\/color palette code from IQ https:\/\/www.shadertoy.com\/view\/ll2GD3\nvec3 pal(float t,vec3 a,vec3 b,vec3 c,vec3 d){\n    return a+b*cos(TAU*(c*t+d));\n}\n\n\/\/render scene with balls\nvec3 trace(vec3 o,vec3 r){\n    int irx=int(iResolution.x);\n    bool hit=false;\n    float md=2e20;\n    vec4 msp=vec4(-1.);\n    for(int i=1;i<=NUM_BALLS;i++){\n        vec4 sphere=SPHERE_RANGE*texelFetch(iChannel0,ivec2(i%irx,i\/irx),0);\n        float d=sphereRayDist(o,r,sphere);\n        if(d<md&&d>=0.){\n        \tmsp=sphere;\n            md=d;\n            hit=true;\n        }\n    }\n    \n    if(hit){\n        vec3 no=o+r*md;\n        vec3 c=pal(msp.w,vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n        vec3 lp=vec3(.1,.1,0);\n        float l;\n        l=dot(normalize(r-lp),normalize(msp.xyz-(o+r*md)));\n        l+=pow(l,32.);\n        r=-normalize(r-lp);\n        no+=r*.001;\n        float shd=1.;\n        for(int i=1;i<=NUM_BALLS;i++){\n        \tvec4 sphere=SPHERE_RANGE*texelFetch(iChannel0,ivec2(i%irx,i\/irx),0);\n            shd*=sphereRayShadow(no,r,sphere,40.);\n        }\n        return c*l*shd;\n    }else{\n        \/\/super lazy stars in the background\n        return vec3(hash13(round(r*100.))>.99);\n    }\n}\n\n\/\/Apply Quaternion Rotation to vec3\nvec3 rot(vec4 q,vec3 r) {return 2.*cross(q.xyz,q.w*r+cross(q.xyz,r));}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord ){\n    vec2 uv=(2.*fragCoord-iResolution.xy)\/iResolution.y;\n    vec3 o = vec3(0.,0.,-1.2*SPHERE_RANGE);\n    vec3 r = normalize(vec3(uv,1.));\n    vec4 t=texelFetch(iChannel1,ivec2(0,0),0);\n    r+=rot(t,r);\n    o+=rot(t,o);\n    fragColor=vec4(trace(o,normalize(r)),1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/Ball Motion\n\n\/\/nudge balls around until they are touching the center structure\n\/\/when they touch the center structure they become part of it\n\/\/ball size is based on distance to center\n\/\/balls have a bias with their random motion to move towards the center\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    int md=int(fragCoord.x+floor(fragCoord.y)*iResolution.x);\n    int irx=int(iResolution.x);\n    float rC=length(texelFetch(iChannel0,ivec2(0),0).xy-iResolution.xy);\n    if(iFrame==0||rC>0.){\n        fragColor=vec4((.5*hash13(vec3(fragCoord,int(iDate.w)))+.5)*normalize(hash33(vec3(fragCoord,int(iDate.w)))-.5),-.02);\n        if(md==1){fragColor=vec4(0.,0.,0.,MAX_SIZE);}\n        if(md==0){fragColor=vec4(iResolution.xy,0.,0.);}\n    }else if(md<=NUM_BALLS&&md>0){\n        float d=2e20;\n        vec4 p=texelFetch(iChannel0,ivec2(fragCoord),0).xyzw;\n        if(p.w>0.){\n        \tfragColor=p;return;\n        }\n        p.xyz+=p.w*(hash33(vec3(fragCoord,iFrame+int(iDate.w)))-.5);\n        \/\/contain within range\n        if(length(p.xyz)>1.){p.xyz=normalize(p.xyz);}\n        p.xyz*=.999;\n        p.w=-MAX_SIZE\/(((MAX_SIZE\/MIN_SIZE)-1.)*pow(length(p.xyz),2.)+1.);\n        \/\/ball tests\n        for(int i=1;i<=NUM_BALLS;i++){\n            vec4 s=texelFetch(iChannel0,ivec2(i%irx,i\/irx),0);\n            \/\/if sign is negative don't care about collision\n            \/\/negative sign means the ball is not added to the structure yet\n            \/\/also handles self check with the 0\n            d=min(d*sign(s.w),length(p.xyz-s.xyz)-abs(s.w))*sign(s.w);\n        }\n        \n        \/\/did it collide?\n        if(d<abs(p.w)){\n            fragColor=vec4(p.xyz,abs(p.w));\n        }else{\n            fragColor=p;\n        }\n    }else if(md==0){\n        fragColor=vec4(iResolution.xy,0.,0.);\n    }else{\n    \tfragColor=vec4(-1.);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const int NUM_BALLS=1000;\/\/change this to whatever your computer can handle\nconst float SPHERE_RANGE=5.;\n\nconst float MIN_SIZE=.01;\nconst float MAX_SIZE=.1;\n\n\/\/Hashes from David Hoskins at https:\/\/www.shadertoy.com\/view\/4djSRW\nfloat hash13(vec3 p3){\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash33(vec3 p3){\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/Camera Rotation, Click And Drag With Velocity\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    if(iFrame==0){\n        fragColor=vec4(0.,0.,0.,1.);\n        \/\/initialize velocity\n        if(fragCoord.x>1.&&fragCoord.x<3.&&fragCoord.y<1.){\n        \tfragColor=vec4(.08,.02,0.,0.);\n        }\n    }else{\n        if(fragCoord.x<1.&&fragCoord.y<1.){\n            vec4 p=texelFetch(iChannel0,ivec2(0),0);\n            vec4 v=texelFetch(iChannel0,ivec2(1,0),0)\/3.;\n            vec2 rx = vec2( sin(v.x\/2.),cos(v.x\/2.));\n   \t\t\tvec2 ry = vec2(-sin(v.y\/2.),cos(v.y\/2.));\n            \/\/Quaternion multiplication simplification for basis elements\n            vec4 d=vec4(-rx.y*ry.y,rx.x*ry.x,-rx.x*ry.y,rx.y*ry.x);\n            \/\/Full Quaternion multiplication\n            fragColor = normalize(vec4(d.x*p.x-d.y*p.y-d.z*p.z-d.w*p.w,\n                                       d.x*p.y+d.y*p.x+d.z*p.w-d.w*p.z,\n                                       d.x*p.z-d.y*p.w+d.z*p.x+d.w*p.y,\n                                       d.x*p.w+d.y*p.z-d.z*p.y+d.w*p.x));\n        }else if(fragCoord.x<2.&&fragCoord.y<1.){\n            vec4 v=texelFetch(iChannel0,ivec2(1,0),0);\n            vec4 m=texelFetch(iChannel0,ivec2(2,0),0);\n            v=.98*v;\n            if(m.z>.5){\n            \tv.xy+=(iMouse.xy-m.xy)\/iResolution.xy;\n            }\n            fragColor=v;\n        }else if(fragCoord.x<3.&&fragCoord.y<1.){\n            fragColor = iMouse;\n        }else{\n            fragColor = vec4(0.);\n        }\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}}