{"Shader":{"ver":"0.1","info":{"id":"7dyyRy","date":"1655060306","viewed":238,"name":"Neonwave sunrise","username":"mrange","description":"CC0 - Neonwave sunrise\nInspired by a tweet by I wanted to create something that looked\na bit like the tweet. This is the result.\n","likes":34,"published":3,"flags":64,"usePreview":0,"tags":["neonwave"],"hasliked":0},"renderpass":[{"inputs":[{"id":29109,"src":"https:\/\/soundcloud.com\/didlybom\/vangelis-memories-of-green","ctype":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ CC0 - Neonwave sunrise\n\/\/  Inspired by a tweet by I wanted to create something that looked\n\/\/  a bit like the tweet. This is the result.\n\n#define RESOLUTION    iResolution\n#define TIME          iTime\n#define PI            3.141592654\n#define TAU           (2.0*PI)\n\n\/\/ License: WTFPL, author: sam hocevar, found: https:\/\/stackoverflow.com\/a\/17897228\/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 \/ 3.0, 1.0 \/ 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n\/\/ License: WTFPL, author: sam hocevar, found: https:\/\/stackoverflow.com\/a\/17897228\/418488\n\/\/  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n\/\/ License: Unknown, author: Unknown, found: don't remember\nvec4 alphaBlend(vec4 back, vec4 front) {\n  float w = front.w + back.w*(1.0-front.w);\n  vec3 xyz = (front.xyz*front.w + back.xyz*back.w*(1.0-front.w))\/w;\n  return w > 0.0 ? vec4(xyz, w) : vec4(0.0);\n}\n\n\/\/ License: Unknown, author: Unknown, found: don't remember\nvec3 alphaBlend(vec3 back, vec4 front) {\n  return mix(back, front.xyz, front.w);\n}\n\n\/\/ License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n  \/\/  Found this somewhere on the interwebs\n  \/\/  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)\/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n\/\/ License: Unknown, author: Unknown, found: don't remember\nfloat hash(float co) {\n  return fract(sin(co*12.9898) * 13758.5453);\n}\n\n\/\/ License: Unknown, author: Unknown, found: don't remember\nfloat hash(vec2 p) {\n  float a = dot (p, vec2 (127.1, 311.7));\n  return fract(sin(a)*43758.5453123);\n}\n\n\/\/ Value noise: https:\/\/iquilezles.org\/articles\/morenoise\nfloat vnoise(vec2 p) {\n  vec2 i = floor(p);\n  vec2 f = fract(p);\n    \n  vec2 u = f*f*(3.0-2.0*f);\n\/\/  vec2 u = f;\n\n  float a = hash(i + vec2(0.0,0.0));\n  float b = hash(i + vec2(1.0,0.0));\n  float c = hash(i + vec2(0.0,1.0));\n  float d = hash(i + vec2(1.0,1.0));\n  \n  float m0 = mix(a, b, u.x);\n  float m1 = mix(c, d, u.x);\n  float m2 = mix(m0, m1, u.y);\n  \n  return m2;\n}\n\n\/\/ License: MIT, author: Inigo Quilez, found: https:\/\/iquilezles.org\/www\/articles\/spherefunctions\/spherefunctions.htm\nvec2 raySphere(vec3 ro, vec3 rd, vec4 sph) {\n  vec3 oc = ro - sph.xyz;\n  float b = dot( oc, rd );\n  float c = dot( oc, oc ) - sph.w*sph.w;\n  float h = b*b - c;\n  if( h<0.0 ) return vec2(-1.0);\n  h = sqrt( h );\n  return vec2(-b - h, -b + h);\n}\n\n\/\/ License: MIT OR CC-BY-NC-4.0, author: mercury, found: https:\/\/mercury.sexy\/hg_sdf\/\nvec2 mod2(inout vec2 p, vec2 size) {\n  vec2 c = floor((p + size*0.5)\/size);\n  p = mod(p + size*0.5,size) - size*0.5;\n  return c;\n}\n\n\/\/ License: Unknown, author: Unknown, found: don't remember\nvec2 hash2(vec2 p) {\n  p = vec2(dot (p, vec2 (127.1, 311.7)), dot (p, vec2 (269.5, 183.3)));\n  return fract(sin(p)*43758.5453123);\n}\n\nfloat hifbm(vec2 p) {\n  const float aa = 0.5;\n  const float pp = 2.0-0.;\n\n  float sum = 0.0;\n  float a   = 1.0;\n  \n  for (int i = 0; i < 5; ++i) {\n    sum += a*vnoise(p);\n    a *= aa;\n    p *= pp;\n  }\n  \n  return sum;\n}\n\nfloat lofbm(vec2 p) {\n  const float aa = 0.5;\n  const float pp = 2.0-0.;\n\n  float sum = 0.0;\n  float a   = 1.0;\n  \n  for (int i = 0; i < 2; ++i) {\n    sum += a*vnoise(p);\n    a *= aa;\n    p *= pp;\n  }\n  \n  return sum;\n}\n\nfloat hiheight(vec2 p) {\n  return hifbm(p)-1.8;\n}\n\nfloat loheight(vec2 p) {\n  return lofbm(p)-2.15;\n}\n\nvec4 plane(vec3 ro, vec3 rd, vec3 pp, vec3 npp, vec3 off, float n) {\n  float h = hash(n);\n  float s = mix(0.05, 0.25, h);\n\n  vec3 hn;\n  vec2 p = (pp-off*2.0*vec3(1.0, 1.0, 0.0)).xy;\n\n  const vec2 stp = vec2(0.5, 0.33); \n  float he    = hiheight(vec2(p.x, pp.z)*stp);\n  float lohe  = loheight(vec2(p.x, pp.z)*stp);\n\n  float d = p.y-he;\n  float lod = p.y - lohe;\n\n  float aa = distance(pp, npp)*sqrt(1.0\/3.0);\n  float t = smoothstep(aa, -aa, d);\n\n  float df = exp(-0.1*(distance(ro, pp)-2.));  \n  vec3 acol = hsv2rgb(vec3(mix(0.9, 0.6, df), 0.9, mix(1.0, 0.0, df)));\n  vec3 gcol = hsv2rgb(vec3(0.6, 0.5, tanh_approx(exp(-mix(2.0, 8.0, df)*lod))));\n  \n  vec3 col = vec3(0.0);\n  col += acol;\n  col += 0.5*gcol;\n  \n  return vec4(col, t);\n}\n\nvec3 stars(vec2 sp, float hh) {\n  const vec3 scol0 = HSV2RGB(vec3(0.85, 0.8, 1.0));\n  const vec3 scol1 = HSV2RGB(vec3(0.65, 0.5, 1.0));\n  vec3 col = vec3(0.0);\n  \n  const float m = 6.0;\n\n  for (float i = 0.0; i < m; ++i) {\n    vec2 pp = sp+0.5*i;\n    float s = i\/(m-1.0);\n    vec2 dim  = vec2(mix(0.05, 0.003, s)*PI);\n    vec2 np = mod2(pp, dim);\n    vec2 h = hash2(np+127.0+i);\n    vec2 o = -1.0+2.0*h;\n    float y = sin(sp.x);\n    pp += o*dim*0.5;\n    pp.y *= y;\n    float l = length(pp);\n  \n    float h1 = fract(h.x*1667.0);\n    float h2 = fract(h.x*1887.0);\n    float h3 = fract(h.x*2997.0);\n\n    vec3 scol = mix(8.0*h2, 0.25*h2*h2, s)*mix(scol0, scol1, h1*h1);\n\n    vec3 ccol = col + exp(-(mix(6000.0, 2000.0, hh)\/mix(2.0, 0.25, s))*max(l-0.001, 0.0))*scol;\n    ccol *= mix(0.125, 1.0, smoothstep(1.0, 0.99, sin(0.25*TIME+TAU*h.y)));\n    col = h3 < y ? ccol : col;\n  }\n  \n  return col;\n}\n\nvec3 toSpherical(vec3 p) {\n  float r   = length(p);\n  float t   = acos(p.z\/r);\n  float ph  = atan(p.y, p.x);\n  return vec3(r, t, ph);\n}\n\nvec3 skyColor(vec3 ro, vec3 rd) {\n  const vec3 acol   = HSV2RGB(vec3(0.6, 0.9, 0.075));\n  const vec3 lpos   = 1E6*vec3(0., -0.15, 1.0);\n  const vec3 ldir   = normalize(lpos);\n  const vec3 lcol   = HSV2RGB(vec3(0.75, 0.8, 1.0));\n\n  const vec4 mdim   = vec4(1E5*vec3(0., 0.4, 1.0), 20000.0);\n  const vec3 mcol   = HSV2RGB(vec3(0.75, 0.7, 1.0));\n\n  vec2 sp     = toSpherical(rd.xzy).yz;\n\n  float lf    = pow(max(dot(ldir, rd), 0.0), 80.0);\n  float li    = 0.02*mix(1.0, 10.0, lf)\/(abs((rd.y+0.055))+0.025);\n  float lz    = step(-0.055, rd.y);\n\n  vec2 md     = raySphere(ro, rd, mdim);\n  vec3 mpos   = ro + rd*md.x;\n  vec3 mnor   = normalize(mpos-mdim.xyz);\n  float mdif  = max(dot(ldir, mnor), 0.0);\n  float mf    = smoothstep(0.0, 10000.0, md.y - md.x);\n\n  vec3 col = vec3(0.0);\n  col += stars(sp, 0.25)*smoothstep(0.5, 0.0, li)*lz;  \n  col = mix(col, (mdif)*mcol*4.0, mf);\n  col += smoothstep(-0.4, 0.0, (sp.x-PI*0.5))*acol;\n  col += tanh(lcol*li);\n  return col;\n}\n\nvec3 color(vec3 ww, vec3 uu, vec3 vv, vec3 ro, vec2 p) {\n  float lp = length(p);\n  vec2 np = p + 2.0\/RESOLUTION.y;\n\/\/  float rdd = (2.0-1.0*tanh_approx(lp));  \/\/ Playing around with rdd can give interesting distortions\n  float rdd = 2.0;\n  vec3 rd = normalize(p.x*uu + p.y*vv + rdd*ww);\n  vec3 nrd = normalize(np.x*uu + np.y*vv + rdd*ww);\n\n  const float planeDist = 1.0;\n  const int furthest = 12;\n  const int fadeFrom = max(furthest-2, 0);\n\n  const float fadeDist = planeDist*float(fadeFrom);\n  const float maxDist  = planeDist*float(furthest);\n  float nz = floor(ro.z \/ planeDist);\n\n  vec3 skyCol = skyColor(ro, rd);\n\n\n  vec4 acol = vec4(0.0);\n  const float cutOff = 0.95;\n  bool cutOut = false;\n\n  \/\/ Steps from nearest to furthest plane and accumulates the color \n  for (int i = 1; i <= furthest; ++i) {\n    float pz = planeDist*nz + planeDist*float(i);\n\n    float pd = (pz - ro.z)\/rd.z;\n\n    vec3 pp = ro + rd*pd;\n    \n    if (pp.y < 0. && pd > 0.0 && acol.w < cutOff) {\n      vec3 npp = ro + nrd*pd;\n\n      vec3 off = vec3(0.0);\n\n      vec4 pcol = plane(ro, rd, pp, npp, off, nz+float(i));\n\n      float nz = pp.z-ro.z;\n      float fadeIn = smoothstep(maxDist, fadeDist, pd);\n      pcol.xyz = mix(skyCol, pcol.xyz, fadeIn);\n\/\/      pcol.w *= fadeOut;\n      pcol = clamp(pcol, 0.0, 1.0);\n\n      acol = alphaBlend(pcol, acol);\n    } else {\n      cutOut = true;\n      acol.w = acol.w > cutOff ? 1.0 : acol.w;\n      break;\n    }\n\n  }\n\n  vec3 col = alphaBlend(skyCol, acol);\n\/\/ To debug cutouts due to transparency  \n\/\/  col += cutOut ? vec3(1.0, -1.0, 0.0) : vec3(0.0);\n  return col;\n}\n\nvec3 effect(vec2 p, vec2 q) {\n  float tm= TIME*0.25;\n  vec3 ro = vec3(0.0, 0.0, tm);\n  vec3 dro= normalize(vec3(0.0, 0.09, 1.0));  \n  vec3 ww = normalize(dro);\n  vec3 uu = normalize(cross(normalize(vec3(0.0,1.0,0.0)), ww));\n  vec3 vv = normalize(cross(ww, uu));\n\n  vec3 col = color(ww, uu, vv, ro, p);\n  \n  return col;\n}\n\n\/\/ License: Unknown, author: nmz (twitter: @stormoid), found: https:\/\/www.shadertoy.com\/view\/NdfyRM\nfloat sRGB(float t) { return mix(1.055*pow(t, 1.\/2.4) - 0.055, 12.92*t, step(t, 0.0031308)); }\n\/\/ License: Unknown, author: nmz (twitter: @stormoid), found: https:\/\/www.shadertoy.com\/view\/NdfyRM\nvec3 sRGB(in vec3 c) { return vec3 (sRGB(c.x), sRGB(c.y), sRGB(c.z)); }\n\n\/\/ License: Unknown, author: Matt Taylor (https:\/\/github.com\/64), found: https:\/\/64.github.io\/tonemapping\/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))\/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 q = fragCoord\/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x\/RESOLUTION.y;\n  vec3 col = vec3(0.0);\n  col = effect(p, q);\n  col *= smoothstep(0.0, 8.0, TIME-abs(q.y));\n  col = aces_approx(col);\n  col = sRGB(col);\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}}