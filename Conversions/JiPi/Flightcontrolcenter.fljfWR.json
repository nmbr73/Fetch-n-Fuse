{"Shader":{"ver":"0.1","info":{"id":"fljfWR","date":"1652208727","viewed":175,"name":"FlightControlCenter","username":"stephenl7797","description":"hi","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["lines","particles"],"hasliked":0},"renderpass":[{"inputs":[{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n\n    fragColor = IC0(ivec2(fragCoord));\n\n\/\/ Show tracked particles \/ voro cells\n#if 0\n    fragColor *= .5;\n    \n    ivec2 top0 = unhashXY(int(IC2(ivec2(fragCoord)).x),IR);\n    ivec2 top1 = unhashXY(int(IC2(ivec2(fragCoord)).y),IR);\n    ivec2 top2 = unhashXY(int(IC2(ivec2(fragCoord)).z),IR);\n    ivec2 top3 = unhashXY(int(IC2(ivec2(fragCoord)).w),IR);\n    \/\/fragColor.rg = vec2(top) \/ R;\n    float d = 320.;\n    fragColor.r += float(top0.x) \/ d;\n    fragColor.g += float(top1.x) \/ d;\n    fragColor.b += float(top2.x) \/ d;\n    fragColor.a = 1.;\n#endif\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n\n#define R iResolution.xy\n#define IR ivec2(iResolution.xy)\n#define C0(uv) texture(iChannel0, (uv))\n#define C1(uv) texture(iChannel1, (uv))\n#define IC0(p) texelFetch(iChannel0, (p), 0)\n#define IC1(p) texelFetch(iChannel1, (p), 0)\n#define IC2(p) texelFetch(iChannel2, (p), 0)\n\n\n\/\/ Version 1: First try, encoded each particle position at that time\n\/\/ Version 2: encode prev+next site as integer, as well as phase.\n\/\/ Version 3: same, but use particle tracking\/search instead of exhaustive loop each frame.\n\n\/\/ In version 2: Looping over >100 particles resulted in under 30fps on my laptop,\n\/\/ so for version 3, use particle tracking.\n\n\/\/#define VERSION 1\n#define VERSION 2\n#define SIZE 8\n#define SIZEf 8.\n\/\/ How many particles to search for each frame. Higher = faster convergence but slower.\n#define NEW_SAMPLES 8\n\nfloat rand11(float x) { return fract(337.1*sin(x*22.13+11.2)); }\nvec2 rand22(vec2 p) { return fract(vec2(\n    337.1*sin(22.3+27.31*p.y+p.x*22.13),\n    437.1*sin(1.7+22.31*p.y+p.x*29.13) )); }\nvec3 rand23(vec2 p) { return fract(vec3(\n    337.1*sin(22.3+27.31*p.y+p.x*22.13),\n    437.1*sin(1.7+22.31*p.y+p.x*29.13),\n    407.1*sin(111.7+12.31*p.y+p.x*19.13) )); }\nvec3 rand33(vec3 p) { return fract(vec3(\n    337.1*sin(22.3+27.31*p.y+p.x*22.13+p.z*19.2),\n    437.1*sin(1.7+22.31*p.y+p.x*29.13+p.z*10.3),\n    407.1*sin(111.7+12.31*p.y+p.x*19.13+p.z*8.2) )); }\n\nfloat distanceToLine(vec3 p1, vec3 p2, vec3 q) {\n    return length(cross(q-p1, q-p2)) \/ length(p1-p2);\n}\n\nconst float CAM_DIST = 4.;\nconst float FOCAL_COEFF = 1.60;\n\n\nfloat xsect_sphere(vec3 ro, vec3 rd, float radius) {\n    float a = dot(rd,rd);\n    float b = 2. * dot(rd,ro);\n    float c = dot(ro,ro) - radius;\n    float discrim = b*b - 4.*a*c;\n    if (discrim < 0.) return 0.;\n    float t1 = -b + sqrt(b*b - 4.*a*c);\n    float t2 = -b - sqrt(b*b - 4.*a*c);\n    return min(t1,t2) \/ 2.*a;\n}\n\nvec2 randVor22(vec2 g, float iTime) {\n\/\/g += iTime * .00001;\n\/\/float a = sin(iTime)*.5+.5;\nconst float a = 1.0;\nreturn rand22(g) * a + .5 - .5 * a;\n}\n\nvec3 site(vec2 pp, float t) {\n    vec2 g = floor(pp);\n    vec2 a = (g+randVor22(g, t)).xy * 3.141 \/ SIZEf * .5;\n    return normalize(vec3(sin(a.y)*cos(a.x), sin(a.y)*sin(a.x), cos(a.y))).xzy;\n}\nvec3 isite(int i, float t) {\n    vec2 p = vec2(i % SIZE, i \/ SIZE);\n    vec2 pp = vec2(p.x,p.y) * 2. - SIZEf * .5;\n    return site(pp, t);\n}\nvec3 partAtPhase(vec4 samp, float t) {\n    vec3 a = isite(int(samp.x+.1), t);\n    vec3 b = isite(int(samp.y+.1), t);\n    float phase = samp.z;\n    float amp = fract(samp.w*9999.77) * .2 + .1;\n    vec3 part = normalize((1.-phase)*a + phase*b) * (1.0 + amp*(1.0-pow(cos(phase*3.141),2.)));\n    return part;\n}\n\nvec2 proj(vec3 p, vec2 focal, float tt) {\n    return p.xy * focal \/ (p.z + tt);\n}\n\n\n\nfloat hashXY(ivec2 xy, ivec2 ir) {\n    return float(xy.y * ir.x + xy.x);\n}\nivec2 unhashXY(int h, ivec2 ir) {\n    return ivec2(h%ir.x, h\/ir.x);\n}\n\n\n\n    \n\/\/float smoo(float v) { return v*v*(3.-2.*v); }\nfloat smoo(float v) { return v; }\nvec3 noise33(vec3 x) {\n    vec3 o = vec3(0.);\n    vec3 fx = floor(x);\n    vec3 lx = fract(x);\n    for (int i=0; i<8; i++) {\n        float dx = (i  ) % 2 == 0 ? 1. : 0.;\n        float dy = (i\/2) % 2 == 0 ? 1. : 0.;\n        float dz = (i\/4) % 2 == 0 ? 1. : 0.;\n        vec3 v  = rand33(fx + vec3(dx,dy,dz));\n        vec3 d = vec3(dx,dy,dz) * 2. * lx + 1. - lx - vec3(dx,dy,dz);\n        o += smoo(d.x)*smoo(d.y)*smoo(d.z)*v;\n    }\n    return o;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/ Particle Sim\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    if (iFrame == 0) { fragColor = vec4(0.); return; }\n    \n    vec4 old = IC0(ivec2(fragCoord));\n    vec4 new = old;\n    \n    float TS = (fragCoord.x * 2. \/ R.x + 2.) \/ 24.;\n    float AMP = rand11(fragCoord.x * .97) * .2 + .1;\n    \n    \/*\n    if (new.a == 0. || new.a >= 1.0) {\n        \/\/ Random init\n        new = vec4(rand33(vec3(fragCoord+iTime*.3336, iTime+float(iFrame)))*2.-1., 0.00001);\n        new.rgb = normalize(new.rgb);\n    } else {\n        \/\/ Move particle along path\n        new.a += (fragCoord.x * 2. \/ R.x + 1.) \/ 60.;\n        \n        vec3 a = normalize(rand33(vec3(fragCoord+iTime*.3336, iTime+float(iFrame)))*2.-1.);\n        vec3 b = normalize(rand33(vec3(fragCoord+iTime*.3336, iTime+float(iFrame)))*2.-1.);\n    }\n    *\/\n    \n    #if VERSION == 1\n    float period = floor(iTime * TS);\n    float phase  = fract(iTime * TS);\n    \n    vec3 a = normalize(rand33(vec3(fragCoord,0.)+vec3(period))*2.-1.);\n    vec3 b = normalize(rand33(vec3(fragCoord,0.)+vec3(period+1.))*2.-1.);\n    new.rgb = normalize((1.-phase)*a + phase*b) * (1.0 + AMP*(1.0-pow(cos(phase*3.141),2.)));\n    \n    #elif VERSION == 2 || VERSION == 3\n    \n    \/\/ row 0: i | j | phase | timeScale\n    \/\/ i,j encode xy integer location.\n    \/\/ Which is then further transformed by the site function.\n    \n    float S = 2.0 * pow(SIZEf,2.) + .99;\n    if (iFrame <= 1) {\n        new.z = fragCoord.x\/R.x;\n        new.y = floor(rand11(fragCoord.x + iTime*9.333 + 11.9) * S );\n        new.x = floor(rand11(fragCoord.x + iTime*9.333) * S );\n        new.w = ((float(fragCoord.x) \/ R.x) + 1.) \/ 320.;\n    } else if (new.z > 1.0) {\n        new.z = 0.;\n        new.x = new.y;\n        int i = int(old.y + .1);\n        vec2 p = vec2(i % SIZE, i \/ SIZE) * 2. - 1.;\n        vec2 pp = p + (rand22(vec2(fragCoord.x,fragCoord.x*2.3)+iTime) * 2. - 1.) * 2.;\n        new.y = floor(rand11(fragCoord.x + iTime*7.333) * S);\n        \/\/new.y = new.x + 1.0;\n        new.w = ((float(fragCoord.x) \/ R.x) + 1.) \/ 320.;\n    } else new.z += ((float(fragCoord.x) \/ R.x) + 1.) \/ 320.;\n    \n    #endif\n    \n    \/\/new.xy = vec2(floor(fragCoord.x\/200.));\n    \n    fragColor = new;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":260,"channel":0}],"code":"\/\/ Main scene + time averaging\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec3 col = vec3(.003,.001,.02);\n    float tt = iTime \/ 33.0;\n    \/\/tt = 0.;\n    \n    vec3 scol = vec3(0.);\n    \n    mat3 RR = mat3(1.);\n    RR[0] = vec3(cos(tt), 0., sin(tt));\n    RR[2] = vec3(sin(tt), 0., -cos(tt));\n    \n    vec2 fuv = vec2(fragCoord-R.xy*.5)\/R.y;\n    \/*\n    vec3 ro = CAM_DIST * vec3(sin(tt), 0., -cos(tt));\n    vec3 rd_ = normalize(vec3((fragCoord-R.xy*.5)\/R.y, FOCAL_COEFF));\n    vec3 rd = vec3(rd_.x*cos(tt)-sin(tt)*rd_.z, rd_.y,\n                   rd_.x*sin(tt)+rd_.z*cos(tt));\n                   *\/\n    vec3 ro = CAM_DIST * RR * vec3(0.,0.,-1.);\n    vec3 rd = transpose(RR) * normalize(vec3((fragCoord-R.xy*.5)\/R.y, FOCAL_COEFF));\n                   \n    \/\/ Intersect sphere\n    float t = xsect_sphere(ro,rd, 1.);\n    vec3 p = (ro + t * rd).xyz;\n    if (t != 0.) {\n        scol = vec3(.04,.11,.21) * (1.+length(fuv)) * 4.;\n        scol.g *= .8 + .3 * sin(p.y*3.+iTime);\n        scol.r *= .5 + 1.5 * sin(p.x*5.+iTime);\n        \n        float lat = acos(p.y\/length(p));\n        float lng = atan(p.z,p.x);\n        \n        \/\/ Do quad pattern\n        float y = lat * SIZEf \/ 3.141 * 2.;\n        float x = lng * SIZEf \/ 3.141 * 2.;\n        vec2 pp = vec2(x,y);\n        vec2 g = floor(pp);\n        vec2 a = g+randVor22(g,iTime);\n        float acc = 0.;\n        for (int i=0; i<4; i++) {\n            vec2 dd = vec2((i==0)?-1.:(i==1)?1.0:0.,(i==2)?-1.:(i==3)?1.0:0.);\n            vec2 aa = g+dd + randVor22(g+dd,iTime);\n            float d = distanceToLine(vec3(a,1.), vec3(aa,1.), vec3(pp,1.));\n            if (dot(a-pp,aa-pp) < 0.)\n                acc = max(acc, .09 \/ (.1+d));\n        }\n        \/\/if (acc < 1.) scol *= 0.;\n        scol *= exp(acc*5.-5.);\n        \n        \/\/cc *= (1.0 - abs(sin(lng*30.)) * abs(sin(lat*30.))) * 2.1;\n        col += scol;\n    }\n    \n    \n    \/\/ Render particles\n    #if VERSION == 1\n    vec3 cc = vec3(0.);\n    float dampen = 0.;\n    int N = IR.x \/ 4;\n    for (int i=0; i<N; i++) {\n        vec3 c = vec3(0.);\n        vec4 part4 = IC0(ivec2(i,0));\n        vec3 part = RR * part4.xyz;\n        vec2 ppart = FOCAL_COEFF * part.xy \/ (part.z + CAM_DIST);\n        float d = length(ppart - fuv);\n        \n        dampen += .005 \/ (.0001+d);\n        if (d > .01) d = 999.;\n        c.g += .002\/(d+.0002);\n        if (d > .01) d = 999.;\n        c.b += .004\/(d+.0002);\n        float AMP = float(i) \/ float(N);\n        cc += c * AMP;\n        \n        if (t != 0.) {\n            float sd = sqrt(pow(clamp(length(p-part4.xyz) - .03,0.,999.),2.));\n            vec3 c = (scol) * 15.0;\n            col += exp(-sd*100.) * c;\n        }\n    }\n    \/\/col *= 1.\/dampen;\n    col += cc;\n\n\n    vec4 old = IC1(ivec2(fragCoord));\n    float ALPHA = .2;\n    col = col * ALPHA + (1.-ALPHA) * old.rgb;\n    fragColor = vec4(col,1.0);\n    \n    #elif VERSION == 2\n    \n    vec3 cc = vec3(0.);\n    float dampen = 0.;\n    \/*\n    int N = IR.x \/ 10;\n    \/\/N = 32;\n    \/\/N=64;\n    for (int i=0; i<N; i++) {\n        float AMP = .5 * float(i) \/ float(N);\n        vec4 samp = IC0(ivec2(i,0));\n    *\/\n    ivec4 pidxs = ivec4(IC2(ivec2(fragCoord)));\n    for (int i=0; i<4; i++) {\n        float AMP = .5;\n        \n        \/\/ivec2 pidx = ivec2(IC2(unhashXY(int(pidxs[i]),IR)));\n        ivec2 pidx = unhashXY(pidxs[i],IR);\n        \/\/pidx = ivec2(1,0);\n        \/\/pidx.x = 0;\n        vec4 samp = IC0(pidx);\n\n        \n        vec3 c = vec3(0.);\n        \n        vec3 part_ = partAtPhase(samp, iTime);\n        vec3 part = RR * part_;\n        \/\/vec2 ppart = FOCAL_COEFF * part.xy \/ (part.z + CAM_DIST);\n        vec2 ppart = proj(part,vec2(FOCAL_COEFF),CAM_DIST);\n        \n        \n        \/\/ version a: use 2d projected distance to shade particle\n        if (false) {\n            float d = length(ppart - fuv);\n            float far_mult = 1.-smoothstep(CAM_DIST-1., CAM_DIST+.5, part.z + CAM_DIST);\n            \/\/c.b += .001\/(d+.00001);\n            c.b += exp(-clamp(d,.001,999.)*200.) * far_mult;\n            c.g += exp(-clamp(d,.002,999.)*300.) * far_mult;        \n            cc += c;\n        }\n        \n        \/\/ version b: use 2d distance to line to shade particle.\n        \/\/            line direction comes from instantaneous velocity, after projecting\n        else {\n            float phase = samp.z;\n            float phasePrev = phase - samp.w * 1.;\n            samp.z = phasePrev;\n            vec3 prevPart = RR * partAtPhase(samp, iTime);\n\n            \/\/vec2 prevPpart = FOCAL_COEFF * prevPart.xy \/ (prevPart.z + CAM_DIST);\n            vec2 prevPpart = proj(prevPart,vec2(FOCAL_COEFF),CAM_DIST);\n            \/\/vec3 line = cross(vec3(ppart,1.), vec3(prevPpart,1.));\n            float ld = distanceToLine(vec3(ppart,1.), vec3(prevPpart,1.), vec3(fuv,1.));\n            float d = length(ppart-fuv);\n            float dd = ld * (1.0 \/ (.001+d));\n\n            float lineLength = .5 - abs(phase-.5) + .1; \/\/ goes .1 -> .6 -> .1\n            \/\/ There's two factors: one for line distance and one for radial distance.\n            float cs = 2.* exp(-ld*600.) * exp(-d*25. \/ lineLength); \n            c = vec3(.4 - fract(samp.w*777.773)*.4, .2, .99);\n            \/\/c.r += exp(-d*50.);\n            float far_mult = 1.-smoothstep(CAM_DIST-1., CAM_DIST+.5, part.z + CAM_DIST);\n            \/\/far_mult = 10.;\n            cc += c * cs * far_mult;\n        }\n        \n        \n        \/\/ Boost at projected point on sphere\n        if (t != 0.) {\n            float sd = sqrt(pow(clamp(length(p-part_.xyz) - .03,0.,999.),2.));\n            vec3 c = (scol) * 5.0;\n            col += exp(-sd*19.) * c;\n        }\n    }\n    col += cc;\n    \n    vec4 old = IC1(ivec2(fragCoord));\n    col.rgb = old.rgb * .95 + .05 * col.rgb;\n    col.rgb += length(fuv.xy) * vec3(.1,.0,.1) * .06;\n    col.rgb += length(fuv.xy+vec2(.5,.2)) * vec3(.001,.3,.52) * abs(fract(iTime*.1)-.5) * .03;\n    col.rgb -= col.rgb * rand23(fuv.xy) * .02;\n    fragColor = vec4(col,1.);\n    \n    \n    #endif\n\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":259,"channel":0}],"code":"\/\/ Particle Tracking.\n\/\/ Each pixel tracks the four nearest particles to it, when particles projected.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n\n    vec4 ds = vec4(9999.);\n    \n    float tt = iTime \/ 33.0;\n    mat3 RR = mat3(1.);\n    RR[0] = vec3(cos(tt), 0., sin(tt));\n    RR[2] = vec3(sin(tt), 0., -cos(tt));\n    \n    const float f = FOCAL_COEFF;\n    vec2 fuv = vec2(fragCoord-R.xy*.5)\/R.y;\n    \n    vec4 old = IC0(ivec2(fragCoord));\n    vec4 new = old;\n    ivec2 meXY = ivec2(fragCoord);\n    const bool oneRow = true;\n    \n    for (int j=0; j<4; j++) {\n        ds[j] = length(proj(RR*partAtPhase(IC1(unhashXY(int(old[j]),IR)),iTime).xyz,vec2(f),CAM_DIST) - fuv);\n    }\n    \n    \/\/ Sample neighbours\n    \n    for (int j=0; j<4; j++) {\n        ivec2 nnXY = (meXY + ivec2((j==0)?-1:(j==1)?1:0, (j==2)?-1:(j==3)?1:0));\n        ivec2 nXY = unhashXY(int(IC0(nnXY).x),IR);\n        \n        if (oneRow) nXY.y = 0;\n        vec3 part = RR*partAtPhase(IC1(nXY),iTime);\n        if (part.z > 0.) continue; \/\/ Discard if behind\n        float d = length(proj(part,vec2(f),CAM_DIST) - fuv);\n        \n        \n        if (d <= ds[0]) {\n            if (d<ds[0]) {\n            ds[3] = ds[2]; new[3] = new[2];\n            ds[2] = ds[1]; new[2] = new[1];\n            ds[1] = ds[0]; new[1] = new[0];\n            }\n            ds[0] = d;\n            new[0] = hashXY(nXY, IR);\n        } else if (d <= ds[1]) {\n            if (d<ds[1]) {\n            ds[3] = ds[2]; new[3] = new[2];\n            ds[2] = ds[1]; new[2] = new[1];\n            }\n            ds[1] = d;\n            new[1] = hashXY(nXY, IR);\n        } else if (d <= ds[2]) {\n            if (d<ds[2]) {\n            ds[3] = ds[2]; new[3] = new[2];\n            }\n            ds[2] = d;\n            new[2] = hashXY(nXY, IR);\n        } else if (d <= ds[3]) {\n            ds[3] = d;\n            new[3] = hashXY(nXY, IR);\n        }\n        \/*\n        for (int k=0; k<4; k++) {\n            if (d < ds[k]) {\n                for (int l=3; l>k; l--) ds[l] = ds[l-1], new[l] = new[l-1];\n                ds[k] = d;\n                new[k] = hashXY(nXY,IR);\n                break;\n            }\n        }*\/\n    }\n    \n    \/\/ Sample random\n\n    vec2 size = R.xy;\n    size.y = 1.;\n    \/\/size.x = 12.;\n    size.x = min(R.x,320.); \/\/ This controls max particles.\n    for (int i=0; i<NEW_SAMPLES; i++) {\n        ivec2 nXY = ivec2(rand22(iTime*.0111117+fragCoord) * size);\n        \n        if (oneRow) nXY.y = 0;\n        vec3 part = RR*partAtPhase(IC1(nXY),iTime);\n        if (part.z > 0.) continue; \/\/ Discard if behind\n        float d = length(proj(part,vec2(f),CAM_DIST) - fuv);\n        \n        if (d <= ds[0]) {\n            if (d<ds[0]) {\n            ds[3] = ds[2]; new[3] = new[2];\n            ds[2] = ds[1]; new[2] = new[1];\n            ds[1] = ds[0]; new[1] = new[0];\n            }\n            ds[0] = d;\n            new[0] = hashXY(nXY, IR);\n        } else if (d <= ds[1]) {\n            if (d<ds[1]) {\n            ds[3] = ds[2]; new[3] = new[2];\n            ds[2] = ds[1]; new[2] = new[1];\n            ds[1] = d;\n            }\n            new[1] = hashXY(nXY, IR);\n        } else if (d <= ds[2]) {\n            if (d<ds[2]) {\n            ds[3] = ds[2]; new[3] = new[2];\n            }\n            ds[2] = d;\n            new[2] = hashXY(nXY, IR);\n        } else if (d <= ds[3]) {\n            ds[3] = d;\n            new[3] = hashXY(nXY, IR);\n        }\n        \/*\n        for (int k=0; k<4; k++) {\n            if (d < ds[k]) {\n                for (int l=3; l>k; l--) ds[l] = ds[l-1], new[l] = new[l-1];\n                ds[k] = d;\n                new[k] = hashXY(nXY,IR);\n                break;\n            }\n        }*\/\n    }\n    \n    fragColor = new;\n}","name":"Buffer C","description":"","type":"buffer"}]}}