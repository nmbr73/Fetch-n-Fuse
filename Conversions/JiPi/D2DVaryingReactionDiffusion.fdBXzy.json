{"Shader":{"ver":"0.1","info":{"id":"fdBXzy","date":"1652038405","viewed":119,"name":"2D varying reaction-diffusion","username":"NBickford","description":"Writing a Gray-Scott reaction-diffusion shader, since I've never written one before! Reaction-diffusion parameters vary over the screen and are scaled to crop out most of the uninteresting regions. Click and drag to scroll through parameters.","likes":9,"published":3,"flags":32,"usePreview":0,"tags":["reactiondiffusion"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"#define MAXZ (100.0\/iResolution.x)\n\nfloat heightAtLod(vec2 uv, float lod){\n    return MAXZ*textureLod(iChannel0, uv, lod).g;\n}\n\n#define NSTEPS 32\nfloat visibleAmt(vec3 o, vec3 d){\n  \/\/ Determine the t at which o + d t reaches the z=MAXZ plane\n  float tMax = (MAXZ-o.z)\/d.z;\n  \/\/ Difference in t between sample points - note that we sample at halves:\n  float dt = tMax\/float(NSTEPS);\n  \n  float amt = 1.0;\n  for(int i = 0; i < NSTEPS; i++){\n    float t = (float(i) + 0.5)*dt;\n    vec3 p = o + d*t;\n    float height = heightAtLod(p.xy, 4.0+log2(t));\n    \n    float insideness = height - p.z; \/\/ >spreadZ -> 0, -spreadZ -> 1\n    float spreadZ = 0.2 * t;\n    amt = min(amt, 0.5 - 0.5*insideness\/spreadZ);\n  }\n  \n  return max(0.0, amt);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord\/iResolution.xy;\n    \n    \/\/ Get the height at the pixel\n    float z = heightAtLod(uv, 0.0);\n    vec3 origin = vec3(uv, z);\n    \n    vec3 visibility = vec3(0.0);\n    float aspect = iResolution.x\/iResolution.y;\n    vec3 L0 = normalize(vec3(normalize(vec2(0.866, 0.5*aspect)), 1.0));\n    vec3 L1 = normalize(vec3(normalize(vec2(-0.866, 0.5*aspect)), 1.0));\n    vec3 L2 = normalize(vec3(0.0, -1.0, 1.0));\n    visibility.r = visibleAmt(origin, L0);\n    visibility.g = visibleAmt(origin, L1);\n    visibility.b = visibleAmt(origin, L2);\n    \n    \/\/ Estimate local curvature for an AO look\n    float gaussianZEst = 0.25*z + 0.25*heightAtLod(uv, 2.0) + 0.2*heightAtLod(uv, 4.0) + 0.15*heightAtLod(uv, 6.0) + 0.1*heightAtLod(uv, 8.0);\n    float aoEst = clamp(1.0 + 3.0*(z - gaussianZEst)\/MAXZ, 0.0, 1.0);\n    \n    \/\/ Estimate normal for some specularity\n    vec3 drez = vec3(1.0\/iResolution.xy, 0.0);\n    vec3 n = vec3(-(heightAtLod(uv+drez.xz, 0.0)-z)*iResolution.x, -(heightAtLod(uv+drez.zy, 0.0)-z)*iResolution.y, 1.0);\n    n = normalize(n);\n    \n    vec3 diffuse = max(vec3(dot(n, L0), dot(n, L1), dot(n, L2)), vec3(0.0)) * aoEst * visibility;\n    \n    vec3 halfVec = normalize(n+vec3(0.,0.,1.));\n    vec3 spec = max(vec3(dot(halfVec, L0), dot(halfVec, L1), dot(halfVec, L2)), vec3(0.0));\n    spec = 17.0 * pow(spec, vec3(128.0)) * visibility;\n    \n    vec3 col = mix(diffuse, spec, 0.05);\n    \n    \/\/ Output to screen\n    fragColor = vec4(pow(col * aoEst, vec3(1.0\/2.2)), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"float stepAndOutputRNGFloat(inout uint rngState)\n{\n  \/\/ Condensed version of pcg_output_rxs_m_xs_32_32, with simple conversion to floating-point [0,1].\n  rngState  = rngState * 747796405u + 1u;\n  uint word = ((rngState >> ((rngState >> 28) + 4u)) ^ rngState) * 277803737u;\n  word      = (word >> 22) ^ word;\n  return float(word) \/ 4294967295.0f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord\/iResolution.xy;\n\n    if(iFrame == 0){\n        \/\/ Reinitialize\n        uint rngState = (uint(iFrame) << 20) + (uint(fragCoord.x\/16.) << 10) + uint(fragCoord.y\/16.);\n        fragColor = vec4(stepAndOutputRNGFloat(rngState), uv.x*stepAndOutputRNGFloat(rngState), 0.0f, 0.0f);\n        return;\n    }\n    \n    ivec2 iFC = ivec2(fragCoord);\n    vec2 ab = texelFetch(iChannel0, iFC, 0).rg;\n    float weights[] = float[9](0.05, 0.2, 0.05,\n                        0.2, -1.0, 0.2,\n                        0.05, 0.2, 0.05);\n    vec2 laplacian = ab * weights[4];\n    for(int y = -1; y <= 1; y++){\n        for(int x = -1; x <= 1; x++){\n            if(x == 0 && y == 0) continue;\n            laplacian += weights[3*y+x+4] * texelFetch(iChannel0, iFC + ivec2(x, y), 0).rg;\n        }\n    }\n    \n    if(iMouse.z > 0.0f){\n        uv = iMouse.xy \/ iResolution.xy;\n    }\n    \n    float high = mix(0.4+0.3*(1.0-pow(1.0-uv.x,3.0)), 0.9-(0.9-0.57)*uv.x, 1.0-pow(1.0-uv.x, 2.0));\n    float low = mix(0.2*(1.0-pow(1.0-uv.x,3.0)), 0.74-(0.74-0.54)*uv.x, 1.0-pow(1.0-uv.x, 3.8));\n    float f = 0.1 * uv.x;\n    float k = 0.1 * mix(low, high, uv.y);\n    \n    float dt = 0.9;\n    \n    \/\/ Update A and B\n    ab = ab + dt*(\n        vec2(1.0, 0.5)*laplacian\n        + vec2(-1.0, 1.0) * ab.x * ab.y * ab.y\n        + vec2(f*(1.0-ab.x), -(k+f)*ab.y));\n        \n    ab = clamp(ab, vec2(0.0), vec2(1.0));\n    \n    fragColor = vec4(ab, 0.0, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}}