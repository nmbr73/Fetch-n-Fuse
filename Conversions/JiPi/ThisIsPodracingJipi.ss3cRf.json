{
 "ver": "0.1",
 "info": {
  "id": "ss3cRf",
  "date": "0",
  "viewed": 0,
  "name": "This is podracing JiPi",
  "description": "Inspired from Star Wars I podracing scene.\n ",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "raytracing",
   "race",
   "starwars",
   "spaceship",
   "desert",
   "ship"
  ],
  "hasliked": 0,
  "parentid": "NljBWt",
  "parentname": "This is podracing!"
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "4sXGRn",
     "filepath": "/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg",
     "type": "texture",
     "channel": 0,
     "sampler": {
      "filter": "mipmap",
      "wrap": "repeat",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "4dXGzn",
     "filepath": "/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png",
     "type": "texture",
     "channel": 2,
     "sampler": {
      "filter": "mipmap",
      "wrap": "repeat",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "4df3Rr",
     "filepath": "/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg",
     "type": "texture",
     "channel": 1,
     "sampler": {
      "filter": "mipmap",
      "wrap": "repeat",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "#define S smoothstep\n#define AA 1\n#define T iTime*4.\n#define PI 3.1415926535897932384626433832795\n#define TAU 6.283185\n\n#define MAX_STEPS 300\n#define MAX_DIST 60.\n#define SURF_DIST .0001\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nmat3 rotationMatrixY (float theta)\n{\n    float c = cos (theta);\n    float s = sin (theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\nmat3 rotationMatrixX(float theta){\n\tfloat c = cos (theta);\n\tfloat s = sin (theta);\n\treturn mat3(\n\t\tvec3(1, 0, 0),\n\t\tvec3(0, c, -s),\n\t\tvec3(0, s, c)\n\t);\n}\nmat3 rotationMatrixZ(float theta){\n\tfloat c = cos (theta);\n\tfloat s = sin (theta);\n\treturn mat3(\n\t\tvec3(c, -s, 0),\n\t\tvec3(s, c, 0),\n\t\tvec3(0, 0, 1)\n\t);\n}\nvec3 rotateX (vec3 p, float theta)\n{\n\treturn rotationMatrixX(theta) * p;\n}\nvec3 rotateY (vec3 p, float theta)\n{\n    return p*rotationMatrixY(theta); \n}\nvec3 rotateZ (vec3 p, float theta)\n{\n\treturn p*rotationMatrixZ(theta); \n}\n\nfloat rounding( in float d, in float h )\n{\n    return d - h;\n}\n\n\nfloat opUnion( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = max(k-abs(d1-d2),0.0);\n    return min(d1, d2) - h*h*0.25/k;\n}\n\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); \n}\n// ================================\n// SDF\n// ================================\nfloat sdCircle( in vec3 p, in float r )\n{\n\treturn length(p)-r;\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb)\n{\n  p.x = abs(p.x);\n  float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n  return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus(vec3 p, float la, float lb, float h, float ra)\n{\n  p = abs(p);\n  vec2 b = vec2(la,lb);\n  float f = clamp( (ndot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );\n  vec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y)-ra, p.y-h);\n  return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\nfloat sdPlane( vec3 p, vec3 n, float h )\n{\n  // n must be normalized\n  return dot(p,n) + h;\n}\n\n\n// ================================\n// FBM\n// ===============================\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv  = (p.xy+vec2(37.0,17.0)*p.z);\n\tvec2 rg1 = textureLod( iChannel2, (uv+ vec2(0.5,0.5))/256.0, 0.0 ).yx;\n\tvec2 rg2 = textureLod( iChannel2, (uv+ vec2(1.5,0.5))/256.0, 0.0 ).yx;\n\tvec2 rg3 = textureLod( iChannel2, (uv+ vec2(0.5,1.5))/256.0, 0.0 ).yx;\n\tvec2 rg4 = textureLod( iChannel2, (uv+ vec2(1.5,1.5))/256.0, 0.0 ).yx;\n\tvec2 rg  = mix( mix(rg1,rg2,f.x), mix(rg3,rg4,f.x), f.y );\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n\nfloat fbm4( in vec3 q )\n{\n    float f  = 0.5000*noise( q ); q = m*q*2.02;\n          f += 0.2500*noise( q ); q = m*q*2.03;\n          f += 0.1250*noise( q ); q = m*q*2.01;\n          f += 0.0625*noise( q );\n    return f;\n}\nconst mat2 m2 = mat2(0.8,-0.6,0.6,0.8);\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000*texture( iChannel2, p/256.0 ).x; p = m2*p*2.02;\n    f += 0.2500*texture( iChannel2, p/256.0 ).x; p = m2*p*2.03;\n    f += 0.1250*texture( iChannel2, p/256.0 ).x; p = m2*p*2.01;\n    f += 0.0625*texture( iChannel2, p/256.0 ).x;\n    return f/0.9375;\n}\n\n\n// ================================\n// SHIP\n// ================================\nfloat speed = 1.9;\nfloat amplitude = 2.;\nfloat amplitudeR = 0.55;\nfloat frequency = 0.8;\nfloat lenReactor = 0.4;\nfloat radius = 0.12;\n\nfloat createReactor(vec3 p, float rad, float len){\n\n\tp = vec3(p.x, p.y, abs(p.z)-0.5);\n\tfloat reactor1 = sdCappedCylinder(p, rad-0.02, len);\n\treactor1 = rounding(reactor1, 0.02);\n\tvec3 q = p;\n\n\tq += vec3(rad *.8, .0,.0);\n\tfloat feature1 = sdCappedCylinder(q, rad * 0.5, len * 0.3);\n\treactor1 = opUnion(reactor1, feature1);\n\tq = p;\n\tq += vec3(.0,-len,.0);\n\tfloat fire = sdCircle(q, 0.6 * rad);\n\treactor1 = opUnion(reactor1, fire);\n    \n\treturn reactor1;\n}\n\nvec2 shipMap(vec3 pos, float rad, float len){\n    float material;\n    \n    pos = rotateZ(pos, cos(T/2. * frequency) * amplitudeR);\n    \n    //Reactor\n\tvec3 q = pos;\n\tq = rotateZ(q, PI * 0.5);\n\tq = rotateX(q, PI * 0.5);\n \tfloat reactor = createReactor(q, rad, lenReactor);\n\n\t//LinkBetweenReactors\n\tq = pos;\n\tfloat core = sdRhombus(q, 0.3, 0.1, 0.05, 0.2 );\n\tfloat link = opSmoothUnion(reactor, core, 0.1);\n    if(abs(link-core)<0.001)\n        material = 1.;\n\n\t//Guns\n\tq = vec3(abs(pos.x), pos.y - 0.05, pos.z);\n\t//q = rotateX(q, PI * 0.5);\n\tfloat gun = sdCapsule(q, vec3(0.1,0.0,-0.1), vec3(0.1,0.0,-0.4), 0.01);\n\tlink = opUnion(gun, link);\n    if(abs(link-gun)<0.001)\n        material = 1.;\n\n \n\t//Core \n\tq = pos + vec3(0.0,0.,-0.5);\n\tfloat core1 = sdEllipsoid(q, vec3(0.2,0.15,0.8));\n\tfloat d = opSmoothUnion(core1, link, 0.05);\n    if(abs(d-core1)<0.001)\n        material = 1.;\n    else if(abs(d-link)<0.001)\n        material = 1.;\n\n    //Cockpit\n\tq = pos + vec3(0.0,-0.1,-0.3);\n\tfloat cockpit = sdEllipsoid(q, vec3(0.1,0.1,0.2));\n\td = opUnion(cockpit, d);\n\tif(abs(d-cockpit)<0.001){\n\t\tmaterial = 3.;\n\t}\n\n    return vec2(d, material);\n}\n// ==================================================\n\n//===============================\n// TERRAIN\n//=============================== \n\nvec2 terrainMap(vec3 pos){\n    float hPlane = smoothstep(-0.5, 0.5,  0.2 * sin(pos.z* 2.) * sin(pos.x));\n    float plane = sdPlane(pos, vec3(0.0,2.1,0.0),hPlane);\n    //ROCKS\n    vec3 q = vec3( mod(abs(pos.x),7.0)-2.5,pos.y,mod(abs(pos.z+3.0),7.0)-3.0);\n    vec2 id = vec2( floor(pos.x/7.0)-2.5, floor((pos.z+3.0)/7.0)-3.0);\n    float fid = id.x*121.1 + id.y*31.7;\n    float h   = 1.8 + 1.0 * sin(fid*21.7);\n    float wid = 1.0 + 0.8 * sin(fid*31.7);\n    float len = 1.0 + 0.8 * sin(fid*41.7);\n    h   = min(max(h, 1.),2.2);\n    len = max(len, 1.5);\n    wid = max(wid, 1.5);\n    float ellip = sdEllipsoid(q, vec3(wid,h,len));\n    ellip -= 0.04*smoothstep(-1.0,1.0,sin(5.0*pos.x)+cos(5.0*pos.y)+sin(5.0*pos.z));\n    \n\n    //TORUS\n    q = vec3( mod(abs(pos.x+5.0),14.0)-5.,pos.y+0.1,mod(abs(pos.z+3.0),14.0)-3.0);\n    float torus = sdCappedTorus(q, vec2(1.,0), 1.5, 0.35);\n    torus -= 0.05*smoothstep(-1.0,1.0,sin(9.0*pos.x)+cos(5.0*pos.y)+sin(5.0*pos.z));\n    \n    float d = opSmoothUnion(torus, ellip, 0.5);\n    d = opUnion(d, plane);\n    \n    \n    float material;\n    if( abs(d) < 0.001)\n        material = 4.; \n    if(abs(d -plane) <0.0001) \n        material = 5.;\n    return vec2(d, material);\n}\n\n\n//===============================\n\nvec2 path(in float z){ \n    //return vec2(0);\n    float a = sin(z * 0.1);\n    float b = cos(z * frequency/2.0);\n    return vec2(a*1.5 - b*1., b + a*1.5); \n}\n\n\nvec2 map(in vec3 pos)\n{\n    \n    float material;\n\n    vec3 terrainPos = pos;\n    terrainPos.xz -= path(pos.z);\n    vec2 terrain = terrainMap(terrainPos);\n\n    vec3 p = pos;\n    p.z += T;\n    p.x -= path(pos.z).x;\n    p.y -= 0.3;\n    vec2 ship = shipMap(p, radius, lenReactor);\n\n    float d = min(ship.x, terrain.x);\n    if(abs(d - ship.x) < 0.001){\n        material = ship.y;\n    }\n    else if(abs(d - terrain.x) < 0.001){\n        material = terrain.y;\n    }\n    \n    return vec2(d, material);\n}\n\n\nvec2 RayMarch(vec3 ro, vec3 rd, out int mat) {\n\tfloat dO=0.;\n    float dM=MAX_DIST;\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        vec2 res = map(p);\n        float dS = 0.75*res.x;\n        mat = int(map(p).y);\n        if(dS<dM) dM = dS;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return vec2(dO, dM);\n}\n\nvec3 GetNormal(vec3 p) {\n    int mat = 0;\n\tfloat d = map(p).x;\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        map(p-e.xyy).x,\n        map(p-e.yxy).x,\n        map(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor, in float time )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos+h*nor).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, float tmin, float tmax, const float k )\n{\n\tfloat res = 1.0;\n    float t = tmin;\n    for( int i=0; i<50; i++ )\n    {\n\t\tfloat h = map( ro + rd*t).x;\n        res = min( res, k*h/t );\n        t += clamp( h, 0.02, 0.20 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0.,0.,0.);\n    vec3 ro = vec3(0, 1., 1.)*3.5;\n    ro.yz *= Rot(-m.y*3.14+1.);\n    //ro.xz *= Rot(-m.x*6.2831);\n    ro.z = ro.z - T;\n    \n    ro.x += path(ro.z).x;\n    \n    ro.y = max(ro.y, -0.1);\n    ro.y = min(ro.y, 1.);\n    \n\n    for(int x=0; x<AA; x++) {\n        for(int y=0; y<AA; y++) {\n            \n            vec2 offs = vec2(x, y)/float(AA) -.5;\n\n            vec2 uv = (fragCoord+offs-.5*iResolution.xy)/iResolution.y;\n            vec3 dir = vec3(ro.x, 1, path(ro.z).y - T);\n            vec3 rd = R(uv, ro, dir, 1.);\n            \n            // Sky\n            col = vec3(0.7,0.7,0.9);\n            col -= max(rd.y,0.0)*1.; \n            // clouds\n            vec2 sc = ro.xz + rd.xz*(200.0-ro.y)/rd.y;\n            col = mix( col, vec3(1.0,0.95,1.0), 0.5*smoothstep(0.4,0.9,fbm(0.0005*sc)) );\n\n            int mat = -1;\n            float dist = RayMarch(ro, rd, mat).x;\n            \n            \n            vec3 p = ro + rd * dist;\n            vec3 movingPos = p;\n            movingPos.z += T;\n            movingPos.xz = path(movingPos.z);\n            vec3 f0;\n            switch(mat){\n                //Metal\n                case 1:\n                    vec3 te = 0.5 * texture(iChannel0, movingPos.xy* 2.0).xyz\n                            + 0.5 * texture(iChannel0, movingPos.xz).xyz;\n                    te = 0.4 * te;\n                    col = te;\n                    f0 = te;\n                    break;\n                //Reactor\n                case 2:\n                    f0= vec3(0.4,0.8,1.);\n                    col = f0;\n                    break;\n                //Cockpit\n                case 3:\n                    col = vec3(0.0,0.0,0.0);\n                    break;\n                //Ground\n                case 4:\n                    f0 = vec3(0.);\n                    vec3 gd = 0.33 * texture(iChannel1, p.xy* 2.0).xyz\n                            + 0.33 * texture(iChannel1, p.yz).xyz\n                            + 0.33 * texture(iChannel1, p.xz).xyz;\n                    gd= 0.5 * gd;\n                    col = gd;\n                    \n                    break;\n                case 5: \n                    col *= vec3(0.5, 0.4, 0.2);\n                case -1:\n                    //col *= vec3(1.,1.,1.);\n                    break;\n            }\n            \n\n            if(dist<MAX_DIST) {\n                \n                vec3 lightPos = vec3(0.,10.,4.);\n                //vec3 lightPos = movingPos + vec3(0.,10.,4.);\n                vec3 l = normalize(lightPos);\n                vec3 n = GetNormal(p);\n                \n                float occ = calcAO(p, n, iTime);\n                //Top Light\n                {\n                    \n                    float dif = clamp(dot(n, l), 0., 1.);\n                    vec3 ref = reflect(rd, n);\n                    vec3 spe = vec3(1.0) * smoothstep(0.4,0.6,ref.y);\n                     float fre = clamp(1.0+dot(rd, n), 0., 1.);\n                    spe *= f0; + (1.-f0) * pow(fre,5.0);\n                    spe *= 6.0;\n                    //float shadow = calcSoftshadow(p, l, 0.1, 2.0, 32.0 );\n                   // dif *= shadow;\n                    col += 0.55*vec3(0.7,0.7,0.9)*dif*occ;\n                    col += vec3(0.7,0.7,0.9)*spe*dif*f0;  \n                }\n            \n                //Side Light\n                {\n                    vec3 lightPos = normalize(vec3(-2.7,1.2,-0.4));\n                    float dif = clamp(dot(n, lightPos), 0., 1.);\n                    float shadow = calcSoftshadow(p, lightPos, 0.001, 2.0, 16.0 );\n\n                    vec3 hal = normalize(lightPos-rd);\n                    vec3 spe = vec3(1.) * pow(clamp(dot(hal, n), 0., 1.),32.0);\n                    spe *= f0 + (1.-f0) * pow(1.-+clamp(dot(hal, lightPos), 0., 1.),5.0);\n\n                    dif *= shadow;\n                    col += 0.5*vec3(1.0,0.6,0.3)*dif*occ;\n                    col += 1.0*vec3(1.0,0.6,0.3)*spe*f0;\n                }\n                \n                //Bottom light\n                {\n                    float dif = clamp(0.5 -0.5 * n.y,0.0 ,1.);\n                    col += 0.15*dif*occ;\n                }\n                //Reactor Light\n                {\n                    //vec3 lightPos = normalize(vec3(abs(movingPos.x) - 0.5,0.0, lenReactor));\n                    //float dif = clamp(dot(n, lightPos), 0., 1.);\n                    \n                    //float shadow = calcSoftshadow(p, lightPos, 0.001, 0.5, 8.0 );\n                    \n                    //col += (0.7 + 0.3 * sin(iTime))*vec3(1.0,1.0,2.) * dif * shadow;\n                    \n                }\n                col = mix( col, 0.9*vec3(0.5, 0.4, 0.2), 1.0-exp( -0.00001*dist*dist*dist ) );\n            }\n            \n            \n        }\n    }\n    \n    \n    col /= float(AA*AA);\n    \n    col = clamp(col,0.0,1.0);\n    col = col*col*(3.0-2.0*col);\n    \n    \n    fragColor = vec4(col,1.0);\n}",
   "name": "Image",
   "description": "",
   "type": "image"
  }
 ]
}