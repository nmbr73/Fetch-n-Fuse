{"Shader":{"ver":"0.1","info":{"id":"ddf3RM","date":"1665832617","viewed":57,"name":"flow streamlines - grey contours","username":"FabriceNeyret2","description":"variant of https:\/\/shadertoy.com\/view\/cdfGz7 with field = texture isogrey","likes":12,"published":3,"flags":32,"usePreview":0,"tags":["flow","isovalue"],"hasliked":0},"renderpass":[{"inputs":[{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ variant of https:\/\/shadertoy.com\/view\/cdfGz7\n\/\/ field = texture isogrey\n\nvoid mainImage( out vec4 O, vec2 u )  { \n \/\/ O = sqrt(T(u));\n    O = sqrt(1.-exp(-T(u)*vec4(4,2,1,1))); \/\/ color\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":5,"src":"\/media\/a\/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ ---- compute BBoxs of next curves\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    R = iResolution.xy;\n    if (u.y>1.) { O = texture(iChannel1,u\/R); \n                  O = vec4(-dFdy(O.x),dFdx(O.x),O.x,0); \/\/ contour vectors\n               \/\/ O = vec4(.1*normalize(vec2(-dFdy(O.x),dFdx(O.x))),O.x,0);\n                  return; \n                }\n    float i = u.x-.5, l = 9., p = 1.\/R.y;\n    vec2  P = H(i+.5-iTime), _P=P, m=P,M=P;  \/\/ random start point\n    \n    for( int t=0; t <len; t++, _P = P )      \/\/ follow trajectory\n        P += field(P,iChannel1),\n        m = min(m,P), M = max(M,P);        \n\n    O = vec4(m-p,M+p);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"int len = 10; \/\/ curve length ( i.e. number of samples )\nvec2 R;\n#define T(U)   texelFetch( iChannel0, ivec2(U), 0 )\n#define H(p) ( fract(sin(float(p)*vec2(269.5,183.3)) *43758.5453123)*R\/R.y )\n\nfloat L(vec2 p, vec2 a,vec2 b) { \/\/ --- draw line  ( squared distance )\n    p -= a, b -= a;\n    float h = dot(p, b) \/ dot(b, b), \n          c = clamp(h, 0., 1.);     \n    return h==c ? dot(p -= b*h ,p) : 1e5; \n}\n\nvec2 field(vec2 U, sampler2D CH) {  \/\/ --- velocity field induced by texture\n    return  textureLod(CH, max(vec2(0,2.\/R.y), U*R.y\/R),0.).rg * .2;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/ --- draw only curves which BBox covers the pixel\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n     R = iResolution.xy;\n     vec2 U = u \/ R.y, P, _P, b;\n    O =  .98*T(u);                         \/\/ cumulates previous draw\n   \n    for( float i=0.,l; i < 400.; i++ ) {   \/\/ draw N streamlines per frame\n        vec4 B = texelFetch(iChannel1,ivec2(i,0),0); \/\/ curve bbox\n        b = step(B.xy,U)*step(U,B.zw);\n     \/\/ if (b.x*b.y == 0.) continue;       \/\/ \u2190 this form crash Firefox !\n        if (b.x*b.y == 1.) {               \/\/ pixel not in BBox: skip draw\n        _P = P = H(i+.5-iTime);            \/\/ random start point\n        l = 9.;\n        for( int t=0; t <len; t++, _P = P ) \/\/ follow trajectory\n            P += field(P,iChannel1),\n            l = min( l, L(U,_P,P) );\n        O += .2*max(0., 1.-R.y*sqrt(l));   \/\/ draw the curve\n       }\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}}