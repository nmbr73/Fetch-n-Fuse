{"Shader":{"ver":"0.1","info":{"id":"sslfRH","date":"1644516828","viewed":69,"name":"Blob blob the blobby blob blob","username":"SnoopethDuckDuck","description":"was trying to play around with 4D stuff intersecting 3D space. idk what this is though, very messy code","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","template","artofcode"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"\/\/ \"RayMarching starting point\" \n\/\/ by Martijn Steinrucken aka The Art of Code\/BigWings - 2020\n\/\/ The MIT License\n\/\/ Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\/\/ Email: countfrolic@gmail.com\n\/\/ Twitter: @The_ArtOfCode\n\/\/ YouTube: youtube.com\/TheArtOfCodeIsCool\n\/\/ Facebook: https:\/\/www.facebook.com\/groups\/theartofcode\/\n\/\/\n\/\/ You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 400\n#define MAX_DIST 10.\n#define SURF_DIST .001\n\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\nfloat sdBox(vec4 p, vec4 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min( max(max(p.x, p.y), max(p.z, p.w)), 0. );\n}\n\n#define pi 3.14159\n\nfloat shape(vec4 q) {\n    float as = 2.; \n    float ls = 0.5;\n    float t = 0.5;\n    \/\/q.xw *= Rot(as * atan(q.x, q.w) + ls * length(q.xw) - 0. * iTime);\/\/ - 2. * pi \/ 3.);\n    \/\/q.yw *= Rot(as * atan(q.y, q.w) + ls * length(q.yw) - 0. * iTime);\n    \/\/q.zw *= Rot(as * atan(q.z, q.w) + ls * length(q.zw) - 0. * iTime);\/\/ + 2. * pi \/ 3.);\n    float m = 1.;\n    \/\/ fractal q.w (no idea what this does)\n    for (int i = 0; i<5; i++) {\n        q.w = sabs(q.w) - m;\n        m *= 0.5;\n    }\n    q.xy *= Rot(as * smin(q.w, q.z) + t * iTime);\n    q.yz *= Rot(as * smin(q.x, q.w) + t * iTime);\n    q.zw *= Rot(as * smin(q.y, q.x) + t * iTime);\n    q.wx *= Rot(as * smin(q.z, q.y) + t * iTime);\n    \n    \/\/ torus looks trippy as fuck but is buggy\n    \/*\n    float r1 = 0.5;\n    float r2 = 0.3;\n    float d1 = length(q.xz) - r1;\n    float d2 = length(vec2(q.w, d1)) - r2;\n    *\/\n    \/\/ sharper box makes curves more distinguished\n    float b = 0.5 - 0.5 * thc(4., 0.5 * q.w + 0.25 * iTime);\n    float m1 = mix(0.2, 0.4, b);\n    float m2 = mix(0.7, 0.1, b);\n    float d = sdBox(q, vec4(m1)) - m2; \n    return d;\n}\n\nfloat GetDist(vec3 p) {\n    float w = length(p) * 2. + 0.25 * iTime;\n\n    \/\/ tried using blacklemori's technique with q.w\n    \/\/ couldnt get it working outside of the sphere\n    float center = floor(w) + 0.5;\n   \/\/ float neighbour = center + ((w < center) ? -1.0 : 1.0);\n\n    vec4 q = vec4(p, w);\n    \/\/float a = atan(p.x, p.z);\n    \n    float me = shape(q - vec4(0,0,0,center));\n    \/\/float next = shape(q - vec4(0,0,0,neighbour)); \/\/ incorrect but looks okay\n    float d = me;\/\/smin(me, next);\n    \n    float d2 = length(p) - 1.;\n   \/\/ d = -smin(d, -d2);\n    \/\/d = max(d, d2);\n    return 0.7 * d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = z * GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)\/iResolution.y;\n\tvec2 m = iMouse.xy\/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.8);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    float IOR = 1.05;\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n        \n        vec3 rdIn = refract(rd, n, 1.\/IOR);\n        \n        vec3 pEnter = p - n*SURF_DIST*30.;\n        float dIn = RayMarch(pEnter, rdIn, -1.); \/\/ inside the object\n        \n        vec3 pExit = pEnter + rdIn * dIn; \/\/ 3d position of exit\n        vec3 nExit = -GetNormal(pExit);\n        \n        float fresnel = pow(1.+dot(rd, n), 3.);\n        col = 2.5 * vec3(fresnel);\n        col *= 0.55 + 0.45 * cross(nExit, n);\n        \/\/col *= 1. - exp(-0.1 * dIn);\n        col = clamp(col, 0., 1.);\n       \/\/ col = 1.-col;\n       vec3 e = vec3(1.);\n        col *= (p.y + 0.95) * pal(1., e, e, e, vec3(0.,0.33,0.66)); \/\/cba to lookup color\n        col *= 0.6 + 0.4 * n.y;\n    }\n    \n    col = pow(col, vec3(.4545));\t\/\/ gamma correction\n    col += 0.04;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))\/tanh(a)\n#define ths(a,b) tanh(a*sin(b))\/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\n\/\/ (SdSmoothMin) stolen from here: https:\/\/www.shadertoy.com\/view\/MsfBzB\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) \/ k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}","name":"Common","description":"","type":"common"}]}}