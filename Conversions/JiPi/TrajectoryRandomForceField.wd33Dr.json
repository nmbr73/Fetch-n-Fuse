{"Shader":{"ver":"0.1","info":{"id":"wd33Dr","date":"1568209041","viewed":582,"name":"trajectory - random force field","username":"FabriceNeyret2","description":"Try different scales with mouse.y (top = smoother).\nclick or change size to reset particles location.\nChange initial spread on bufA:4.","likes":19,"published":3,"flags":32,"usePreview":1,"tags":["simulation","physics"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ Fork of https:\/\/shadertoy.com\/view\/tsdGRM\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = sqrt( T(U) );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":30,"src":"\/media\/a\/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"float E = 100.,              \/\/ attractive intensity (in normalized coordinates)\n     dt = 1.\/600.,           \/\/ time step\n     scale = 8.,             \/\/ random scale (larger=smoother)\n     spread = 1.;            \/\/ source spread ( 1e-5... 1 )\n\nvec2 F(vec4 O) {             \/\/ --- Force ( O.xy = pos )\n    return E * (2.*texture(iChannel1,O.xy\/scale).xy-1.); \/\/ random force field\n \/\/ gravity: F = C - O.xy; float d = length(F); return E * F \/ (d*d*d);\n}\nvec4 physics(vec4 O) {       \/\/ --- simple Newton step\n    O.zw += F(O) * dt;       \/\/ velocity\n    O.xy += O.zw * dt;       \/\/ location\n    return O;\n}\nvoid mainImage( out vec4 O, vec2 u ) \/\/ --- simulates trajectories\n{\n    O = T(u);\n    \n    vec2 U = ( 2.*u - R ) \/ R.y;\n    if (iMouse.y > 0.) scale = exp2(7.*iMouse.y\/R.y);\n    \n    if ( T(2).xy != R ) {\n        O -= O;\n        if (u.x<2.) O = vec4(-.5,spread*U.y, 3.,0.);\/\/ init positions .xy and velocities .zw\n      \/\/else if (u.x<2.) O = vec4(U,0,0); \n        else if (u==vec2(2.5)) O.xy = R;     \/\/ for testing window size change\n        return;\n    }\n    if (u==vec2(2.5)) return;\n    if ( u.x > 3. && iMouse.z > 0. ) O -= O; \/\/ click to clear screen\n    \n    if (u.x==.5) {                           \/\/ ---simulates physics\n        dt \/= 2.; vec4 P = physics(O); dt *= 2.; \/\/ https:\/\/en.wikipedia.org\/wiki\/Verlet_integration#Velocity_Verlet\n        O.xy += P.zw * dt;\n        O.zw =  P.zw + F(O)*dt\/2.;\n                                             \/\/ --- wrap\n        if (O.y > 1.) O.y -= 2.; else if (O.y < -1.) O.y += 2.;\n            float r = R.x\/R.y;\n        if (O.x > r) O.x -= 2.*r; else if (O.x < -r) O.x += 2.*r;\n    }\n    else if (u.x==1.5)                       \/\/ prev position\n        O = T(vec2(.5,u.y));\n    else {                                   \/\/ --- draw rays\n        O *= 1. - 7.*dt;                     \/\/ fade past\n        float d = 1e5, i_, i=0., v;\n        for (; i < R.y; i += 1. ) {\n            vec2 P0 = T(vec2(1,i)).xy, P1 = T(vec2(0,i)).xy, L=P1-P0;\n            if (dot(L,L)<.25) {\n                v = line( U, P0, P1);\n                if ( v < d ) d = v, i_ = i;\n            }\n        }\n        O += S( sqrt(d) -0.\/R.y ) * hue(i_\/R.y);\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define T(U) texelFetch( iChannel0, ivec2(U), 0 )\n#define R   (iResolution.xy)\n\n\/\/ utils from https:\/\/www.shadertoy.com\/view\/llySRh\n\nfloat line(vec2 p, vec2 a,vec2 b) { \n    p -= a, b -= a;\n    float h = dot(p, b) \/ dot(b, b),                  \/\/ proj coord on line\n          c = clamp(h, 0., 1.);\n    p -= b * h; return h==c ? dot(p,p): 1e5;          \/\/ dist\u00b2 to segment\n}\n\n#define S(v) smoothstep( 3.\/R.y, 0., v)\n\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n","name":"Common","description":"","type":"common"}]}}