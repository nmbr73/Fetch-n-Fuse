{"Shader":{"ver":"0.1","info":{"id":"fdSyWW","date":"1645285272","viewed":185,"name":"walking robot","username":"mdb","description":"inspired by this video:\nhttps:\/\/www.youtube.com\/watch?v=imbIsNAvUpM&ab_channel=Polyfjord","likes":18,"published":3,"flags":32,"usePreview":1,"tags":["raytracing","glass","animation","inversekinematicscinematic"],"hasliked":0},"renderpass":[{"inputs":[{"id":7,"src":"\/media\/a\/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord\/iResolution.xy;\n    float vign = pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.8 );\n    \n    vec3 col = texture(iChannel0, uv).rgb;\n    \n    col = col*col*(3.0 - 2.0*col);\n    \n    col += 0.01*step(0.3, texture(iChannel1, uv*2.0).r * (1.0 - vign));\n    \n    col = 1.0 - exp(-0.5*col);\n    \n    col = pow(col, vec3(1.0\/2.2));\n    \n    col *= 0.3 + 0.7*vign;\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":3,"src":"\/media\/a\/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"#define PI 3.14159265359\n#define AA 1\nconst float leg_segment = 0.25; \/\/ length of the leg \/ 3\n\n\n\n\/\/globals\nstruct leg {vec3 p1, p2, p3, p4;};\nleg legs[4];\nmat3x3 rotX;\nmat3x3 rotZ;\nvec3 center;\nfloat inside = 1.0;\n\n\/\/random\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nuint seed = 0u;\nvoid hash(){\n    seed ^= 2747636419u;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n    seed ^= seed >> 16;\n    seed *= 2654435769u;\n}\nvoid initRandomGenerator(vec2 fragCoord){\n    seed = uint(fragCoord.y*iResolution.x + fragCoord.x)+uint(iFrame)*uint(iResolution.x)*uint(iResolution.y);\n}\n\nfloat random(){\n    hash();\n    return float(seed)\/4294967295.0;\n}\n\nfloat smoothNoise(float time){\n    seed = (uint(time)+45456u) * 23456u;\n    float a = random();\n    seed = (uint(time)+45457u) * 23456u;\n    float b = random();\n    float t = fract(time);\n    return mix(a, b, t*t*(3.0 - 2.0*t));\n    \n}\n\nfloat timeFbm(float time, int depth){\n    float a = 0.0;\n    float b = 1.0;\n    float t = 0.0;\n    for(int i = 0; i < depth; i++){\n        float n = smoothNoise(time);\n        a += b*n;\n        t += b;\n        b *= 0.6;\n        time *= 2.0; \n    }\n    return a\/t;\n}\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\nfloat sdBox( vec3 p, float size){\n  return max(max(abs(p.x), abs(p.y)), abs(p.z)) - size;\n}\n\n\/\/ http:\/\/iquilezles.org\/www\/articles\/smin\/smin.htm\nvec2 smin( vec2 a, vec2 b, float k )\n{\n    float h = clamp( 0.5+0.5*(b.x-a.x)\/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n\n\/\/https:\/\/www.shadertoy.com\/view\/Xds3zN\nfloat dot2(vec3 v) {return dot(v, v);}\nfloat sdRoundCone(vec3 p, vec3 a, vec3 b, float r1, float r2)\n{\n  \/\/return length(p - b)  - 0.05;\n  \/\/ sampling independent computations (only depend on shape)\n  vec3  ba = b - a;\n  float l2 = dot(ba,ba);\n  float rr = r1 - r2;\n  float a2 = l2 - rr*rr;\n  float il2 = 1.0\/l2;\n    \n  \/\/ sampling dependant computations\n  vec3 pa = p - a;\n  float y = dot(pa,ba);\n  float z = y - l2;\n  float x2 = dot2( pa*l2 - ba*y );\n  float y2 = y*y*l2;\n  float z2 = z*z*l2;\n\n  \/\/ single square root!\n  float k = sign(rr)*rr*rr*x2;\n  if( sign(z)*a2*z2>k ) return  sqrt(x2 + z2)        *il2 - r2;\n  if( sign(y)*a2*y2<k ) return  sqrt(x2 + y2)        *il2 - r1;\n                        return (sqrt(x2*a2*il2)+y*rr)*il2 - r1;\n}\n\n\n\n\/\/animation\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvec2 walking_cycle(float t){\n    return (t < 0.5) ? vec2(-1.0 + 4.0*t, sin(2.0*PI*t)) : vec2(3.0 - 4.0*t, 0.0);\n} \n\n\nvoid inverse_kinematic(in vec3 p1, out vec3 p2, out vec3 p3, inout vec3 p4){\n    float d = distance(p1, p4);\n    vec3 u = (p4 - p1)\/d;\n    \n    if (d > leg_segment * 3.0){\n        p2 = p1 + u * leg_segment;\n        p3 = p1 + 2.0 * u * leg_segment;\n        p4 = p1 + 3.0 * u * leg_segment;\n        return;\n    }\n    \n    float a = (d - leg_segment) * 0.5;\n    float h = sqrt(leg_segment*leg_segment - a*a);\n    \n    vec3 b1 = cross(u, vec3(0.0, 1.0, 0.0));\n    vec3 up = normalize(cross(u, b1));\n    \n    p2 = p1 + u*a + h* up * sign(up.y);\n    p3 = p2 + u*leg_segment;\n    \n    return; \n}\n\nvoid compute_leg_pos(float t){\n    center =  vec3(timeFbm(t, 3)*0.2 - 0.1, \n                   timeFbm(t + 10.0, 4)*0.2 - 0.1 + 0.05*sin(4.0*PI*t), \n                   timeFbm(t + 20.0, 3)*0.2 - 0.1);\n    \n    float angleX = 0.3*(timeFbm(t*4.0 + 30.0, 2)*2.0 - 1.0);\n    float angleZ = 0.3*(timeFbm(t*4.0 + 30.0, 2)*2.0 - 1.0);\n    \n    rotX = mat3x3(1.0, 0.0, 0.0,\n                  0.0, cos(angleX), -sin(angleX),\n                  0.0, sin(angleX), cos(angleX));\n    \n    rotZ = mat3x3( cos(angleZ), -sin(angleZ),   0.0,\n                   sin(angleZ),  cos(angleZ),   0.0,\n                       0.0    ,      0.0    ,   1.0   );\n    \n    for(int i=0; i < 4; i++){\n        float i_f = float(i);\n        float angle = 0.5*PI*i_f;\n        vec3 direction = vec3(cos(angle), 0.0, sin(angle));\n        \n        legs[i].p1 = (center + rotZ * rotX * direction * 0.2);\n        legs[i].p4 = vec3(0.2, 0.1, 0.1)*walking_cycle(fract(t + 0.5*i_f)).xyx \n                    + vec3(0.0, -0.4, 0.0) + 0.53 * direction;\n        \n        inverse_kinematic(legs[i].p1, legs[i].p2, legs[i].p3, legs[i].p4);\n    }\n    \n    rotX = inverse(rotX);\n    rotZ = inverse(rotZ);\n    \n    return;\n}\n\n\/\/render\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\nfloat map(vec3 p, out int matID){\n    float d = 1e5;\n    float d2;\n    matID = 0;\n     for(int i=0; i < 4; i++){\n         d = min(d, sdRoundCone(p, legs[i].p1, legs[i].p2, 0.1, 0.06));\n        d = min(d, sdRoundCone(p, legs[i].p2, legs[i].p3, 0.06, 0.03));\n        d = min(d, sdRoundCone(p, legs[i].p3, legs[i].p4, 0.03, 0.001));\n     \n    }\n     \n    vec3 p2 = rotZ * rotX * p;\n    d = min(d,  sdBox(p2 - center, 0.17));\n    \n    if (d > p.y + 0.4){ \/\/plane\n        d = p.y + 0.4;\n        matID = 2;\n    }\n    \n    d *= inside;\n    \n    d2 = 1e5;\n    for(int i=0; i < 4; i++){\n        d2 = min(d2, length(p - legs[i].p1) - 0.13);\n    }\n    \n    if (d > d2){ \n        d = d2;\n        matID = 1;\n    }\n    \n    return d;\n}\n\nfloat map(vec3 p){\n    int i_;\n    return map(p, i_);\n}\n\n\n\n#define OFFSET 0.0005 \nvec3 normal(vec3 p){\n    return normalize(vec3(map(p+vec3(OFFSET,0,0))-map(p-vec3(OFFSET,0,0)),\n                          map(p+vec3(0,OFFSET,0))-map(p-vec3(0,OFFSET,0)),\n                          map(p+vec3(0,0,OFFSET))-map(p-vec3(0,0,OFFSET)))); \n}\n\nfloat softshadow( in vec3 ro, in vec3 rd){\n    float res = 1.0;\n    float tmax = 12.0;  \n    float t = OFFSET*4.0;\n    \n    for( int i=0; i<100; i++ )\n    {\n\t\tfloat h = map( ro + rd*t);\n        res = min(res, 16.0*h\/t);\n        t += h;\n        if( h<OFFSET ) return 0.0;\n        if( t>tmax ) break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\nfloat distance_scene(vec3 ro, vec3 rd, out int matID){\n    float t = 0.02;\n    float dt;\n    \n    for(int i=0; i < 100; i++){\n        dt = map(ro + t*rd, matID);\n        t += dt;\n        \n        if(abs(dt) < OFFSET)\n            return t;\n        \n        if(t > 10.0)\n            return -1.0;\n        \n    }\n    return -1.0;\n}\n\nfloat fresnel(vec3 rd, vec3 n){\n    float n2 = 1.0, n1 = 1.330;\n    float R0 = pow((n2 - n1)\/(n2 + n1), 2.0);\n    float teta = -dot(n, rd);\n    float R = R0 + (1.0 - R0)*pow(1.0 - teta, 5.0);\n    return R;\n}\n\nvec3 march(vec3 ro, vec3 rd){\n    float t;\n    vec3 n, col, mask, p;\n    int matID;\n    \n    const vec3 sun_dir = normalize(vec3(-0.8, 1.0, 0.5));\n    \n    inside = 1.0;\n    mask = vec3(1.0);\n    col = vec3(0.0);\n    \n    vec3 bgCol = vec3(0.0);\n    \n    for(int i = 0; i < 6; i++){\n        t = distance_scene(ro, rd, matID);\n        if(t < 0.0) return col + mask * bgCol;\n        p = ro + t*rd;\n        n = normal(p); \n        ro = p;\n        \n        if (matID == 0){ \/\/glass\n            float f = fresnel(rd, n);\n                vec3 rd2 = reflect(rd, n);\n                float s = softshadow(p, sun_dir);\n                \n                \n                if(dot(n, sun_dir) > 0.0){\n                    vec3 sky = mix(vec3(0.5, 0.4, 0.4), vec3(vec3(2.0)), 0.5*n.y + 0.5);\n                    col += s*f*mask*(sky + 70.0*pow(max(dot(rd2, sun_dir), 0.0), 30.0));\n                }\n                mask *= 1.0 - f;\n                rd = refract(rd, n, 1.0\/1.33);\n                inside *= -1.0;\n                mask *= vec3(1.0, 0.85, 0.85);\n            \n            \n        }\n        \n        if(matID == 1){ \/\/cube\n            mask *= vec3(1.0, 0.1, 0.1);\n            col += mask *( vec3(0.1, 0.1, 0.2) * (map(p + n*0.02) \/ 0.02) * (min(1.0, 1.0 + dot(sun_dir, n)))\n                      + 1.0*vec3(1.30,1.00,0.70) * dot(sun_dir, n) * softshadow(p, sun_dir)\n                        );\n            \n            return col;\n        }\n        \n        if(matID == 2){ \/\/plane\n            vec3 tex = texture(iChannel1, p.xz*0.2 + 0.8*vec2(0.2, 0.1)*iTime).rgb;\n            mask *= tex*tex;\n            mask *= exp(-dot(p.xz + vec2(-0.5, 0.5), p.xz + vec2(-0.5, 0.5)));\n            col += mask *( vec3(0.1, 0.1, 0.2) * (min(1.0, 1.0 + dot(sun_dir, n)))\n                      + 1.0*vec3(1.30,1.00,0.70) * dot(sun_dir, n) * softshadow(p, sun_dir)\n                        );\n            return col;\n        }\n\n    }\n    return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    compute_leg_pos(iTime);\n    initRandomGenerator(fragCoord);\n    \n    vec2 uv = fragCoord\/iResolution.xy*2.0-1.0;\n    uv.x *= iResolution.x\/iResolution.y;\n    \n    vec3 ro = vec3(sin(0.2), 0.5, cos(0.2));\n    \n    vec3 dir0 = normalize(-ro);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 right = normalize(cross(up, dir0));\n    up = cross(dir0, right);\n    vec3 rd;\n    \n    vec3 col = vec3(0.0);\n    for(int x = 0; x < AA; x++){\n    for(int y = 0; y < AA; y++){\n        rd = normalize(dir0 + right*(uv.x + float(x)\/float(AA)\/iResolution.x) \n                            + up*(uv.y + float(y)\/float(AA)\/iResolution.x));\n        col += march(ro, rd);\n    }\n    }\n    col \/= float(AA*AA);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}}