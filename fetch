#!/usr/bin/env python3

import os
import io
import re
import requests
import json
import yaml
import argparse
from dotenv import load_dotenv


def get(id,force=False):

  url="https://www.shadertoy.com/api/v1/shaders/" +id+"?key="+os.getenv('APIKEY')

  response = requests.get(url)

  if response.status_code != 200:
    raise Exception(url+"\nHTTP Error "+str(response.status_code))

  json_data = json.loads(response.text)

  error=json_data.get('Error',None)

  if error!=None:
    raise Exception(url+"\n"+error)

  info=json_data['Shader']['info']


  shader_name=info['name']
  shader_author=info['username']
  shader_description=info['description']

  fuse_name=re.sub(r'[^A-Za-z0-9]+','', shader_name)
  fuse_author=os.getenv('AUTHOR')

  fuse_filename='Conversions/'+fuse_name+'.'+id

  if os.path.isfile(fuse_filename+".c") and not force:
    raise Exception(url+"\nconversion already exists (use -f to overwrite)")


  with io.open(fuse_filename+".yaml", 'w', encoding='utf8') as outfile:
      yaml.dump({
        'shader':{
          'id':id,
          'name':shader_name,
          'author':shader_author,
          'url':'https://www.shadertoy.com/view/'+id
        },
        'fuse':{
          'name':fuse_name,
          'author':fuse_author

        }
      },outfile, default_flow_style=False, allow_unicode=True)

  code=""

  assets_exists=False


  for entry in json_data['Shader']['renderpass']:

    code="\n// ----------------------------------------------------------------------------------\n"+ \
      "// - "+entry['name']+(" "*(79-len(entry['name'])))+"-\n" \
      "// ----------------------------------------------------------------------------------\n"+ \
      "\n\n\n"+entry['code']+"\n\n\n"+code

    inputs=entry.get('inputs',None)

    if inputs!=None and len(inputs)>0:
      buffer_name=re.sub(r'[^A-Za-z0-9_]+','', re.sub(r' ','_', entry['name']))

      if not assets_exists and not os.path.exists(fuse_filename+'.assets'):
          os.makedirs(fuse_filename+'.assets')
          assets_exists = True

      for input in inputs:
          filename, suffix = os.path.splitext(input['src'])
          filename=f"{fuse_filename}.assets/{buffer_name}-Channel{input['channel']}-{input['ctype']}{suffix}"

          if not os.path.exists(filename):
            data = requests.get("https://www.shadertoy.com"+input['src'])

            with open(filename, 'wb') as f:
                f.write(data.content)




  code = code.replace("\t", "    ")
  code = re.sub(r'void\s+mainImage\s*\(', '__KERNEL__ void '+fuse_name+'Kernel(', code)


  with open(fuse_filename+".c", 'w') as f:
     f.write(code)



# ltfXzj - tut's nicht
# td2SDz - tut's
# MlKGWK - hat mehrere Buffer
# lstXRl - hat assets
# Wl3fzM - den will ich als Test dann hiermit mal machen

if not(os.path.isfile(".env")):
  with open(".env", 'w') as f:
     f.write( "AUTHOR=\"\"\n"
              "APIKEY=\"\"\n"
            )
  print(".env file created - please enter your credentials to use")


load_dotenv()



parser = argparse.ArgumentParser(description='Fetch fuse source code.')
parser.add_argument('-f','--force',action='store_true',help='overwrite code if it already exists')
parser.add_argument('-i','--id', help='shadertoy id as used in the URL', required=True)
args = parser.parse_args()


try:
  get(args.id,force=args.force)
except Exception as e:
  print(str(e))
