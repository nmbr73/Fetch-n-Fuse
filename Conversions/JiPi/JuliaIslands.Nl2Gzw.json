{"Shader":{"ver":"0.1","info":{"id":"Nl2Gzw","date":"1665440464","viewed":53,"name":"Julia Islands","username":"golinad","description":"Interactive water surface simulation, regarding landscape.","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["2d","fractal","simulation","refraction","water","drops"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"float bumpiness = 1.0;\n\nvec3 norm(in vec2 fragCoord)\n{\n    float dX = texture(iChannel0, (fragCoord + vec2(1,0))\/iResolution.xy).x - texture(iChannel0, (fragCoord + vec2(-1,0))\/iResolution.xy).x;\n    float dY = texture(iChannel0, (fragCoord + vec2(0,1))\/iResolution.xy).x - texture(iChannel0, (fragCoord + vec2(0,-1))\/iResolution.xy).x;\n\n    return normalize( vec3(-dX * bumpiness, -dY * bumpiness, 1.0) );\n}\n\nvec3 landColor(float h)\n{\n    float hn = h*0.5 + 0.5;\n    return vec3(0.1, 0.3, 0.4) + vec3(hn, 0.7*hn, 0.4*hn);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord\/iResolution.xy;\n\n    \/\/ Output to screen\n    vec3 n = norm(fragCoord);\n    vec3 c = vec3(1.0) * dot(n, normalize(vec3(-1.0, 1.0, 0.0)));\n    float h = texture(iChannel0, uv).z;\n    if(h < 0.0) {\n        float rH = texture(iChannel0, uv+n.xy*0.5*h).z;\n        fragColor = vec4(c.xyz, 1.0) + vec4(landColor(rH),1.0);\n    } else {\n        fragColor = vec4(landColor(h),1.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ water simulation\n\/\/ waterlevel at 0.0\n\/\/ xyzw: h1, h2, landscape height, 0\n\nfloat waterlevel = 0.5;\nfloat pi = 3.14159265359;\n\n\nfloat hit(in vec2 fragCoord) {\n    float h = smoothstep(2.0, 1.0, distance(fragCoord, iMouse.xy));\n        \n    return h;\n}\nfloat rain(in vec2 fragCoord) {\n    vec2 dropPos = vec2((sin(iTime*pi*161.8)*0.5+0.5)*iResolution.x, (cos(iTime*pi*100.0)*0.5 + 0.5)*iResolution.y);\n    float h = smoothstep(2.0, 1.0, distance(fragCoord, dropPos.xy));\n    return h;\n    \/\/return smoothstep(0.99, 1.0, sin(fragCoord.x*iTime)*cos(fragCoord.y*iTime))*1.0;\n}\n\nvec2 simStep(in vec2 fragCoord) {\n   if(texture(iChannel0, fragCoord\/iResolution.xy).z < 0.0) {\n       return vec2(((texture(iChannel0, (fragCoord + vec2(-1,0))\/iResolution.xy).x +\n           texture(iChannel0, (fragCoord + vec2( 1,0))\/iResolution.xy).x +\n           texture(iChannel0, (fragCoord + vec2( 0,-1))\/iResolution.xy).x +\n           texture(iChannel0, (fragCoord + vec2(0,1))\/iResolution.xy).x) * 0.5 -\n           texture(iChannel0, fragCoord\/iResolution.xy).y) * 0.99,\n           texture(iChannel0, fragCoord\/iResolution.xy).x);\n   } else {\n       return vec2(0.0, texture(iChannel0, fragCoord\/iResolution.xy).x);\n   }\n}\n\nfloat landscapeSin(in vec2 fragCoord) {\n    return sin(fragCoord.x*10.0)*cos(fragCoord.y*10.0)-0.5;\n}\n\n\/\/ Juliaset\nconst int maxIt = 16;\n \nvec2 cSqr(vec2 c){\n    return vec2(c.x*c.x - c.y*c.y, 2.0*c.x*c.y);\n}\n\nfloat landscapeJulia(in vec2 fragCoord )\n{\n    \/\/ Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord)*2.0;\n    int it = 0;\n    vec2 z = uv;\n    vec2 c = vec2(-0.7, 0.6);\n    float minD = length(z);\n    for(int i=0; i< maxIt;i++){\n        z = cSqr(z) + c;\n        if(length(z) > 50.0) break;\n        it++;\n        minD = min(length(z), minD);\n    }\n    \/\/ Time varying pixel color\n    \n    return -1.0 + 1.5*float(it)\/float(maxIt);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)\/iResolution.y;\n    vec2 pointer = iMouse.xy\/iResolution.xy;\n    \n    \/\/ initialize landscape\n    if(iFrame == 0 || iMouse.w > 0.5) {\n        fragColor.z = landscapeJulia(uv);\n    } else {\n        fragColor.z = texture(iChannel0, fragCoord\/iResolution.xy).z;\n    }\n    \n    \/\/ Time varying pixel color\n    vec2 height = simStep(fragCoord) + hit(fragCoord) + rain(fragCoord);\n    \/\/float height = sin(fragCoord.x*0.1);\n\n\n    \/\/ Output to buffer\n    fragColor.xy = vec2(height.x, height.y);\n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}}