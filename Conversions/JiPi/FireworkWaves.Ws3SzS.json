{"Shader":{"ver":"0.1","info":{"id":"Ws3SzS","date":"1572213599","viewed":382,"name":"Firework waves","username":"michael0884","description":"Playing with voronoi particle tracking #3","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["fast","particles"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ Fork of \"Hellflame\" by michael0884. https:\/\/shadertoy.com\/view\/3d3SRS\n\/\/ 2019-10-27 20:38:34\n\nvoid mainImage( out vec4 fragColor, in vec2 pos )\n{\n    \n   vec4 density = 1.3*SAMPLE(iChannel1, pos, size);\n    fragColor = vec4(sin(2.*density.x*vec3(0.4,0.2,1.1)) +sin(5.*vec3(0.7,0.7,1.)*density.y),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":17,"src":"\/media\/a\/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","ctype":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/voronoi particle tracking \n\nvoid Check(inout vec4 U, vec2 pos, vec2 dx)\n{\n    vec4 Unb = SAMPLE(iChannel0, pos+dx, size);\n    \/\/check if the stored neighbouring particle is closer to this position \n    if(length(Unb.xy - pos) < length(U.xy - pos))\n    {\n        U = Unb; \/\/copy the particle info\n    }\n}\n\nvec4 B(vec2 pos)\n{\n   return 5.*SAMPLE(iChannel1, pos, size);\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    U = SAMPLE(iChannel0, pos, size);\n    \n    \/\/check neighbours \n    Check(U, pos, vec2(-1,0));\n    Check(U, pos, vec2(1,0));\n    Check(U, pos, vec2(0,-1));\n    Check(U, pos, vec2(0,1));\n    \n    \/\/small divergence\n    vec2 ppos = 0.999*U.xy+0.001*pos.xy;\n    \n    vec4 Bdx = B(ppos+vec2(1,0)) - B(ppos-vec2(1,0)); \n    vec4 Bdy = B(ppos+vec2(0,1)) - B(ppos-vec2(0,1));\n    \n    \/\/update the particle\n    U.xy -= dt*(vec2(Bdx.x - Bdx.y, Bdy.x - Bdy.y) +vec2(0.,0.45));\n    \n    \n    if(iFrame < 1)\n    {\n        U = vec4(30.*floor(pos.x\/30.)+60.*sin(pos.x),30.*floor(pos.y\/30.)-10.*cos(pos.y+pos.y),1.,1.);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define size iResolution.xy\n#define SAMPLE(a, p, s) texture((a), (p)\/s)\n\nfloat gauss(vec2 x, float r)\n{\n    return exp(-pow(length(x)\/r,2.));\n}\n   \n#define PI 3.14159265\n#define dt 0.6\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/solve the dampened poisson equation\nconst float radius = 1.5;\n\nvec4 pdensity(vec2 pos)\n{\n   vec4 particle_param = SAMPLE(iChannel0, pos, size);\n   return vec4(particle_param.zw,1.,1.)*gauss(pos - particle_param.xy, radius);\n}\n\nvec4 B(vec2 pos)\n{\n   return SAMPLE(iChannel1, pos, size);\n}\n\nconst vec4 damp = vec4(0.005,0.05,0.001,0.001);\nconst vec4 ampl = vec4(0.05,0.05,0.001,0.001);\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    vec4 density = pdensity(pos);\n    U = (1.-damp)*0.25*(B(pos+vec2(0,1))+B(pos+vec2(1,0))+B(pos-vec2(0,1))+B(pos-vec2(1,0)));\n    U += density*ampl;\n}","name":"Buffer B","description":"","type":"buffer"}]}}