{"Shader":{"ver":"0.1","info":{"id":"4dGyDm","date":"1522179978","viewed":1433,"name":"keyboard debugging","username":"mattz","description":"I just wanted a shader to debug the keyboard texture a little more easily. Sometimes I forget which keys have which codes.","likes":42,"published":3,"flags":16,"usePreview":1,"tags":["visualization","keyboard","debug"],"hasliked":0},"renderpass":[{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":49,"src":"\/media\/a\/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ just debugging keyboard texture and scan codes!\n\nconst float GLYPHS_PER_UV = 16.;\nconst float FONT_TEX_BIAS = 127.\/255.;\n\n\nvec2 font_from_screen(vec2 tpos, float font_size, vec2 char_pos) {    \n    return (tpos\/font_size + char_pos + 0.5)\/GLYPHS_PER_UV;\n}\n\nvec3 sample_grad_dist(vec2 uv, float font_size) {\n    \n    vec3 grad_dist = (textureLod(iChannel0, uv, 0.).yzw - FONT_TEX_BIAS) * font_size;\n\n    grad_dist.y = -grad_dist.y;\n    grad_dist.xy = normalize(grad_dist.xy + 1e-5);\n    \n    return grad_dist;\n    \n}\n\nconst vec2 TABLE_RES = vec2(16, 16);\nconst vec2 CELL_DIMS = vec2(1.5, 1);\nconst vec2 TABLE_DIMS = TABLE_RES * CELL_DIMS;\n\nfloat MARGIN = 2.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec3 color = vec3(1);\n    \n    float scl = 1.0 \/ floor( iResolution.y \/ (TABLE_RES.y + MARGIN) );    \n    \n    vec2 p = (fragCoord - 0.5 - 0.5*iResolution.xy)*scl + 0.5*TABLE_DIMS;\n    \n    vec2 b = abs(p - 0.5*TABLE_DIMS) - 0.5*TABLE_DIMS;\n    float dbox = max(b.x, b.y);\n    \n    if (dbox < 0.) {\n        \n        vec2 cell = floor(p\/CELL_DIMS);\n        \n        int keycode = int(cell.x) + int((15.-cell.y)*16.);\n        \n        bool hit = false;\n        \n        bvec3 ktex;\n        for (int i=0; i<3; ++i) {\n            ktex[i] = texelFetch(iChannel1, ivec2(keycode, i), 0).x > 0.;\n        }\n        \n        color = ktex[0] ? vec3(1, 0.25, 0.25) : vec3(0.8);\n                       \n        float dtext = 1e5;\n\n        const int place[3] = int[3]( 100, 10, 1 );\n        bool nonzero = false;\n        \n        float i0 = (keycode >= 100 ? 1.0 : keycode >= 10 ? 1.5 : 2.0);\n\n        for (int i=0; i<3; ++i) {\n            \n            int digit = keycode \/ place[i];\n            keycode -= digit * place[i];\n            \n            if (digit > 0 || nonzero || i == 2) {\n\n                vec2 p0 = (cell + vec2(0.5 + (float(i)-i0)*0.3, 0.5))*CELL_DIMS;\n                vec2 uv = font_from_screen((p - p0), 1.0, vec2(digit, 12));\n                vec2 dbox = abs(p - p0) - 0.5;\n                dtext = min(dtext, max(max(dbox.x, dbox.y), sample_grad_dist(uv, 1.0).z));\n                nonzero = true;\n                \n            }\n\n        }\n        \n        vec3 textcolor = ktex[2] ? vec3(0) : (ktex[1] || ktex[0]) ? vec3(1) : vec3(0.9);\n        \n        if (ktex[1]) {\n            vec2 q = (p\/CELL_DIMS - cell);\n            float b = pow( 24.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.5 );\n            color = mix(color, vec3(1.0, 1.0, 0.25), 1.0-b);\n        }\n        \n        color = mix(color, textcolor, smoothstep(0.5*scl, -0.5*scl, dtext));        \n                    \n        vec2 p0 = floor(p\/CELL_DIMS + 0.5)*CELL_DIMS;\n        vec2 dp0 = abs(p - p0);\n        dbox = min(abs(dbox), min(abs(dp0.x), abs(dp0.y)));\n        \n    }\n    \n    color *= smoothstep(0., scl, abs(dbox));\n \n    fragColor = vec4(color, 1);\n    \n    \n}","name":"Image","description":"","type":"image"}]}}