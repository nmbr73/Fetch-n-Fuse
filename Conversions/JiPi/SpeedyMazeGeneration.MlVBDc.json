{"Shader":{"ver":"0.1","info":{"id":"MlVBDc","date":"1544485715","viewed":594,"name":"Speedy Maze Generation","username":"mathmasterzach","description":"Grows a random maze over time. Try clicking and dragging to erase parts of the maze and watch them regrow. (technically separating parts of the maze will make them grow into separate mazes)","likes":12,"published":3,"flags":32,"usePreview":0,"tags":["interactive","pattern","maze","growth"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/Click and drag to damage the maze and watch it heal\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 a=texture(iChannel0,fragCoord\/iResolution.xy).xy;\n    fragColor=a.x*vec4(hsv2rgb(vec3(a.y\/1000.,1.,1.)),1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/by copying this code into multiple buffers it is possible to generate mazes 4x as fast\n#define g(x,y) texture(iChannel0,(vec2(x,y)+U)\/R)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if( iFrame == 0 )\n         O = vec4( U.x<=1. && U.y<=2. );\n    else {\n        vec2 R  = iResolution.xy;\n        vec4 a  = g(0,0),\n             b  = g(1,0),\n             c  = g(0,1),\n             d  = g(-1,0),\n             e  = g(0,-1),\n             h0 = g(-1,-1),\n             h1 = g(1,-1),\n             h2 = g(-1,1),\n             h3 = g(1,1);\n        int r = int( 4.* hash13(vec3(U,iTime+iDate.a)) ), f;\n        vec2 p;\n        if (r==0) { p = b.xy; f = int(h0+h2); }\n        if (r==1) { p = c.xy; f = int(h0+h1); }\n        if (r==2) { p = d.xy; f = int(h1+h3); }\n        if (r==3) { p = e.xy; f = int(h2+h3); }\n        \n        O = (2.*a+b+c+d+e).x==1. && f==0 && p.x==1.\n        \t? vec4(1,1.+p.y,0,0)\n            : a;\n\n        U = abs( U-iMouse.xy ); \n        U = min( U, abs(U-R) );\n     \tif( length(U)<50. && iMouse.z>0.) O = vec4(0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\/\/https:\/\/www.shadertoy.com\/view\/4djSRW\n\/\/  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\/\/  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 \/ 3.0, 1.0 \/ 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}","name":"Common","description":"","type":"common"}]}}