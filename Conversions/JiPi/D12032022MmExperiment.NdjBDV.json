{"Shader":{"ver":"0.1","info":{"id":"NdjBDV","date":"1647129692","viewed":304,"name":"12-03-2022 MM Experiment","username":"PauloFalcao","description":"Something I have done now in Material Maker playing with MFSDF and transformations in rotation","likes":26,"published":3,"flags":0,"usePreview":1,"tags":["materialmaker","nodes","mfsdf"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"\/\/ Material Maker Experiment 12-03-2022\n\/\/ By PauloFalcao\n\/\/\n\/\/ Made in material maker\n\/\/\n\/\/ MaterialMaker is a node based shader maker\n\/\/ where nodes have functions as inputs\n\/\/ so it's possible to do raymarching, fractals,\n\/\/ and more pretty things\n\/\/\n\/\/ Material Maker\n\/\/   https:\/\/rodzilla.itch.io\/material-maker\n\/\/\n\/\/ My Raymarching library for Material Maker\n\/\/   https:\/\/github.com\/paulofalcao\/MaterialMakerRayMarching\n\/\/ \n\n\n#define SEED_VARIATION 0.0\n\nfloat wave3d_square(float x) {\n\treturn (fract(x) < 0.5) ? 0.0 : 1.0;\n}\n\nfloat mix3d_xor(float x, float y, float z) {\n\tfloat xy = min(x+y, 2.0-x-y);\n\treturn min(xy+z, 2.0-xy-z);\n}\n\nvec3 MFSDF_Obj_Maker_rotate3d(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\n\nfloat mfsdf3d_smooth_union_f(float a,float b,float k){\n\tfloat h = max( k-abs(a-b), 0.0 )\/k;\n\treturn min(a,b)-h*h*k*0.25;\n}\n\nvec4 mfsdf3d_smooth_union(vec4 a, vec4 b, float k) {\n    float e=0.001;\n    k=max(k,e);\n    float h=mfsdf3d_smooth_union_f(a.w,b.w,k);\n\tvec2 n=normalize(vec2(mfsdf3d_smooth_union_f(a.w+e,b.w,k)-mfsdf3d_smooth_union_f(a.w-e,b.w,k),\n                          mfsdf3d_smooth_union_f(a.w,b.w+e,k)-mfsdf3d_smooth_union_f(a.w,b.w-e,k)));\n    return vec4(mix(a.xyz,b.xyz,atan(abs(n.y),abs(n.x))\/(3.14159265359\/2.0)),h);\n}\n\nfloat mfsdf3d_smooth_subtraction_f(float a,float b,float k){\n\tfloat h = max( k-abs(-a-b), 0.0 )\/k;\n\treturn max(-a,b)+h*h*k*0.25;\n}\n\nvec4 mfsdf3d_smooth_subtraction(vec4 a, vec4 b, float k) {\n    float e=0.001;\n    k=max(k,e);\n\tfloat h=mfsdf3d_smooth_subtraction_f(a.w,b.w,k);\n\tvec2 n=normalize(vec2(mfsdf3d_smooth_subtraction_f(a.w+e,b.w,k)-mfsdf3d_smooth_subtraction_f(a.w-e,b.w,k),\n                          mfsdf3d_smooth_subtraction_f(a.w,b.w+e,k)-mfsdf3d_smooth_subtraction_f(a.w,b.w-e,k)));\n    return vec4(mix(a.xyz,b.xyz,atan(abs(n.y),abs(n.x))\/(3.14159265359\/2.0)),h);\n}\n\nfloat mfsdf3d_smooth_intersection_f(float a,float b,float k){\n\tfloat h = max( k-abs(a-b), 0.0 )\/k;\n\treturn max(a,b)+h*h*k*0.25;\n}\n\nvec4 mfsdf3d_smooth_intersection(vec4 a, vec4 b, float k) {\n    float e=0.001;\n    k=max(k,e);\n\tfloat h=mfsdf3d_smooth_intersection_f(a.w,b.w,k);\n\tvec2 n=normalize(vec2(mfsdf3d_smooth_intersection_f(a.w+e,b.w,k)-mfsdf3d_smooth_intersection_f(a.w-e,b.w,k),\n                          mfsdf3d_smooth_intersection_f(a.w,b.w+e,k)-mfsdf3d_smooth_intersection_f(a.w,b.w-e,k)));\n    return vec4(mix(a.xyz,b.xyz,atan(abs(n.y),abs(n.x))\/(3.14159265359\/2.0)),h);\n}\n\n\/\/ https:\/\/www.shadertoy.com\/view\/XsX3zB by Nikita Miropolskiy\n\/\/ MIT License\n\n\/\/ discontinuous pseudorandom constly distributed in [-0.5, +0.5]^3 *\/\nvec3 XsX3zB_oct_random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n\/\/ skew constants for 3d simplex functions\nconst float XsX3zB_oct_F3 =  0.3333333;\nconst float XsX3zB_oct_G3 =  0.1666667;\n\n\/\/ 3d simplex noise\nfloat XsX3zB_oct_simplex3d(vec3 p) {\n\t \/\/ 1. find current tetrahedron T and it's four vertices\n\t \/\/ s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices\n\t \/\/ x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices\n\t \n\t \/\/ calculate s and x\n\t vec3 s = floor(p + dot(p, vec3(XsX3zB_oct_F3)));\n\t vec3 x = p - s + dot(s, vec3(XsX3zB_oct_G3));\n\t \n\t \/\/ calculate i1 and i2\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t \/\/ x1, x2, x3\n\t vec3 x1 = x - i1 + XsX3zB_oct_G3;\n\t vec3 x2 = x - i2 + 2.0*XsX3zB_oct_G3;\n\t vec3 x3 = x - 1.0 + 3.0*XsX3zB_oct_G3;\n\t \n\t \/\/ 2. find four surflets and store them in d\n\t vec4 w, d;\n\t \n\t \/\/ calculate surflet weights\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t \/\/ w fades from 0.6 at the center of the surflet to 0.0 at the margin\n\t w = max(0.6 - w, 0.0);\n\t \n\t \/\/ calculate surflet components\n\t d.x = dot(XsX3zB_oct_random3(s), x);\n\t d.y = dot(XsX3zB_oct_random3(s + i1), x1);\n\t d.z = dot(XsX3zB_oct_random3(s + i2), x2);\n\t d.w = dot(XsX3zB_oct_random3(s + 1.0), x3);\n\t \n\t \/\/ multiply d by w^4\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t \/\/ 3. return the sum of the four surflets\n\t return dot(d, vec4(52.0));\n}\n\nvec3 v4v4_rotate(vec3 p, vec3 a) {\n\tvec3 rv;\n\tfloat c;\n\tfloat s;\n\tc = cos(a.x);\n\ts = sin(a.x);\n\trv.x = p.x;\n\trv.y = p.y*c+p.z*s;\n\trv.z = -p.y*s+p.z*c;\n\tc = cos(a.y);\n\ts = sin(a.y);\n\tp.x = rv.x*c+rv.z*s;\n\tp.y = rv.y;\n\tp.z = -rv.x*s+rv.z*c;\n\tc = cos(a.z);\n\ts = sin(a.z);\n\trv.x = p.x*c+p.y*s;\n\trv.y = -p.x*s+p.y*c;\n\trv.z = p.z;\n\treturn rv;\n}\nconst float PI=3.14159265359;\n\nvec2 equirectangularMap(vec3 dir) {\n\tvec2 longlat = vec2(atan(dir.y,dir.x),acos(dir.z));\n \treturn longlat\/vec2(2.0*PI,PI);\n}\n\n\n\/\/Simple HDRI START\n\n\/\/Hash without Sine Dave_Hoskins\n\/\/https:\/\/www.shadertoy.com\/view\/4djSRW \nfloat Simple360HDR_hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat Simple360HDR_noise(vec2 v){\n  vec2 v1=floor(v);\n  vec2 v2=smoothstep(0.0,1.0,fract(v));\n  float n00=Simple360HDR_hash12(v1);\n  float n01=Simple360HDR_hash12(v1+vec2(0,1));\n  float n10=Simple360HDR_hash12(v1+vec2(1,0));\n  float n11=Simple360HDR_hash12(v1+vec2(1,1));\n  return mix(mix(n00,n01,v2.y),mix(n10,n11,v2.y),v2.x);\n}\n\nfloat Simple360HDR_noiseOct(vec2 p){\n  return\n    Simple360HDR_noise(p)*0.5+\n    Simple360HDR_noise(p*2.0+13.0)*0.25+\n    Simple360HDR_noise(p*4.0+23.0)*0.15+\n    Simple360HDR_noise(p*8.0+33.0)*0.10+\n    Simple360HDR_noise(p*16.0+43.0)*0.05;\n}\n\nvec3 Simple360HDR_skyColor(vec3 p){\n\tvec3 s1=vec3(0.2,0.5,1.0);\n\tvec3 s2=vec3(0.1,0.2,0.4)*1.5;\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)-0.5)*vec3(1.0);\n\tfloat d=length(p);\n    return mix(s2+v,s1+v*(12.0\/max(d,20.0)),clamp(d*0.1,0.0,1.0));\n}\n\nvec3 Simple360HDR_floorColor(vec3 p){\n    vec3 v=(Simple360HDR_noiseOct(p.xz*0.1)*0.5+0.25)*vec3(0.7,0.5,0.4);\n    return v;\n}\n\nvec3 Simple360HDR_renderHDR360(vec3 rd, vec3 sun){\n    vec3 col;\n\tvec3 p;\n\tvec3 c;\n\tif (rd.y>0.0) {\n        p=rd*(5.0\/rd.y);\n        c=Simple360HDR_skyColor(p);\n    } else {\n        p=rd*(-10.0\/rd.y);\n        c=Simple360HDR_floorColor(p);\n\t\tc=mix(c,vec3(0.5,0.7,1.0),clamp(1.0-sqrt(-rd.y)*3.0,0.0,1.0));\n\t}\n\tvec3 skycolor=vec3(0.1,0.45,0.68);\n\tfloat d=length(p);\n\t\n\tfloat ds=clamp(dot(sun,rd),0.0,1.0);\n\tvec3 sunc=(ds>0.9997?vec3(2.0):vec3(0.0))+pow(ds,512.0)*4.0+pow(ds,128.0)*vec3(0.5)+pow(ds,4.0)*vec3(0.5);\n    if (rd.y>0.0){\n\t\tc+=vec3(0.3)*pow(1.0-abs(rd.y),3.0)*0.7;\n\t} \n    return c+sunc;\n}\n\nvec3 Simple360HDR_make360hdri(vec2 p, vec3 sun){\n    float xPI=3.14159265359;\n    vec2 thetaphi = ((p * 2.0) - vec2(1.0)) * vec2(xPI,xPI\/2.0); \n    vec3 rayDirection = vec3(cos(thetaphi.y) * cos(thetaphi.x), sin(thetaphi.y), cos(thetaphi.y) * sin(thetaphi.x));\n    return Simple360HDR_renderHDR360(rayDirection,sun);\n}\n\n\/\/Simple HDRI END\nconst float p_o8705_CamX = 0.872000000;\nconst float p_o8705_CamY = 1.094000000;\nconst float p_o8705_CamZ = 3.000000000;\nconst float p_o8705_LookAtX = 0.000000000;\nconst float p_o8705_LookAtY = 0.000000000;\nconst float p_o8705_LookAtZ = 0.000000000;\nconst float p_o8705_CamD = 1.500000000;\nconst float p_o8705_CamZoom = 2.347000000;\nconst float p_o8705_SunX = 2.500000000;\nconst float p_o8705_SunY = 2.500000000;\nconst float p_o8705_SunZ = 2.500000000;\nconst float p_o8705_AmbLight = 0.250000000;\nconst float p_o8705_AmbOcclusion = 1.000000000;\nconst float p_o8705_Shadow = 1.000000000;\nconst float p_o8705_Gamma = 1.300000000;\nconst float p_o8718_xyz = 0.451000000;\nconst float p_o8718_x = 1.000000000;\nconst float p_o8718_y = 1.000000000;\nconst float p_o8718_z = 1.000000000;\nconst float p_o8738_k = 0.446000000;\nconst float p_o8725_k = 1.000000000;\nconst float p_o8714_BaseColor_r = 1.000000000;\nconst float p_o8714_BaseColor_g = 0.656250000;\nconst float p_o8714_BaseColor_b = 0.000000000;\nconst float p_o8714_BaseColor_a = 1.000000000;\nconst float p_o8714_Specular = 0.961000000;\nconst float p_o8714_Roughness = 0.000000000;\n\n\nfloat o8762_fct(vec3 uv, float _seed_variation_) {\n\treturn mix3d_xor(wave3d_square(uv.x), wave3d_square(uv.y), wave3d_square(uv.z));\n}\n\nvec3 o8714_input_BaseColor_tex3d(vec4 p, float _seed_variation_) {\n    vec3 o8762_0_1_tex3d = vec3(o8762_fct((p).xyz, _seed_variation_));\n    return o8762_0_1_tex3d;\n}\n\nfloat o8714_input_Metallic_tex3d(vec4 p, float _seed_variation_) {\n    return 1.0;\n}\n\nfloat o8714_input_Specular_tex3d(vec4 p, float _seed_variation_) {\n    return 1.0;\n}\n\nfloat o8714_input_Roughness_tex3d(vec4 p, float _seed_variation_) {\n    return 1.0;\n}\n\nvec3 o8714_input_Emission_tex3d(vec4 p, float _seed_variation_) {\n    return vec3(1.0,1.0,1.0);\n}\n\nvec3 o8714_input_Normal_tex3d(vec4 p, float _seed_variation_) {\n    return vec3(0.0,1.0,0.0);\n}\n\nfloat o8714_input_Alpha_tex3d(vec4 p, float _seed_variation_) {\n    return 1.0;\n}\nfloat o8714_input_AmbientOcclusion_tex3d(vec4 p, float _seed_variation_) {\n    return 1.0;\n}\n\nconst float p_o8719_d = 3.140000000;\nconst float p_o8713_r = 0.610000000;\n\nfloat o8719_input_in(vec2 uv, float _seed_variation_) {\n    float o8713_0_1_sdf2d = length((uv)-vec2((cos(_seed_variation_*6.0)*0.4)+0.5, (sin(_seed_variation_*5.0)*0.4)+0.5))-p_o8713_r;\n    return o8713_0_1_sdf2d;\n}\n\nfloat o8714_input_sdf3d(vec3 p, float _seed_variation_) {\n    vec2 o8719_0_q = vec2(length((p).xy)-p_o8719_d+0.5, (p).z+0.5);\n    float o8719_0_1_sdf3d = o8719_input_in(o8719_0_q,atan((p).x,(p).y));\n    return o8719_0_1_sdf3d;\n}\n\n\nvec4 PBRObjectMaker_o8714(vec4 uv, float _seed_variation_) {\n\tfloat sdf=o8714_input_sdf3d(uv.xyz, _seed_variation_);\n\t\/\/5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4(p_o8714_Roughness*o8714_input_Roughness_tex3d(vec4(uv.xyz,5.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t\/\/4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4(p_o8714_Specular*o8714_input_Specular_tex3d(vec4(uv.xyz,4.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t\/\/1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4(vec4(p_o8714_BaseColor_r, p_o8714_BaseColor_g, p_o8714_BaseColor_b, p_o8714_BaseColor_a).rgb*o8714_input_BaseColor_tex3d(vec4(uv.xyz,1.0), _seed_variation_),sdf);\n\t} else\n\t\/\/0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}\n\nconst float p_o8726_BaseColor_r = 0.000000000;\nconst float p_o8726_BaseColor_g = 0.424825996;\nconst float p_o8726_BaseColor_b = 1.000000000;\nconst float p_o8726_BaseColor_a = 1.000000000;\nconst float p_o8726_Specular = 0.969000000;\nconst float p_o8726_Roughness = 0.000000000;\n\n\nvec3 o8726_input_BaseColor_tex3d(vec4 p, float _seed_variation_) {\n    return vec3(1.0);\n}\n\nfloat o8726_input_Specular_tex3d(vec4 p, float _seed_variation_) {\n    return 1.0;\n}\n\nfloat o8726_input_Roughness_tex3d(vec4 p, float _seed_variation_) {\n    return 1.0;\n}\n\nconst float p_o8737_d = 4.730000000;\nconst float p_o8730_r = 0.500000000;\n\nfloat o8737_input_in(vec2 uv, float _seed_variation_) {\n    float o8730_0_1_sdf2d = length((uv)-vec2((cos(_seed_variation_*9.0)*0.6)+0.5, (sin(_seed_variation_*7.0)*0.4)+0.5))-p_o8730_r;\n    return o8730_0_1_sdf2d;\n}\n\nfloat o8726_input_sdf3d(vec3 p, float _seed_variation_) {\n    vec2 o8737_0_q = vec2(length((p).xy)-p_o8737_d+0.5, (p).z+0.5);\n    float o8737_0_1_sdf3d = o8737_input_in(o8737_0_q,atan((p).x,(p).y));\n    return o8737_0_1_sdf3d;\n}\n\nvec4 PBRObjectMaker_o8726(vec4 uv, float _seed_variation_) {\n   \/\/ uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3(p_o8726_TranlateX,p_o8726_TranlateY,p_o8726_TranlateZ),vec3(p_o8726_RotateX,p_o8726_RotateY,p_o8726_RotateZ)*6.28318530718)\/p_o8726_scale;\n\tfloat sdf=o8726_input_sdf3d(uv.xyz, _seed_variation_);\n\t\/\/5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4(p_o8726_Roughness*o8726_input_Roughness_tex3d(vec4(uv.xyz,5.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t\/\/4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4(p_o8726_Specular*o8726_input_Specular_tex3d(vec4(uv.xyz,4.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t\/\/1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4(vec4(p_o8726_BaseColor_r, p_o8726_BaseColor_g, p_o8726_BaseColor_b, p_o8726_BaseColor_a).rgb*o8726_input_BaseColor_tex3d(vec4(uv.xyz,1.0), _seed_variation_),sdf);\n\t} else\n\t\/\/0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}\n\nconst float p_o8733_BaseColor_r = 1.000000000;\nconst float p_o8733_BaseColor_g = 1.000000000;\nconst float p_o8733_BaseColor_b = 1.000000000;\nconst float p_o8733_BaseColor_a = 1.000000000;\nconst float p_o8733_Specular = 1.000000000;\nconst float p_o8733_Roughness = 0.000000000;\nconst float p_o8733_scale = 1.000000000;\nconst float p_o8733_TranlateX = 0.000000000;\nconst float p_o8733_TranlateY = 0.000000000;\nconst float p_o8733_TranlateZ = 0.000000000;\nconst float p_o8733_RotateX = 0.000000000;\nconst float p_o8733_RotateY = 0.000000000;\nconst float p_o8733_RotateZ = 0.000000000;\nconst float p_o8749_g_0_pos = 0.409091000;\nconst float p_o8749_g_0_r = 1.000000000;\nconst float p_o8749_g_0_g = 0.000000000;\nconst float p_o8749_g_0_b = 0.000000000;\nconst float p_o8749_g_0_a = 1.000000000;\nconst float p_o8749_g_1_pos = 0.518182000;\nconst float p_o8749_g_1_r = 1.000000000;\nconst float p_o8749_g_1_g = 1.000000000;\nconst float p_o8749_g_1_b = 1.000000000;\nconst float p_o8749_g_1_a = 1.000000000;\n\nvec4 o8749_g_gradient_fct(float x) {\n  if (x < p_o8749_g_0_pos) {\n    return vec4(p_o8749_g_0_r,p_o8749_g_0_g,p_o8749_g_0_b,p_o8749_g_0_a);\n  } else if (x < p_o8749_g_1_pos) {\n    return mix(vec4(p_o8749_g_0_r,p_o8749_g_0_g,p_o8749_g_0_b,p_o8749_g_0_a), vec4(p_o8749_g_1_r,p_o8749_g_1_g,p_o8749_g_1_b,p_o8749_g_1_a), ((x-p_o8749_g_0_pos)\/(p_o8749_g_1_pos-p_o8749_g_0_pos)));\n  }\n  return vec4(p_o8749_g_1_r,p_o8749_g_1_g,p_o8749_g_1_b,p_o8749_g_1_a);\n}\n\nconst float p_o8744_scale = 3.768000000;\nconst float p_o8744_scale_x = 1.000000000;\nconst float p_o8744_scale_y = 1.000000000;\nconst float p_o8744_scale_z = 1.000000000;\nconst float p_o8744_transx = 0.000000000;\nconst float p_o8744_transy = 0.000000000;\nconst float p_o8744_transz = 0.000000000;\nconst float p_o8744_persistence = 0.500000000;\nconst float p_o8744_brightness = 0.000000000;\nconst float p_o8744_contrast = 2.255000000;\n\nfloat o8744_fbm(vec3 coord, float persistence, float _seed_variation_) {\n\tfloat normalize_factor = 0.0;\n\tfloat value = 0.0;\n\tfloat scale = 1.0;\n\tfloat size = 1.0;\n\tfor (int i = 0; i < 2; i++) {\n\t\tvalue += XsX3zB_oct_simplex3d(coord*size) * scale;\n\t\tnormalize_factor += scale;\n\t\tsize *= 2.0;\n\t\tscale *= persistence;\n\t}\n\treturn value \/ normalize_factor;\n}\n\nfloat o8744_bc(float f,float contrast, float brightness, float _seed_variation_) {\n\treturn f*contrast+brightness+0.5-contrast*0.5;\n}\n\nvec3 o8733_input_BaseColor_tex3d(vec4 p, float _seed_variation_) {\n    vec3 o8744_0_out = vec3(o8744_bc(o8744_fbm((p).xyz*vec3(p_o8744_scale_x,p_o8744_scale_y,p_o8744_scale_z)*0.5*p_o8744_scale+vec3(p_o8744_transx,p_o8744_transy,p_o8744_transz),p_o8744_persistence, _seed_variation_)*0.5+0.5,p_o8744_contrast,p_o8744_brightness, _seed_variation_));vec3 o8744_0_1_tex3d = o8744_0_out;\n    vec3 o8749_0_1_tex3d = o8749_g_gradient_fct(dot(o8744_0_1_tex3d, vec3(1.0))\/3.0).rgb;\n    return o8749_0_1_tex3d;\n}\n\nfloat o8733_input_Specular_tex3d(vec4 p, float _seed_variation_) {\n    return 1.0;\n}\n\nfloat o8733_input_Roughness_tex3d(vec4 p, float _seed_variation_) {\n    return 1.0;\n}\n\nconst float p_o8739_Distort = 0.107000000;\nconst float p_o8739_Correction = 0.000000000;\nconst float p_o8739_Bound = 9.411000000;\nconst float p_o8732_d = 4.320000000;\nconst float p_o8731_r = 0.610000000;\n\nfloat o8732_input_in(vec2 uv, float _seed_variation_) {\n    float o8731_0_1_sdf2d = length((uv)-vec2((cos(_seed_variation_*4.0)*0.6)+0.5, (sin(_seed_variation_*4.0)*0.4)+0.5))-p_o8731_r;\n    return o8731_0_1_sdf2d;\n}\n\nfloat o8739_input_sdf(vec3 p, float _seed_variation_) {\n    vec2 o8732_0_q = vec2(length((p).xy)-p_o8732_d+0.5, (p).z+0.5);\n    float o8732_0_1_sdf3d = o8732_input_in(o8732_0_q,atan((p).x,(p).y));\n    return o8732_0_1_sdf3d;\n}\n\nvec3 o8739_input_tex3d(vec4 p, float _seed_variation_) {\n    vec3 o8744_0_out = vec3(o8744_bc(o8744_fbm((p).xyz*vec3(p_o8744_scale_x,p_o8744_scale_y,p_o8744_scale_z)*0.5*p_o8744_scale+vec3(p_o8744_transx,p_o8744_transy,p_o8744_transz),p_o8744_persistence, _seed_variation_)*0.5+0.5,p_o8744_contrast,p_o8744_brightness, _seed_variation_));vec3 o8744_0_1_tex3d = o8744_0_out;\n    return o8744_0_1_tex3d;\n}\n\n\/\/tetrahedron normal by PauloFalcao\n\/\/https:\/\/www.shadertoy.com\/view\/XstGDS\nvec3 normal_o8739(vec3 p, float _seed_variation_) {  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=o8739_input_sdf(p+e.xyy, _seed_variation_);\n  float v2=o8739_input_sdf(p+e.yyx, _seed_variation_);\n  float v3=o8739_input_sdf(p+e.yxy, _seed_variation_);\n  float v4=o8739_input_sdf(p+e.xxx, _seed_variation_);\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nfloat distortByNormal_o8739(vec3 uv, float _seed_variation_) {\n    float d=o8739_input_sdf(uv, _seed_variation_);\n\tif (d<=abs(p_o8739_Distort*(p_o8739_Bound+1.0))+0.01){\n\t\tvec3 n=normal_o8739(uv, _seed_variation_);\n\t\tvec3 s=o8739_input_tex3d(vec4(uv,0.0), _seed_variation_);\n\t\treturn o8739_input_sdf(uv-(n*s*p_o8739_Distort), _seed_variation_);\n\t} else return d;\n}\n\nfloat o8733_input_sdf3d(vec3 p, float _seed_variation_) {\n    float o8739_0_1_sdf3d = distortByNormal_o8739((p), _seed_variation_)\/(1.0+p_o8739_Distort*p_o8739_Correction);\n    return o8739_0_1_sdf3d;\n}\n\n\nvec4 PBRObjectMaker_o8733(vec4 uv, float _seed_variation_) {\n    uv.xyz=MFSDF_Obj_Maker_rotate3d(uv.xyz-vec3(p_o8733_TranlateX,p_o8733_TranlateY,p_o8733_TranlateZ),vec3(p_o8733_RotateX,p_o8733_RotateY,p_o8733_RotateZ)*6.28318530718)\/p_o8733_scale;\n\tfloat sdf=o8733_input_sdf3d(uv.xyz, _seed_variation_)*p_o8733_scale;\n\t\/\/5 - Roughness\n\tif (uv.w>4.5) {\n\t\treturn vec4(p_o8733_Roughness*o8733_input_Roughness_tex3d(vec4(uv.xyz,5.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t\/\/4 - Specular\n\tif (uv.w>3.5) {\n\t\treturn vec4(p_o8733_Specular*o8733_input_Specular_tex3d(vec4(uv.xyz,4.0), _seed_variation_),0.0,0.0,sdf);\n\t} else\n\t\/\/1 - BaseColor\n\tif (uv.w>0.5){\n\t\treturn vec4(vec4(p_o8733_BaseColor_r, p_o8733_BaseColor_g, p_o8733_BaseColor_b, p_o8733_BaseColor_a).rgb*o8733_input_BaseColor_tex3d(vec4(uv.xyz,1.0), _seed_variation_),sdf);\n\t} else\n\t\/\/0 - SDF\n\t{\n\t\treturn vec4(vec3(0),sdf);\n\t}\n}\n\nvec4 o8705_input_mfsdf(vec4 p, float _seed_variation_) {\n\n    vec3 r=v4v4_rotate(p.xyz, -vec3(iTime*31.0, iTime*33.0, iTime*35.0)*0.01745329251);\n    if (iMouse.z>0.5){\n        r=vec3(p.xyz);\n    }\n    vec4 rot=vec4(vec4(r, p.w).xyz\/vec3(p_o8718_x, p_o8718_y, p_o8718_z)\/p_o8718_xyz,vec4(r,p.w).w);\n\n    vec4 o8714_0_1_v4v4 = PBRObjectMaker_o8714(rot, _seed_variation_);\n    vec4 o8726_0_1_v4v4 = PBRObjectMaker_o8726(rot, _seed_variation_);\n    vec4 o8725_0_1_v4v4 = mfsdf3d_smooth_union(o8714_0_1_v4v4, o8726_0_1_v4v4,p_o8725_k);\n    vec4 o8733_0_1_v4v4 = PBRObjectMaker_o8733(rot, _seed_variation_);\n    vec4 o8738_0_1_v4v4 = mfsdf3d_smooth_union(o8725_0_1_v4v4, o8733_0_1_v4v4,p_o8738_k);\n    vec4 o_o8718_0=o8738_0_1_v4v4;vec4 o8718_0_1_v4v4 = vec4(o_o8718_0.xyz,o_o8718_0.w*min(min(p_o8718_x, p_o8718_y), p_o8718_z)*p_o8718_xyz);\n    vec4 o8720_0_1_v4v4 = o8718_0_1_v4v4;\n\n    return o8720_0_1_v4v4;\n}\nvec3 o8705_input_hdri(vec2 uv, float _seed_variation_) {\n\nreturn Simple360HDR_make360hdri(vec2((uv).x,-(uv).y+1.0),normalize(vec3(-p_o8705_SunX,p_o8705_SunY,-p_o8705_SunZ)));\n}\n\n\/\/tetrahedron normal by PauloFalcao\n\/\/https:\/\/www.shadertoy.com\/view\/XstGDS\nvec3 normal_o8705(vec3 p, float _seed_variation_) {  \n  const vec3 e=vec3(0.001,-0.001,0.0);\n  float v1=o8705_input_mfsdf(vec4(p+e.xyy,0.0), _seed_variation_).w;\n  float v2=o8705_input_mfsdf(vec4(p+e.yyx,0.0), _seed_variation_).w;\n  float v3=o8705_input_mfsdf(vec4(p+e.yxy,0.0), _seed_variation_).w;\n  float v4=o8705_input_mfsdf(vec4(p+e.xxx,0.0), _seed_variation_).w;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\nvoid march_o8705(inout float d,inout vec3 p,float dS, vec3 ro, vec3 rd, float _seed_variation_) {\n    for (int i=0; i < 500; i++) {\n    \tp = ro + rd*d;\n        dS = o8705_input_mfsdf(vec4(p,0.0), _seed_variation_).w;\n        d += dS;\n        if (d > 50.0 || abs(dS) < 0.0001) break;\n    }\n}\n\n\/\/from https:\/\/www.shadertoy.com\/view\/lsKcDD\nfloat calcAO_o8705( in vec3 pos, in vec3 nor , float _seed_variation_) {\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ ){\n        float h = 0.001 + 0.25*float(i)\/4.0;\n        float d = o8705_input_mfsdf(vec4( pos + h*nor ,0.0), _seed_variation_).w;\n        occ += (h-d)*sca;\n        sca *= 0.98;\n    }\n    return clamp( 1.0 - 1.6*occ, 0.0, 1.0 );    \n}\n\n\/\/from https:\/\/www.shadertoy.com\/view\/lsKcDD\nfloat calcSoftshadow_o8705( in vec3 ro, in vec3 rd, in float mint, in float tmax, float _seed_variation_) {\n\tfloat res = 1.0;\n    float t = mint;\n    float ph = 1e10; \/\/ big, such that y = 0 on the first iteration\n    for( int i=0; i<32; i++ ){\n\t\tfloat h = o8705_input_mfsdf(vec4( ro + rd*t ,0.0), _seed_variation_).w;\n        res = min( res, 10.0*h\/t );\n        t += h;\n        if( res<0.0001 || t>tmax ) break;  \n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 raymarch_o8705(vec2 uv, float _seed_variation_) {\n    uv-=0.5;\n\n    float mx=iMouse.x\/iResolution.x*PI*2.0;\n    float my=iMouse.y\/iResolution.y*PI\/2.01;\n    \n    vec3 lookat=vec3(p_o8705_LookAtX,p_o8705_LookAtY,p_o8705_LookAtZ);\n    \n    vec3 cam;\n    if (iMouse.z<0.1){\n        cam=vec3((sin(iTime*0.1)*2.0),(sin(iTime*0.13)*1.0),(sin(iTime*0.17)*2.0))*p_o8705_CamZoom;\n    } else {\n        cam=lookat+vec3(cos(my)*cos(mx),sin(my),cos(my)*sin(mx))*6.0;\n    }\n    \n\tvec3 ray=normalize(lookat-cam);\n\tvec3 cX=normalize(cross(vec3(0.0,1.0,0.0),ray));\n\tvec3 cY=normalize(cross(cX,ray));\n\tvec3 rd = normalize(ray*p_o8705_CamD+cX*uv.x+cY*uv.y);\n\tvec3 ro = cam;\n\t\n\tfloat d=0.;\n\tvec3 p=vec3(0);\n\tfloat dS=0.0;\n\tmarch_o8705(d,p,dS,ro,rd, _seed_variation_);\n\t\n    vec3 color=vec3(0.0);\n\tvec3 objColor=o8705_input_mfsdf(vec4(p,1.0), _seed_variation_).xyz;   \/\/ 1 - BaseColor (r,g,b,sdf) linear (0-1) \n\tfloat objSpecular=o8705_input_mfsdf(vec4(p,4.0), _seed_variation_).x*0.2;  \/\/ 4 - Specular  (v,0,0,sdf)\n\tfloat objRoughness=o8705_input_mfsdf(vec4(p,5.0), _seed_variation_).x; \/\/ 5 - Roughness (v,0,0,sdf)\n\tvec3 light=normalize(vec3(p_o8705_SunX,p_o8705_SunY,p_o8705_SunZ));\n\tif (d<50.0) {\n\t    vec3 n=normal_o8705(p, _seed_variation_);\n\t\tfloat l=clamp(dot(-light,-n),0.0,1.0);\n\t\tvec3 ref=normalize(reflect(rd,-n));\n\t\tfloat r=clamp(dot(ref,light),0.0,1.0);\n\t\tfloat cAO=mix(1.0,calcAO_o8705(p,n, _seed_variation_),p_o8705_AmbOcclusion);\n\t\tfloat shadow=mix(1.0,calcSoftshadow_o8705(p,light,0.05,5.0, _seed_variation_),p_o8705_Shadow);\n\t\tcolor=min(vec3(max(shadow,p_o8705_AmbLight)),max(l,p_o8705_AmbLight))*max(cAO,p_o8705_AmbLight)*objColor+4.0*pow(r,pow(256.0,(1.0-objRoughness)))*objSpecular;\n\t\t\/\/reflection\n\t\td=0.01;\n\t\tmarch_o8705(d,p,dS,p,ref, _seed_variation_);\n\t\tvec3 objColorRef=vec3(0);\n\t\tif (d<50.0) {\n\t\t\tobjColorRef=o8705_input_mfsdf(vec4(p,1.0), _seed_variation_).xyz;\n\t\t\tn=normal_o8705(p, _seed_variation_);\n\t\t\tl=clamp(dot(-light,-n),0.0,1.0);\n\t\t\tobjColorRef=max(l,p_o8705_AmbLight)*objColorRef;\n\t\t} else {\n\t\t\tobjColorRef=o8705_input_hdri(equirectangularMap(ref.xzy), _seed_variation_).xyz;\n\t\t}\n\t\tcolor=mix(color,objColorRef,objSpecular);\n\t} else {\n\t\tcolor=o8705_input_hdri(equirectangularMap(rd.xzy), _seed_variation_).xyz;\n\t}\n\treturn pow(color,vec3(1.0\/p_o8705_Gamma));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float minSize = min(iResolution.x, iResolution.y);\n    float _seed_variation_ = SEED_VARIATION;\n    vec2 UV = vec2(0.0, 1.0) + vec2(1.0, -1.0) * (fragCoord-0.5*(iResolution.xy-vec2(minSize)))\/minSize;\n    vec3 o8705_0_1_rgb = raymarch_o8705((UV), _seed_variation_);\n    fragColor = vec4(pow(o8705_0_1_rgb,vec3(1.0\/1.2)), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}}