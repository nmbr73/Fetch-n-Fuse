{"Shader":{"ver":"0.1","info":{"id":"NdKXDm","date":"1634862763","viewed":528,"name":"Jelly Gateways","username":"Tater","description":"sss looks nice","likes":35,"published":3,"flags":0,"usePreview":0,"tags":["3d","raymarching","sss","bounce"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"#define MDIST 100.0\n#define STEPS 128.0\n#define pi 3.1415926535\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define pmod(p,x) (mod(p,x)-0.5*(x))\n\nvec3 rdg = vec3(0);\nvec3 hsv(vec3 c){\n    vec4 K = vec4(1.0, 2.0 \/ 3.0, 1.0 \/ 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\/\/iq box sdf\nfloat ebox(vec3 p, vec3 b){\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat ebox(vec2 p, vec2 b){\n  vec2 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,q.y),0.0);\n}\n\nfloat lim(float p, float s, float lima, float limb){\n    return p-s*clamp(round(p\/s),lima,limb);\n}\nfloat idlim(float p, float s, float lima, float limb){\n    return clamp(round(p\/s),lima,limb);\n}\n\nfloat dibox(vec3 p,vec3 b,vec3 rd){\n    vec3 dir = sign(rd)*b;   \n    vec3 rc = (dir-p)\/rd;\n    float dc = min(rc.y,rc.z)+0.01;\n    return dc;\n}\nfloat easeOutBounce(float x) {\n    float n1 = 7.5625;\n    float d1 = 2.75;\n    if (x < 1. \/ d1) {\n        return n1 * x * x;\n    } \n    else if (x < 2. \/ d1) {\n        return n1 * (x -= 1.5 \/ d1) * x + 0.75;\n    } \n    else if (x < 2.5 \/ d1) {\n        return n1 * (x -= 2.25 \/ d1) * x + 0.9375;\n    } \n    else {\n        return n1 * (x -= 2.625 \/ d1) * x + 0.984375;\n    }\n}\nvec3 map(vec3 p){\n    float t = -iTime*0.8;\n    vec3 rd2 = rdg;\n    vec2 a = vec2(1);\n    vec2 b = vec2(2);\n    p.xz*=rot(t*0.3*pi\/3.);\n    rd2.xz*=rot(t*0.3*pi\/3.);\n    \/\/p.xz*=rot(pi\/4.);\n    \/\/rd2.xz*=rot(pi\/4.); \n    vec3 po = p;\n    float dsz = 0.45;\n    float m = 2.42-dsz;\n    float bs = 1.-dsz*0.5;\n    \n    \/\/VERTIAL TRANSLATION\n    p.y+=t*m;\n    \n    \/\/VERTIAL REP\n    float id1 = floor(p.y\/m);\n    p.y = pmod(p.y,m);\n    \n    \/\/ROTATE EACH LAYER\n    p.xz*=rot(id1*pi\/2.);\n    rd2.xz*=rot(id1*pi\/2.);\n\n    vec3 p2 = p; \/\/dibox p1\n    \n    \/\/Auxillary boxes positions\n    vec3 p3 = p;\n    vec3 rd3 = rd2;\n     \n    p3.xz*=rot(pi\/2.);\n    rd3.xz*=rot(pi\/2.);\n    vec3 p4 = p3; \n    \n    \n    \/\/HORIZONTAL REP\n    p2.z = pmod(p2.z-m*0.5,m);\n    p4.z = pmod(p4.z-m*0.5,m);\n    \n    float cnt = 100.;\n    float id2 = idlim(p.z,m,-cnt,cnt);\n    float id3 = idlim(p3.z,m,-cnt,cnt);\n    p.z = lim(p.z,m,-cnt,cnt);\n    p3.z = lim(p3.z,m,-cnt,cnt);\n    \n    \n    \/\/CLOSING ANIMATION \n    float close = max((id1-t)*1.,-2.);\n    float close2 = clamp(max((id1-t-0.3)*1.,-2.)*1.4,0.,1.);\n    close+=id2*0.025;\n    close = clamp(close*1.4,0.,1.);\n    close = easeOutBounce(close);\n    \/\/close = 1.0-easeOutBounce(1.-close);\n\n    \n    \n    \/\/CLOSING OFFSET\n    p.x = abs(p.x)-34.5*0.5-0.25*7.;\n    p.x-=close*34.5*0.52-0.055;\n    \n    p3.x = abs(p3.x)-36.5;\n\n    p.x-=((id1-t)*0.55)*close*2.4;\n    p3.x-=((id1-t)*0.55)*close2*2.4;\n    \/\/WAVEY\n    p.x+=(sin(id1+id2-t*6.0)*0.18+4.)*close*2.4;\n    p3.x+=(sin(id1+id3-t*6.0)*0.18+4.)*smoothstep(0.,1.,close2)*2.4;\n    \n    \n    \/\/BOX SDF\n    a = vec2(ebox(p,vec3(7.5*2.5,bs,bs))-0.2,id2);\n    \n    \/\/AUXILLARY BOX\n    b = vec2(ebox(p3,vec3(7.5*2.5,bs,bs))-0.2,id3);\n    \n    a=(a.x<b.x)?a:b;\n    \/\/ARTIFACT REMOVAL\n    float c = dibox(p2,vec3(1,1,1)*m*0.5,rd2)+.1;\n    \/\/ARTIFACT REMOVAL 2\n    c = min(c,dibox(p4,vec3(1,1,1)*m*0.5,rd3)+.1);\n    \n\n    float nsdf = a.x;\n    \n    a.x = min(a.x,c); \/\/Combine artifact removal\n    a.y = id1;\n    return vec3(a,nsdf);\n}\nvec3 norm(vec3 p){\n    vec2 e = vec2(0.005,0);\n    return normalize(map(p).x-vec3(\n    map(p-e.xyy).x,\n    map(p-e.yxy).x,\n    map(p-e.yyx).x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)\/iResolution.y;\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0,13,-5)*1.5;\n    if(iMouse.z>0.){\n    ro.yz*=rot(1.0*(iMouse.y\/iResolution.y-0.2));\n    ro.zx*=rot(-7.0*(iMouse.x\/iResolution.x-0.5));\n    }\n    vec3 lk = vec3(0,0,0);\n    vec3 f = normalize(lk-ro);\n    vec3 r = normalize(cross(vec3(0,1,0),f));\n    vec3 rd = normalize(f*(0.5)+uv.x*r+uv.y*cross(f,r));  \n    rdg = rd;\n    vec3 p = ro;\n    float dO = 0.;\n\n    vec3 d= vec3(0);\n    for(float i = 0.; i<STEPS; i++){\n        p = ro+rd*dO;\n        d = map(p);\n        dO+=d.x;\n        if(abs(d.x)<0.005){\n            break;\n        }\n        if(dO>MDIST){\n            dO = MDIST;\n            break;\n        }\n    }\n\n    {\n        vec3 ld = normalize(vec3(0,45,0)-p);\n      \n        \/\/sss from nusan\n        float sss=0.01;\n        for(float i=1.; i<20.; ++i){\n            float dist = i*0.09;\n            sss += smoothstep(0.,1.,map(p+ld*dist).z\/dist)*0.023;\n        }\n        vec3 al = vec3(0.204,0.267,0.373);\n        vec3 n = norm(p);\n        vec3 r = reflect(rd,n);\n        float diff = max(0.,dot(n,ld));\n        float amb = dot(n,ld)*0.45+0.55;\n        float spec = pow(max(0.,dot(r,ld)),40.0);\n        float fres = pow(abs(.7+dot(rd,n)),3.0);     \n        \/\/ao from blackle \n        #define AO(a,n,p) smoothstep(-a,a,map(p+n*a).z)\n        float ao = AO(.3,n,p)*AO(.5,n,p)*AO(.9,n,p);\n\n        col = al*\n        mix(vec3(0.169,0.000,0.169),vec3(0.984,0.996,0.804),mix(amb,diff,0.75))\n        +spec*0.3+fres*mix(al,vec3(1),0.7)*0.4;\n        col+=sss*hsv(vec3(fract(d.y*0.5+d.y*0.1+0.001)*0.45+0.5,0.9,1.35));\n        col*=mix(ao,1.,0.85);\n        col = pow(col,vec3(0.75));\n    }\n    col = clamp(col,0.,1.);\n    \/\/col = smoothstep(0.,1.,col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}}