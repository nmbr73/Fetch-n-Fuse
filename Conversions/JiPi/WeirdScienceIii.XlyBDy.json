{"Shader":{"ver":"0.1","info":{"id":"XlyBDy","date":"1543785428","viewed":965,"name":"Weird Science III","username":"wyatt","description":"A mousable experiment in the dark arts of shader witchcraft...\n","likes":43,"published":3,"flags":32,"usePreview":0,"tags":["fluid"],"hasliked":0},"renderpass":[{"inputs":[{"id":24,"src":"\/media\/a\/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","ctype":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"vec2 R;\nvec4 T ( vec2 U ) {return texture(iChannel0,U\/R);}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    R = iResolution.xy;\n    vec4 \n        a = T(U+vec2(1,0)),\n        b = T(U-vec2(1,0)),\n        c = T(U+vec2(0,1)),\n        d = T(U-vec2(0,1));\n        \n    vec4 g = vec4(a.zw-b.zw,c.zw-d.zw);\n    vec2 dz = g.xz;\n    vec2 dw = g.yw;\n   \tvec4 v = T(U-10.*dz);\n    C.xyz = abs(sin(v.z*v.z+0.5+5.*(v.w-length(dw))*vec3(1.1,1.2,1.3)));\n    vec3 n = normalize(vec3(dz,.05));\n    vec4 tx = texture(iChannel1,reflect(vec3(0,0,1),n));\n    C = (n.x*0.3+0.9)*(C)*(0.9+0.1*tx);\n    C *= sqrt(C);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/Fluid Algorithm \nvec2 R;\nfloat ln (vec2 p, vec2 a, vec2 b) { \/\/ returns distance to line segment for mouse input\n    return length(p-a-(b-a)*clamp(dot(p-a,b-a)\/dot(b-a,b-a),0.,1.));\n}\nvec4 T ( vec2 U ) {return texture(iChannel0,U\/R);}\nfloat X (vec2 U, vec2 u, inout vec4 Q, in vec2 r) {\n    vec2 V = U + r, v = T(V).xy;\n    vec4 t = T (V-v);\n    Q.xy -= 0.25*r*(t.z-Q.z+Q.w*t.w*(t.w-Q.w));\n    return 0.5*(length(r-v+u)-length(r+v-u))+t.z;\n}\n\nvoid mainImage( out vec4 Q, in vec2 U )\n{   R = iResolution.xy;\n \tvec2 u = T(U).xy, e = vec2(1,0);\n \tfloat P = 0.; Q = T(U-u);\n \tQ.z = 0.25*(\n       X (U,u,Q, e.xy)+\n \t   X (U,u,Q,-e.xy)+\n \t   X (U,u,Q, e.yx)+\n \t   X (U,u,Q,-e.yx)\n    );\n \tfloat l = length(Q.xy);if(l>0.)Q.xy=mix(Q.xy,Q.w*Q.xy\/l,0.0001);\n \tif (iFrame < 1){if (length(U-0.5*R)<7.)Q=vec4(1); else Q = vec4(0);}\n\tvec4 mo = texture(iChannel2,vec2(0));\n \tl = ln(U,mo.xy,mo.zw);\n \tif (mo.z > 0. && l < 5.) Q.xyzw += vec4((5.-l)*(mo.xy-mo.zw)\/700.,0,1.-Q.w);\n \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/Fluid Algorithm \nvec2 R;\nfloat ln (vec2 p, vec2 a, vec2 b) { \/\/ returns distance to line segment for mouse input\n    return length(p-a-(b-a)*clamp(dot(p-a,b-a)\/dot(b-a,b-a),0.,1.));\n}\nvec4 T ( vec2 U ) {return texture(iChannel0,U\/R);}\nfloat X (vec2 U, vec2 u, inout vec4 Q, in vec2 r) {\n    vec2 V = U + r, v = T(V).xy;\n    vec4 t = T (V-v);\n    Q.xy -= 0.25*r*(t.z-Q.z+Q.w*t.w*(t.w-Q.w));\n    return 0.5*(length(r-v+u)-length(r+v-u))+t.z;\n}\n\nvoid mainImage( out vec4 Q, in vec2 U )\n{   R = iResolution.xy;\n \tvec2 u = T(U).xy, e = vec2(1,0);\n \tfloat P = 0.; Q = T(U-u);\n \tQ.z = 0.25*(\n       X (U,u,Q, e.xy)+\n \t   X (U,u,Q,-e.xy)+\n \t   X (U,u,Q, e.yx)+\n \t   X (U,u,Q,-e.yx)\n    );\n \tfloat l = length(Q.xy);if(l>0.)Q.xy=mix(Q.xy,Q.w*Q.xy\/l,0.0001);\n \tif (iFrame < 1){if (length(U-0.5*R)<7.)Q=vec4(1); else Q = vec4(0);}\n\tvec4 mo = texture(iChannel2,vec2(0));\n \tl = ln(U,mo.xy,mo.zw);\n \tif (mo.z > 0. && l < 5.) Q.xyzw += vec4((5.-l)*(mo.xy-mo.zw)\/700.,0,1.-Q.w);\n \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":259,"channel":0}],"code":"\/\/Fluid Algorithm \nvec2 R;\nfloat ln (vec2 p, vec2 a, vec2 b) { \/\/ returns distance to line segment for mouse input\n    return length(p-a-(b-a)*clamp(dot(p-a,b-a)\/dot(b-a,b-a),0.,1.));\n}\nvec4 T ( vec2 U ) {return texture(iChannel0,U\/R);}\nfloat X (vec2 U, vec2 u, inout vec4 Q, in vec2 r) {\n    vec2 V = U + r, v = T(V).xy;\n    vec4 t = T (V-v);\n    Q.xy -= 0.25*r*(t.z-Q.z+Q.w*t.w*(t.w-Q.w));\n    return 0.5*(length(r-v+u)-length(r+v-u))+t.z;\n}\n\nvoid mainImage( out vec4 Q, in vec2 U )\n{   R = iResolution.xy;\n \tvec2 u = T(U).xy, e = vec2(1,0);\n \tfloat P = 0.; Q = T(U-u);\n \tQ.z = 0.25*(\n       X (U,u,Q, e.xy)+\n \t   X (U,u,Q,-e.xy)+\n \t   X (U,u,Q, e.yx)+\n \t   X (U,u,Q,-e.yx)\n    );\n \tfloat l = length(Q.xy);if(l>0.)Q.xy=mix(Q.xy,Q.w*Q.xy\/l,0.0001);\n \tif (iFrame < 1){if (length(U-0.5*R)<7.)Q=vec4(1); else Q = vec4(0);}\n\tvec4 mo = texture(iChannel2,vec2(0));\n \tl = ln(U,mo.xy,mo.zw);\n \tif (mo.z > 0. && l < 5.) Q.xyzw += vec4((5.-l)*(mo.xy-mo.zw)\/700.,0,1.-Q.w);\n \n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":260,"channel":0}],"code":"\/\/ keep track of mouse\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 p = texture(iChannel0,fragCoord\/iResolution.xy);\n    if (iMouse.z>0.) {\n        if (p.z>0.) fragColor =  vec4(iMouse.xy,p.xy);\n    \telse fragColor =  vec4(iMouse.xy,iMouse.xy);\n    }\n    else fragColor = vec4(-iResolution.xy,-iResolution.xy);\n}","name":"Buffer D","description":"","type":"buffer"}]}}