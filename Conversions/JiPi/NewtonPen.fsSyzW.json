{
 "ver": "0.1",
 "info": {
  "id": "fsSyzW",
  "date": "0",
  "viewed": 0,
  "name": "Fork Newton Pen JiPi 312",
  "description": "Pendule de Newton",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "reproduction"
  ],
  "hasliked": 0,
  "parentid": "7sXyzX",
  "parentname": "Newton Pendulum"
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "XsfGzn",
     "filepath": "/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg",
     "type": "cubemap",
     "channel": 0,
     "sampler": {
      "filter": "mipmap",
      "wrap": "clamp",
      "vflip": "false",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "#define MAX_STEPS 100\n#define MAX_DIST 50.\n#define SURF_DIST .005\n\nconst int mat_support = 1;\nconst int mat_bar = 2;\nconst int mat_ball = 3;\nconst int mat_line = 4;\n\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat SDFbox(vec3 pos, vec3 dim) {\n    vec3 p = abs(pos) - dim;;\n    return length(max(p, 0.)) + min(max(p.x, max(p.y, p.z)), 0.);;\n}\n\nfloat SDFsphere(vec3 pos, float r) {\n    return length(pos) - r;\n}\n\nfloat SDF2box(vec2 pos, vec2 dim) {\n    vec2 p = abs(pos) - dim;\n    return length(max(p, 0.)) + min(max(p.x, p.y), 0.);;\n}\n\nfloat SDFring(vec2 pos, float r) {\n    return length(pos) - r;\n}\n\nfloat SDFseg(vec3 pos, vec3 a, vec3 b) {\n    vec3 segDir = b - a;\n    float t = max(min(dot(pos - a, segDir)/dot(segDir, segDir), 1.), 0.);\n    vec3 q = a + t * (b - a);\n    return length(pos - q);\n}\n\nvec2 SDFball(vec3 pos, float a) {\n    \n    pos.y -= 1.8;\n    pos.yx *= Rot(a);\n    pos.y += 1.8;\n    \n    float sphereDist = SDFsphere(pos - vec3(0, .5, 0), .2);\n    float ring = length(vec2(SDFring(pos.yx - vec2(.7, 0.), .03), pos.z)) - .01;\n    \n    vec3 sim = pos;\n    sim.z = abs(sim.z);\n    float line = SDFseg(sim, vec3(0, .7, 0), vec3(0., 1.8, .5))-0.008;\n    \n    sphereDist = min(sphereDist, ring);\n    \n    float dist = min(sphereDist, line); \n    \n    return vec2(dist, sphereDist == dist ? mat_ball : mat_line);\n}\n\nvec2 mini(vec2 a, vec2 b) {\n    return a.x < b.x ? a : b;\n}\n\nvec2 GetDist(vec3 pos) {\n\tvec4 sphere = vec4(0, 1, 6, 1);\n    \n    float a = 0.78 * cos(iTime * 1.5) * min(10. / iTime, 1.);\n    float aplus = min(a, 0.);\n    float amin = max(a, 0.);\n    \n    vec2 ball1 = SDFball(pos, 0.05 * a);\n    vec2 ball2 = SDFball(pos - vec3(.41, .0, 0), aplus * 0.02 + amin * 0.07);\n    vec2 ball3 = SDFball(pos - vec3(.82, .0, 0), amin + 0.01 * aplus);\n    vec2 ball4 = SDFball(pos - vec3(-.41, .0, 0), aplus * 0.07 + amin * 0.02);\n    vec2 ball5 = SDFball(pos - vec3(-.82, .0, 0), aplus + 0.01 * amin);\n    \n    float support = SDFbox(pos - vec3(0, 0, 0), vec3(1.5, .1, .7)-0.05) - 0.05;\n    support = max(support, -pos.y);\n    \n    float bar = length(vec2(SDF2box(pos.yx, vec2(1.8, 1.3)), abs(pos.z) - 0.5)) - 0.05;\n    bar = max(bar, -pos.y);\n    \n    vec2 ball = mini(mini(mini(mini(ball1, ball2), ball3), ball4), ball5);\n    \n    float dist = min(min(support, bar), ball.x);\n    \n    int mat = 0;\n    \n    if (dist == support) mat = mat_support;\n    else if (dist == bar) mat = mat_bar;\n    else if (dist == ball.x) mat = int(ball.y);\n    \n    return vec2(dist, mat);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    vec2 dS = vec2(0.);\n    for (int i = 0; i < MAX_STEPS; i++) {\n    \tvec3 pos = ro + rd * dO;\n        dS = GetDist(pos);\n        dO += dS.x;\n        if(dO > MAX_DIST || dS.x < SURF_DIST) break;\n    }\n    \n    return vec2(dO, dS.y);\n}\n\nvec3 GetNormal(vec3 pos) {\n\tfloat dist = GetDist(pos).x;\n    vec2 eps = vec2(.01, 0);\n    \n    vec3 norm = dist - vec3(\n        GetDist(pos - eps.xyy).x,\n        GetDist(pos - eps.yxy).x,\n        GetDist(pos - eps.yyx).x);\n    \n    return normalize(norm);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvec3 Render(inout vec3 ro, inout vec3 rd, inout vec3 ref, bool last) {\n\n   vec3 col = texture(iChannel0, rd).rgb;\n\n   vec2 d = RayMarch(ro, rd);\n\n   if(d.x<MAX_DIST) {\n      vec3 p = ro + rd * d.x;\n      vec3 n = GetNormal(p);\n      vec3 r = reflect(rd, n);\n      \n      float fresnel = pow(1. - abs(dot(n, -rd)), 5.);\n\n      float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n       \n      if (int(d.y) == mat_support) {\n          ref *= vec3(mix(0.01, 0.5, fresnel));\n          col = vec3(dif) * 0.1;\n      } else if (int(d.y) == mat_bar) {\n          ref *= vec3(0.9);\n          col = vec3(dif) * 0.1;\n      } else if (int(d.y) == mat_ball) {\n          ref *= vec3(0.9, 0.65, 0.2);\n          col = vec3(dif) * 0.1;\n      } else if (int(d.y) == mat_line) {\n          ref = vec3(0.01);\n          col = vec3(dif) * 0.1;\n      }\n      \n      if (last) col += texture(iChannel0, r).rgb;\n      \n      ro = p + 3. * n * SURF_DIST;\n      rd = r;\n      \n   } else ref = vec3(0.);\n   \n   return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0, 0.75, 0), 1.6);\n    \n    vec3 ref = vec3(1.);\n    \n    vec3 col = Render(ro, rd, ref, false);\n    \n    int NB_BOUNCE = 2;\n    for (int i = 0; i < NB_BOUNCE; i++) {\n        col += ref * Render(ro, rd, ref, i + 1 == NB_BOUNCE);\n    }\n    \n    col = pow(col, vec3(.4545));\n\n    fragColor = vec4(col,1.0);\n}",
   "name": "Image",
   "description": "",
   "type": "image"
  }
 ]
}