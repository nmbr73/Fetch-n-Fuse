{
 "ver": "0.1",
 "info": {
  "id": "7tSBWy",
  "date": "0",
  "viewed": 0,
  "name": "Fire - CLIP Guided JiPi",
  "description": "Created after AIAIART lesson #8 \nPrompt: 'Blue fire (high detail)' with a fire stock pic\nClick to draw\nNotebook: (https://colab.research.google.com/drive/1Qpx_4wWXoiwTRTCAP1ohpoPGwDIrp9z-?usp=sharing) \nFull course: https://github.com/johnowhitaker/aiaiart",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "clip",
   "nca"
  ],
  "hasliked": 0,
  "parentid": "7t2BRt",
  "parentname": "Fire - CLIP Guided NCA"
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Apply zoom (can't figure out how to re-size buffers \n    // so this wastes a lot of compute updating the offscreen parts)\n    uv = uv/2.;\n\n    // Read the buffer\n    vec3 col = (texture(iChannel0, uv).xyz-vec3(0.5))*10. + vec3(0.5);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
   "name": "Image",
   "description": "",
   "type": "image"
  },
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "nearest",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dXGR8",
     "channel": 0
    }
   ],
   "code": "const int nh = 16;\nfloat b1[16] = float[16](-0.08895750343799591,0.18693439662456512,-0.10215640813112259,-0.024140266701579094,0.18812014162540436,-0.07431676983833313,-0.12879067659378052,0.03979669138789177,0.2254195362329483,-0.06369420140981674,-0.30846360325813293,0.16137394309043884,0.1556674689054489,-0.1745125949382782,0.1329338252544403,-0.067245468497276);\nfloat w1[256] = float[256](-0.17538994550704956,0.03855049982666969,0.08165260404348373,-0.14766085147857666,-0.02373511530458927,-0.2490570843219757,-0.1484002321958542,0.06332766264677048,0.10011060535907745,-0.12271863222122192,-0.2196660041809082,0.21127456426620483,-0.12545527517795563,-0.027151215821504593,-0.16981707513332367,0.33738356828689575,0.18344354629516602,-0.1075463593006134,0.0943426862359047,-0.16966302692890167,-0.10908016562461853,0.007943480275571346,-0.3311920464038849,-0.09868557006120682,0.12230853736400604,0.004595356062054634,0.17450831830501556,0.005308826919645071,0.044737558811903,-0.017442287877202034,0.15108662843704224,-0.14895953238010406,-0.04069491848349571,0.18987856805324554,0.3156944215297699,-0.005401331000030041,0.18259763717651367,0.13264232873916626,0.03851276636123657,-0.13628703355789185,0.1341724544763565,0.25316381454467773,-0.1470995396375656,-0.13439320027828217,0.040220461785793304,-0.20559747517108917,0.1800473928451538,-0.0002454333589412272,0.07688765972852707,0.02420109137892723,-0.04731504246592522,0.02109590545296669,0.21335481107234955,-0.08263152092695236,0.0447159968316555,-0.10803763568401337,-0.49729350209236145,0.09099029749631882,-0.19540812075138092,0.1443025767803192,-0.021960992366075516,0.03461490571498871,0.06777437031269073,-0.010916417464613914,0.2381315380334854,-0.033299099653959274,-0.06279874593019485,-0.19658906757831573,-0.26830488443374634,-0.14546595513820648,-0.05664119869470596,0.15428569912910461,0.011553062126040459,0.069498710334301,0.21324172616004944,-0.113709457218647,0.07002183049917221,0.09510045498609543,-0.18323026597499847,-0.15222716331481934,-0.28965842723846436,0.21824991703033447,-0.19380316138267517,0.062099188566207886,0.045887596905231476,0.05893059819936752,0.033645495772361755,0.029329391196370125,0.1350502073764801,-0.10810217261314392,0.511446475982666,0.10979679971933365,0.17629536986351013,-0.16141656041145325,-0.3354191482067108,0.1085849329829216,0.31670624017715454,0.034256596118211746,-0.2253265529870987,-0.16446612775325775,-0.057897813618183136,0.16564732789993286,-0.1417941451072693,-0.012188063003122807,-0.2710506021976471,0.029657378792762756,0.4347728490829468,0.10073438286781311,0.16368240118026733,-0.18598425388336182,0.04434695094823837,-0.1657513827085495,-0.10746873170137405,0.0125033063814044,-0.0959276556968689,-0.0766681581735611,-0.24970467388629913,-0.05779816955327988,0.31133559346199036,0.18552234768867493,0.028687776997685432,0.10550782829523087,-0.19570505619049072,-0.1048639565706253,-0.07463487982749939,0.1563020944595337,-0.22440236806869507,0.011139017529785633,-0.2538111209869385,-0.2016170769929886,0.11734951287508011,-0.03985316678881645,0.10761170089244843,0.12031695246696472,-0.29957082867622375,-0.043218739330768585,0.05417516455054283,0.07410135120153427,0.17873908579349518,-0.07141170650720596,-0.07378138601779938,0.24421265721321106,-0.035165730863809586,0.24185553193092346,-0.16343095898628235,0.22406195104122162,-0.27038171887397766,-0.06103401258587837,-0.08732513338327408,-0.1371515840291977,-0.032978255301713943,-0.06549771130084991,0.21419751644134521,-0.03661757707595825,0.12526869773864746,-0.024184035137295723,-0.017598751932382584,0.25899645686149597,0.018404759466648102,0.10164565593004227,0.16457168757915497,-0.15311762690544128,0.039011150598526,-0.04826344549655914,0.4582711160182953,0.030577054247260094,0.023693779483437538,-0.0951155424118042,0.12568223476409912,-0.11163457483053207,-0.021251361817121506,-0.1053682342171669,-0.36821627616882324,0.11941825598478317,-0.08583606779575348,-0.027468634769320488,-0.09861423820257187,0.09845112264156342,0.08721500635147095,-0.10322127491235733,-0.027852635830640793,0.20933109521865845,0.11382760852575302,0.1794089376926422,-0.11161337792873383,-0.13195928931236267,0.0422213077545166,-0.13869695365428925,-0.2776845693588257,0.004577492829412222,0.08321597427129745,0.12409359961748123,-0.282514363527298,0.003967860247939825,0.035535912960767746,0.046880368143320084,0.19380797445774078,-0.23538970947265625,0.05777479708194733,0.037038352340459824,-0.10826721042394638,-0.06837452948093414,0.11615559458732605,0.20270438492298126,-0.009319406002759933,0.05583568662405014,-0.11071541160345078,-0.11987776309251785,-0.3190040588378906,0.016342859715223312,0.02127709425985813,0.05506376177072525,-0.13646696507930756,0.06087152659893036,0.1721249669790268,0.1857776641845703,0.0012511992827057838,-0.05972207337617874,-0.029523087665438652,0.12509272992610931,0.09803437441587448,0.2775399088859558,0.07620524615049362,0.024330126121640205,-0.14265844225883484,0.2508087754249573,0.13173101842403412,0.02916962467133999,0.2508510947227478,0.20654040575027466,-0.0837550088763237,-0.10586166381835938,0.01163567416369915,0.14324212074279785,0.02335534244775772,0.03753381595015526,0.17961688339710236,0.0891367495059967,-0.0663166344165802,-0.07575946301221848,-0.09042377769947052,-0.004548458382487297,-0.27805253863334656,0.015290386974811554,-0.045146431773900986,0.022893786430358887,0.010668765753507614,0.05474739149212837,-0.013290387578308582,0.19267752766609192,-0.11639795452356339,0.0012045663315802813,0.05235595256090164,-0.2009762078523636,-0.43161725997924805,-0.009418309666216373);\nfloat w2[64] = float[64](-0.04414569213986397,0.022859349846839905,0.08226073533296585,0.059783902019262314,-0.011974467895925045,-0.038100969046354294,-0.10772471874952316,0.005907976068556309,-0.041200488805770874,0.13681508600711823,-0.1138051375746727,0.019381461665034294,-0.019134297966957092,0.035059645771980286,-0.00357038457877934,0.12725113332271576,-0.019092170521616936,-0.021353283897042274,0.0314985066652298,0.021054131910204887,0.06488154828548431,0.06785503029823303,0.0043592872098088264,0.029217198491096497,-0.05179942771792412,0.012522397562861443,-0.031925685703754425,-0.0006831183563917875,-0.1021195575594902,0.13815537095069885,-0.0624132864177227,0.12429018318653107,-0.0081572150811553,-0.09804004430770874,-0.07723874598741531,0.14247852563858032,0.0025283198338001966,0.18660148978233337,0.08029906451702118,0.02700551599264145,0.0092658381909132,-0.10082653909921646,-0.07435271143913269,-0.04526136443018913,-0.03862662985920906,0.02600231021642685,-0.030226051807403564,0.05653006210923195,0.10955865681171417,-0.05347215011715889,-0.1068786159157753,0.033370472490787506,-0.05758747085928917,-0.0023922377731651068,-0.017472079023718834,0.024705134332180023,0.02636687271296978,-0.020633861422538757,0.07676155865192413,0.070289745926857,-0.05414354428648949,-0.01701180823147297,0.0040817176923155785,-0.049242325127124786);\n\n\n// Random Number Generator\n// From https://www.shadertoy.com/view/MsKGWz:\n// See Stack Overflow: http://stackoverflow.com/questions/5149544/can-i-generate-a-random-number-inside-a-pixel-shader/10625698#10625698\nfloat random_1( vec2 p )\n{\n    vec2 r = vec2(\n        23.14069263277926, // e^pi (Gelfond's constant)\n         2.665144142690225 // 2^sqrt(2) (Gelfondâ€“Schneider constant)\n    );\n    return fract( cos( mod( 12345678., 256. * dot(p,r) ) ) );\n}\n\n// Samples the neighbourhood (wrapping around where needed)\nvec2 coord (vec2 fragCoord, vec2 offset){\n    float x = mod(fragCoord.x + offset.x, iResolution.x);\n    float y = mod(fragCoord.y + offset.y, iResolution.y);\n    return vec2(x, y)/iResolution.xy;\n}\nvec4[9] sample_tex (vec2 fragCoord){\n    vec4 tex[9] = vec4[9](\n        (texture(iChannel0, coord(fragCoord, vec2(-1, 1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(0, 1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(1, 1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(-1, 0)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(0, 0)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(1, 0)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(-1, -1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(0, -1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(1, -1)))-0.5)*10.\n    );\n    return tex;\n}\n\n// The four kernels used\nvec4 ident(vec2 fragCoord, vec4[9] tex){\n    return tex[4]; // no offset\n}\nvec4 sobel_x(vec2 fragCoord, vec4[9] tex){\n    vec4 result = -1.*tex[0]-2.*tex[3]-1.*tex[6]+1.*tex[2]+2.*tex[5]+1.*tex[8];\n    return result;\n}\nvec4 sobel_y(vec2 fragCoord, vec4[9] tex){\n    vec4 result = -1.*tex[0]-2.*tex[1]-1.*tex[2]+1.*tex[6]+2.*tex[7]+1.*tex[8];\n    return result;\n}\nvec4 lap(vec2 fragCoord, vec4[9] tex){\n    vec4 result = 1.*tex[0]+2.*tex[1]+1.*tex[2]+2.*tex[3]-12.*tex[4]+2.*tex[5]+1.*tex[6]+2.*tex[7]+1.*tex[8]; // was an errant +2.\n    return result;\n}\n\n// Our activation function\nfloat relu(float x){\n    if (x > 0.){return x;}\n    return 0.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Sample BufC for kernels\n    vec4 tex[9] = sample_tex(fragCoord);\n    \n    // Apply filters\n    vec4 id = ident(fragCoord, tex);\n    vec4 sx = sobel_x(fragCoord, tex);\n    vec4 sy = sobel_y(fragCoord, tex);\n    vec4 ll = lap(fragCoord, tex);\n    \n    // Create x (4 channels x 4 filters, per channel conv)\n    float x[16];\n    x[0] = id.x;x[1] = sx.x;x[2] = sy.x;x[3] = ll.x;\n    x[4] = id.y;x[5] = sx.y;x[6] = sy.y;x[7] = ll.y;\n    x[8] = id.z;x[9] = sx.z;x[10] = sy.z;x[11] = ll.z;\n    x[12] = id.w;x[13] = sx.w;x[14] = sy.w;x[15] = ll.w;\n    \n    \n    // First layer \n    float l1_out[nh];\n    for (int i = 0; i < nh; i++){\n        // Dot Product equivalent to:\n        // dot_product = x @ w1_i\n        float dot_product = 0.;\n        for (int j = 0; j < 16; j++){\n            dot_product += x[j]*w1[i*16+j];\n        }\n        // Add bias then RELU\n        l1_out[i] = relu(dot_product+b1[i]);  ;\n    }\n    \n    // Second layer\n    float l2_out[4];\n    for (int i = 0; i < 4; i++){\n        float dp2 = 0.;\n        for (int j = 0; j < nh; j++){\n            dp2 += l1_out[j]*w2[i*nh+j];\n        }\n        l2_out[i] = dp2; \n    }\n    \n    // Proposed update\n    vec4 y = vec4(l2_out[0], l2_out[1], l2_out[2], l2_out[3]);\n    \n    // Output as prev state\n    fragColor = id*0.1 + vec4(0.5);\n    \n    \n    // If (noise>0.5) apply update\n    vec2 p = vec2(uv.x/2.+sin(iTime/1000.), uv.y/2.+cos(iTime/1000.));\n    if (random_1(p) < 0.5){\n        fragColor = (id + y)*0.1 + vec4(0.5);\n    }\n    \n    // If (mouse down) paint grey around it\n    if(length(fragCoord.xy-iMouse.xy/2.)<(20.)){\n        if (iMouse.z>0.5){fragColor = vec4(0.5);}\n    }\n    \n    // Init \n    if (iFrame==0){fragColor = vec4(0.5);}\n    \n    \n}\n",
   "name": "Buffer A",
   "description": "",
   "type": "buffer"
  }
 ]
}