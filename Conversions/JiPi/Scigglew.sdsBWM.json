{"Shader":{"ver":"0.1","info":{"id":"sdsBWM","date":"1644955986","viewed":179,"name":"SCIGGLEW","username":"SnoopethDuckDuck","description":"absolute mess. looked really cool then closed the tab and had to redo it","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","template","artofcode"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"#define MAX_STEPS 400\n#define MAX_DIST 50.\n#define SURF_DIST .001\n\n\/\/nabbed from blacklemori\nvec3 erot(vec3 p, vec3 ax, float rot) {\n  return mix(dot(ax, p)*ax, p, cos(rot)) + cross(ax,p)*sin(rot);\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvec3 distort(vec3 p) {\n    float time = 0.5 * iTime;\n    \n    vec3 q = p;\n    float m = 3.5 + 3. * cos( 0.4 * length(p) -  0.5 * iTime);\n    float th = 0.2 * iTime;\n    for (float i = 0.; i < 9.; i++) {\n        th += -0.1 * iTime;\n        q.xy *= Rot(th);\n        q.zy *= Rot(th);\n        q = abs(q) - m; \/\/sabs cool too\n        m *= 0.28 + 0.1 * i;\n    }\n    \n    float spd = 0.01;\n    \/\/float time = iTime;\n    float cx = cos(time);\n    float cy = cos(time + 2. * pi \/ 3.);\n    float cz = cos(time - 2. * pi \/ 3.);\n    q = erot(q, normalize(vec3(cx,cy,cz)), iTime);\n    return cross(p, q);\n}\n\nfloat GetDist(vec3 p) {\n   \n    \n    float sd = length(p - vec3(0, 3., -3.5)) - 2.2;\n    \n    \/\/p = mix(sabs(p) - 0., sabs(p) - 1., 0.5 + 0.5 * thc(4., iTime));\n    \n    p = distort(p);\n    \/\/p.xz *= Rot(4. * p.y + iTime);\n   \/\/ p = sabs(p) - 0.25;\n    float d = length(p) - 1.; \/\/ was 0.8\n    d *= 0.05; \/\/smaller than I'd ike it to be\n    d = -smin(-d, sd); \n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, float z) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = z * GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)\/iResolution.y;\n\tvec2 m = iMouse.xy\/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3.5);\n   \/\/ ro.yz *= Rot(-m.y*3.14+1.);\n    \/\/ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 0.5);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd, 1.);\n\n    float IOR = 1.5;\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        \/\/vec3 r = reflect(rd, n);\n        \/*\n        vec3 rdIn = refract(rd, n, 1.\/IOR);\n        vec3 pIn = p - 30. * SURF_DIST * n;\n        float dIn = RayMarch(pIn, rdIn, -1.);\n\n        vec3 pExit = pIn + dIn * rdIn;\n        vec3 nExit = GetNormal(pExit);\n        *\/\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n       \/\/ col = vec3(dif);\n        \n        \/\/float fresnel = 1.-pow(1.+dot(rd, n), 1.);\n       \/\/ col = 1. * vec3(fresnel);\n        \n        col = mix(vec3(dif), 0.5 + 0.5 * n, exp(-0.2 * length(p)));\n        \/\/p = distort(p);\n       \n        col *= 1. + 0.6 * thc(3., 4. * n.y - 0. * iTime);\n        col = clamp(col, 0., 1.);\n       \/\/ col *= 1.-exp(-0.5 - 0.5 * p.y);\n        \n        vec3 e = vec3(1.);\n        col *= pal(length(p) * 0.1 + -0.05, e, e, e, 0.4 * vec3(0,1,2)\/3.);\n        col = clamp(col, 0., 1.);\n        col *= 2. * exp(-0.2 * length(p));\n        col *= 0.8 + 0.2 * n.y;\n       \n        \/\/col += dif;\n    }\n    \n    col = pow(col, vec3(.4545));\t\/\/ gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159\n\n#define thc(a,b) tanh(a*cos(b))\/tanh(a)\n#define ths(a,b) tanh(a*sin(b))\/tanh(a)\n#define sabs(x) sqrt(x*x+1e-2)\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 uv) {\n    return max(max(abs(uv.x), abs(uv.y)), abs(uv.z));\n}\n\n\/\/ (SdSmoothMin) stolen from here: https:\/\/www.shadertoy.com\/view\/MsfBzB\nfloat smin(float a, float b)\n{\n    float k = 0.12;\n    float h = clamp(0.5 + 0.5 * (b-a) \/ k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}","name":"Common","description":"","type":"common"}]}}