{
 "ver": "0.1",
 "info": {
  "id": "ssfBWM",
  "date": "0",
  "viewed": 0,
  "name": "Sound Oscilloscope JiPi 625",
  "description": "Smooth sound oscilloscope based on frequency spectrum.\nIf you have a good PC, set PRECISION to 1.0 and BANDS_COUNT to 256.0 for best quality.",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "oscilloscope",
   "sound",
   "music",
   "visualizer"
  ],
  "hasliked": 0,
  "parentid": "Ws2GWD",
  "parentname": "Sound Oscilloscope from spectrum"
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "4lX3D8",
     "filepath": "https://soundcloud.com/desmond-cheese/dubbin-out",
     "type": "musicstream",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 0
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "//Shader License: CC BY 3.0\n//Author: Jan Mr√≥z (jaszunio15)\n\n#define LINE_WIDTH 1.6\n\n//Precision of one band from 0 to 1\n#define PRECISION 0.25\n\n//Number of bands\n#define BANDS_COUNT 64.0\n\n//From 0 to 1\n#define HIGH_FREQ_APPERANCE 0.7\n\n#define AMPLITUDE 4.0\n\nfloat hash(in float v)\n{\n \treturn fract(sin(v * 124.14518) * 2123.14121) - 0.5;\n}\n\nfloat getBand(in float freq)\n{\n \treturn pow(texture(iChannel0, vec2(freq, 0.0)).r, (2.0 - HIGH_FREQ_APPERANCE));   \n}\n\n\nfloat getSmoothBand(float band, float iterations, float bandStep)\n{\n \tfloat sum = 0.0;\n    for(float i = 0.0; i < iterations; i++)\n    {\n        sum += getBand(band + i * bandStep);\n    }\n    sum = smoothstep(0.2, 1.0, sum / iterations);\n    return sum * sum;\n}\n\nfloat getOsc(float x)\n{\n    x *= 1000.0;\n \tfloat osc = 0.0;\n    for (float i = 1.0; i <= BANDS_COUNT; i++)\n    {\n     \tfloat freq = i / BANDS_COUNT;\n        freq *= freq;\n        float h = hash(i);\n        osc += getSmoothBand(freq, (512.0 / BANDS_COUNT) * PRECISION, ((1.0 / PRECISION) / 512.0)) \n            \t* sin( freq * (x + iTime * 500.0 * h));\n    }\n    osc /= float(BANDS_COUNT);\n    \n    return osc;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \tvec2 res = iResolution.xy;\n    vec2 uv = (2.0 * fragCoord - res) / res.x;\n    uv.x += iTime * 0.5;// + 1.5 * hash(iTime);\n    \n    float ps = 1.0 / min(res.x, res.y);\n    \n    \n    float osc1 = getOsc(uv.x) * AMPLITUDE;\n    \n    float tgAlpha = clamp(fwidth(osc1) * res.x * 0.5, 0.0, 8.0);\n    float verticalThickness = abs(uv.y - osc1) / sqrt(tgAlpha * tgAlpha + 2.0);\n    \n    float line = 1.0 - smoothstep(0.0, ps * LINE_WIDTH, verticalThickness);\n    line = smoothstep(0.0, 0.5, line);\n    \n    float blur = (1.0 - smoothstep(0.0, ps * LINE_WIDTH * 32.0, verticalThickness * 4.0)) * 0.2;\n    \n    fragColor = vec4(line + blur);\n}",
   "name": "Image",
   "description": "",
   "type": "image"
  }
 ]
}