{"Shader":{"ver":"0.1","info":{"id":"tssGDN","date":"1546388747","viewed":1026,"name":"Nimitz's Vorticity Confinement","username":"wyatt","description":"see : https:\/\/www.shadertoy.com\/view\/4tGfDW\nI thought it was super cool and had to give it a try. I just stole his code - I don't understand the physics one bit. (if you're online Nimitz I'd love an explanation or a resource)","likes":26,"published":3,"flags":32,"usePreview":0,"tags":["fluid","nimitz"],"hasliked":0},"renderpass":[{"inputs":[{"id":26,"src":"\/media\/a\/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","ctype":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"vec2 R;\nvec4 T ( vec2 U ) {return texture(iChannel0,U\/R);}\nvec4 P ( vec2 U ) {return texture(iChannel1,U\/R);}\nvoid mainImage( out vec4 C, in vec2 U )\n{\tR = iResolution.xy;\n \t vec4 me = T(U),\n        a = T(U+vec2(1,0)),\n        b = T(U-vec2(1,0)),\n        c = T(U+vec2(0,1)),\n        d = T(U-vec2(0,1));\n \tvec3 n = normalize( vec3(a.z-b.z, c.z-d.z, .1  ));\n \tvec4 p = P(U);\n \tp = p*p*p;\n    C = 1.3*abs(sin(\n        4.*me.zwzw + (\n        p.w*vec4(1,2,3,4)+\n        p.z*vec4(3,2,1,4)+\n        p.y*vec4(2,3,1,4)+\n        p.x*vec4(3,1,2,4))\n    ));\n \tC *= 0.5+0.5*texture(iChannel2,n);\n\t\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"vec2 R;\nvec4 t (vec2 U) { \/\/ access the buffer\n\treturn texture(iChannel0,U\/R);\n}\nvec4 T (vec2 U) {\n    \/\/ sample things where they were, not where they are\n    \/\/ half step backwards through time twice\n\tU -= 0.5*t(U).xy;\n\tU -= 0.5*t(U).xy;\n    return t(U);\n}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n   R = iResolution.xy;\n    \/\/ me and my neighborhoood\n    \/\/ anytime there is a \"0.25*__\"\n    \/\/ this is because we are using a grid\n    \/\/ if we had hexagonal tiling you would see \"1\/6*__\"\n   vec4 me = T(U),\n        n = T(U+vec2(0,1)), \/\/ north  up\n        e = T(U+vec2(1,0)), \/\/ east   left\n        s = T(U-vec2(0,1)), \/\/ south  down\n        w = T(U-vec2(1,0)), \/\/ west   right\n       mu = 0.25*(n+e+s+w); \/\/ average\n   C = me;\n   C.x -= 0.25*(e.z-w.z); \/\/ change in pressure from left to right\n   C.y -= 0.25*(n.z-s.z); \/\/ change in pressure from top to bottom\n   \/\/ divergence plus pressure exchange :\n   C.z = mu.z \/\/ average pressure of neighborhood\n        +0.25*(s.y-n.y+w.x-e.x); \/\/ how much is the neighborhood pushing on me\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ adapted from : https:\/\/www.shadertoy.com\/view\/4tGfDW   \t\n#define SPIN_PERMITIVITY 0.1    \n\/**\/C.w = \n    mix(mu.w,C.w,SPIN_PERMITIVITY) \/\/ neighbors trade spin\n    +\t\t\t SPIN_PERMITIVITY*(\/\/ the curl puts spin into the cell\n        (e.y - w.y - n.x + s.x) - C.w \/\/ difference between the curl and the spin\n    );\n\/**\/C.xy += \n    abs(C.w)* \/\/ the spin of the cell \n    0.25*vec2(\n        n.w-s.w,  \/\/ the baseball shooter force from top to bottom - so it shoots from left to right\n        w.w-e.w); \/\/ the baseball shooter force from the left to the right - so it shoots up or down\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ \n    \n   \n  \/\/ boundary conditions\n   #ifdef VORTEX_SHEDDING_MODE\n   if (length(U-vec2(0.1,0.5)*R)<0.02*R.x) C = mix(C,vec4(0,0,0,1),0.01);\n   if (U.x < 1. || iFrame < 1) C = vec4(0.15,0,0,0);\n   #else\n   if (length(U-vec2(0.1,0.5)*R)<0.02*R.x) C = mix(C,vec4(0.7,0,0,1),0.01);\n   if (length(U-vec2(0.9,0.5)*R)<0.02*R.x) C = mix(C,vec4(-0.7,0,0,1),0.01);\n   if (length(U-vec2(0.5,0.1)*R)<0.02*R.x) C = mix(C,vec4(0,0.7,0,1),0.01);\n   if (length(U-vec2(0.5,0.9)*R)<0.02*R.x) C = mix(C,vec4(0,-0.7,0,1),0.01);\n   if (iFrame < 1) C = vec4(0);\n   #endif\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\nvec2 R;\nvec4 T ( vec2 U ) {return texture(iChannel0,U\/R);}\nvec4 P ( vec2 U ) {return texture(iChannel1,U\/R);}\nvoid mainImage( out vec4 C, in vec2 U )\n{   R = iResolution.xy;\n \tU = U-0.5*T(U).xy;\n \tU = U-0.5*T(U).xy;\n \tC = P(U);\n   #ifdef VORTEX_SHEDDING_MODE\n   if (length(U-vec2(0.1,0.5)*R)<0.02*R.x) C = vec4(0,0,0,1.5);\n   if (U.x < 1. || iFrame < 1) C = vec4(0);\n   #else\n   if (length(U-vec2(0.1,0.5)*R)<0.02*R.x) C.x = 1.;\n   if (length(U-vec2(0.9,0.5)*R)<0.02*R.x) C.y = 1.;\n   if (length(U-vec2(0.5,0.1)*R)<0.02*R.x) C.z = 1.;\n   if (length(U-vec2(0.5,0.9)*R)<0.02*R.x) C.w = 1.;\n   if (iFrame < 1) C = vec4(0);\n   #endif\n \tif (iFrame < 1) C = vec4(0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":259,"channel":0}],"code":"vec2 R;\nvec4 t (vec2 U) { \/\/ access the buffer\n\treturn texture(iChannel0,U\/R);\n}\nvec4 T (vec2 U) {\n    \/\/ sample things where they were, not where they are\n    \/\/ half step backwards through time twice\n\tU -= 0.5*t(U).xy;\n\tU -= 0.5*t(U).xy;\n    return t(U);\n}\nvoid mainImage( out vec4 C, in vec2 U )\n{\n   R = iResolution.xy;\n    \/\/ me and my neighborhoood\n    \/\/ anytime there is a \"0.25*__\"\n    \/\/ this is because we are using a grid\n    \/\/ if we had hexagonal tiling you would see \"1\/6*__\"\n   vec4 me = T(U),\n        n = T(U+vec2(0,1)), \/\/ north  up\n        e = T(U+vec2(1,0)), \/\/ east   left\n        s = T(U-vec2(0,1)), \/\/ south  down\n        w = T(U-vec2(1,0)), \/\/ west   right\n       mu = 0.25*(n+e+s+w); \/\/ average\n   C = me;\n   C.x -= 0.25*(e.z-w.z); \/\/ change in pressure from left to right\n   C.y -= 0.25*(n.z-s.z); \/\/ change in pressure from top to bottom\n   \/\/ divergence plus pressure exchange :\n   C.z = mu.z \/\/ average pressure of neighborhood\n        +0.25*(s.y-n.y+w.x-e.x); \/\/ how much is the neighborhood pushing on me\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ adapted from : https:\/\/www.shadertoy.com\/view\/4tGfDW   \t\n#define SPIN_PERMITIVITY 0.1    \n\/**\/C.w = \n    mix(mu.w,C.w,SPIN_PERMITIVITY) \/\/ neighbors trade spin\n    +\t\t\t SPIN_PERMITIVITY*(\/\/ the curl puts spin into the cell\n        (e.y - w.y - n.x + s.x) - C.w \/\/ difference between the curl and the spin\n    );\n\/**\/C.xy += \n    abs(C.w)* \/\/ the spin of the cell \n    0.25*vec2(\n        n.w-s.w,  \/\/ the baseball shooter force from top to bottom - so it shoots from left to right\n        w.w-e.w); \/\/ the baseball shooter force from the left to the right - so it shoots up or down\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ \n    \n   \n  \/\/ boundary conditions\n   #ifdef VORTEX_SHEDDING_MODE\n   if (length(U-vec2(0.1,0.5)*R)<0.02*R.x) C = mix(C,vec4(0,0,0,1),0.01);\n   if (U.x < 1. || iFrame < 1) C = vec4(0.15,0,0,0);\n   #else\n   if (length(U-vec2(0.1,0.5)*R)<0.02*R.x) C = mix(C,vec4(0.7,0,0,1),0.01);\n   if (length(U-vec2(0.9,0.5)*R)<0.02*R.x) C = mix(C,vec4(-0.7,0,0,1),0.01);\n   if (length(U-vec2(0.5,0.1)*R)<0.02*R.x) C = mix(C,vec4(0,0.7,0,1),0.01);\n   if (length(U-vec2(0.5,0.9)*R)<0.02*R.x) C = mix(C,vec4(0,-0.7,0,1),0.01);\n   if (iFrame < 1) C = vec4(0);\n   #endif\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":260,"channel":0}],"code":"\nvec2 R;\nvec4 T ( vec2 U ) {return texture(iChannel0,U\/R);}\nvec4 P ( vec2 U ) {return texture(iChannel1,U\/R);}\nvoid mainImage( out vec4 C, in vec2 U )\n{   R = iResolution.xy;\n \tU = U-0.5*T(U).xy;\n \tU = U-0.5*T(U).xy;\n \tC = P(U);\n   #ifdef VORTEX_SHEDDING_MODE\n   if (length(U-vec2(0.1,0.5)*R)<0.02*R.x) C = vec4(0,0,0,1.5);\n   if (U.x < 1. || iFrame < 1) C = vec4(0);\n   #else\n   if (length(U-vec2(0.1,0.5)*R)<0.02*R.x) C.x = 1.;\n   if (length(U-vec2(0.9,0.5)*R)<0.02*R.x) C.y = 1.;\n   if (length(U-vec2(0.5,0.1)*R)<0.02*R.x) C.z = 1.;\n   if (length(U-vec2(0.5,0.9)*R)<0.02*R.x) C.w = 1.;\n   if (iFrame < 1) C = vec4(0);\n   #endif\n \tif (iFrame < 1) C = vec4(0);\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\/\/#define VORTEX_SHEDDING_MODE","name":"Common","description":"","type":"common"}]}}