{"Shader":{"ver":"0.1","info":{"id":"NtsBRf","date":"1651316908","viewed":85,"name":"Refraction - Spi3lot","username":"Spi3lot","description":"Refraction!!!","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["reflection","simulation","refraction","light","code","the","physics","art","of","photon","bigwings"],"hasliked":0},"renderpass":[{"inputs":[{"id":22,"src":"\/media\/a\/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","ctype":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ Inspired by https:\/\/youtu.be\/NCpaaLkmXI8\n\n\n\/\/ Better not modify these 6, will probably mess up things\n\/\/ Constants\n#define PI 3.1415926535\n#define TAU 2.0 * PI\n\n\/\/ Ray Marching\n#define EPSILON 0.001\n#define MAX_STEPS 250\n#define MAX_DIST 1000.0\n#define MAX_INTERNAL_REFLECTIONS 10\n\n\n\/\/ Modify these\n\/\/ vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n#define ZOOM 1.0\n#define DISTANCE 5.0\n#define ROTATION_SPEED 0.5\n\n\/\/ My implementation of chromatic aberration (CA) is multiplicative (instead of additive)\n\/\/ which indicates that 1.0 means no aberration and values greater than 1.0 create the\n\/\/ rainbow-like effect of CA. Values in (0.0; 1.0) invert the order of the rainbow colors.\n\/\/ Negative values don't make sense I guess since the ratio of the refractive indices, eta,\n\/\/ would then also be negative\n#define CHROMATIC_ABERRATION 1.025\n#define COLOR vec3(0.0, 1.0, 1.0)\n\/\/#define DARKER_WHEN_THICKER\n\n\/\/ These are the refractive indices\n#define AIR 1.000293\n#define GLASS 1.52\n\/\/ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\nfloat sdSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\n\/\/ https:\/\/iquilezles.org\/articles\/distfunctions\/\nfloat sdRoundBox(vec3 p, vec3 b, float r)\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat GetDist(vec3 p)\n{\n    float minDist = 1e20;\n    \n    \/\/float sphere1 = sdSphere(p, 0.5);\n    float roundBox1 = sdRoundBox(p, vec3(1.0, 1.0 ,1.0), 0.333);\n    \/\/minDist = max(roundBox1, -sphere1);\n    minDist = roundBox1;\n    \n    return minDist;\n}\n\n\nvec3 GetNormal(vec3 p)\n{\n    \/\/return normalize(cross(dFdx(p), dFdy(p)));  \/\/ Works best for voxels\n\n    float d = GetDist(p);\n    vec2 e = vec2(EPSILON, 0);\n    return normalize(d - vec3(GetDist(p - e.xyy),\n                              GetDist(p - e.yxy),\n                              GetDist(p - e.yyx)));\n}\n\n\nfloat RayMarch(vec3 ro, vec3 rd, float side)\n{\n    float dO = 0.0;\n\n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd * dO;\n        float dS = side * GetDist(p);\n        dO += dS;\n        if (abs(dS) <= EPSILON || dO > MAX_DIST) break;\n    }\n    \n    return dO;\n}\n\n\/\/ Correction offset so that RayMarch does not return immediately after starting to march\n\/\/ Add it to the ray origin for reflection\n\/\/ Subtract it from the ray origin for refraction\nvec3 offset(vec3 n)\n{\n    return EPSILON * 2.0 * n;\n}\n\nbool TIR(vec3 refraction)\n{\n    \/\/return dot(refraction, refraction) == 0.;\n    \n    \/\/ Probably faster because the entire expression will be false \n    \/\/ if it encounters one false expression\n    return refraction.x == 0. && refraction.y == 0. && refraction.z == 0.;\n}\n\nvec4 RayMarchRefraction(vec3 pOut, vec3 rd, vec3 nOut, float eta, vec4 color)\n{\n    float etaEnter = eta;  \/\/ AIR \/ GLASS\n    float etaExit = 1.0 \/ eta;  \/\/ GLASS \/ AIR\n\n    vec3 refrDirEnter = refract(rd, nOut, etaEnter);\n\n    \/\/ We need to march for the refraction since we need to know the point of intersection\n    float dIn = RayMarch(pOut - offset(nOut), refrDirEnter, -1.0);\n    float thickness = dIn;\n\n    \/\/ We do not need to check for anything, since we are guaranteed to hit the object\n    \/\/ again when we start to march in the interior of the object\n    vec3 pIn = pOut + refrDirEnter * dIn;\n    vec3 nIn = -GetNormal(pIn);\n    vec3 refrDirExit = refract(refrDirEnter, nIn, etaExit);\n\n    \/\/ TIR -> Total Internal Reflection\n    for (int i = 0; TIR(refrDirExit) && i < MAX_INTERNAL_REFLECTIONS; i++)\n    {\n        refrDirEnter = reflect(refrDirEnter, nIn);\n        dIn = RayMarch(pIn + offset(nIn), refrDirEnter, -1.0);\n        pIn = pIn + refrDirEnter * dIn;\n        nIn = -GetNormal(pIn);\n        refrDirExit = refract(refrDirEnter, nIn, etaExit);\n        thickness += dIn;\n    }\n\n#ifndef DARKER_WHEN_THICKER\n    thickness = 1.0;\n#endif\n\n    return color * texture(iChannel0, refrDirExit) \/ thickness;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) \/ min(iResolution.x, iResolution.y);\n    vec2 mouse = iMouse.xy \/ iResolution.xy;\n\n    vec3 ro;\n\n    if (iMouse.z > 0.0) \n    {\n        float yaw = TAU * mouse.x;\n        float pitch = PI * mouse.y;\n        \n        float cy = cos(yaw);\n        float sy = sin(yaw);\n        float cp = cos(pitch);\n        float sp = sin(pitch);\n        \n        ro = DISTANCE * vec3(cy, cp, sy);\n        ro.xz *= sp;  \/\/ Adjusting X and Z position accordingly when changing the pitch\n    }\n    else\n    {\n        float x = iTime * ROTATION_SPEED;\n        float c = cos(x);\n        float s = sin(x);\n        vec3 cs0 = vec3(c, s, 0);\n        ro = DISTANCE * cs0.xyy;\n    }\n\n    vec3 lookAt = vec3(0),\n         f = normalize(lookAt - ro),\n         r = normalize(cross(f, vec3(0,1,0))),\n         u = cross(r, f),\n         c = ro + f * ZOOM,\n         i = c + uv.x * r + uv.y * u,\n         rd = normalize(i - ro);\n         \n    vec4 col;\n    float dOut = RayMarch(ro, rd, 1.0);\n    \n    if (dOut <= MAX_DIST)\n    {\n        vec3 pOut = ro + rd * dOut;\n        \/\/float distOut = GetDist(pOut);\n       \n        \/\/ We don't need to check for distOut <= EPSILON because the only other thing that\n        \/\/ could've possibly happened when dOut <= MAX_DIST is that we ran out of steps which\n        \/\/ is an indicator that we've very likely hit or got very close to hitting an object\n        \n        vec3 nOut = GetNormal(pOut);\n        vec3 reflDir = reflect(rd, nOut);\n        \n        \/\/ We don't need to march again for the reflection since a box\/sphere\n        \/\/ cannot reflect itself - at least not from the outside\n        vec4 reflCol = texture(iChannel0, reflDir);\n        \n        float eta = AIR \/ GLASS;\n\n        vec4 refrColRed = RayMarchRefraction(pOut, rd, nOut, eta \/ CHROMATIC_ABERRATION, vec4(1,0,0,1));\n        vec4 refrColGreen = RayMarchRefraction(pOut, rd, nOut, eta, vec4(0,1,0,1));\n        vec4 refrColBlue = RayMarchRefraction(pOut, rd, nOut, eta * CHROMATIC_ABERRATION, vec4(0,0,1,1));\n        \n        \/\/vec4 refrCol = max(max(refrColRed, refrColGreen), refrColBlue);\n        vec4 refrCol = refrColRed + refrColGreen + refrColBlue;\n        refrCol *= vec4(COLOR, 0.333);\n        \n        \/\/col = refrCol;  \/\/ No reflection - pure refraction\n        col = mix(refrCol, reflCol, 0.333);  \/\/ Refraction and reflection blended together\n    }\n    else\n    {\n        col = texture(iChannel0, rd);\n    }\n\n    fragColor = col;\n}\n","name":"Image","description":"","type":"image"}]}}