{"Shader":{"ver":"0.1","info":{"id":"7lySWh","date":"1644736308","viewed":74,"name":"Entwined","username":"davidar","description":"Inspired by [url]https:\/\/www.shadertoy.com\/view\/fsjyR3[\/url]","likes":12,"published":3,"flags":32,"usePreview":0,"tags":["simulation","heart","convolution","diffusion","kernel","ca","reaction","differential","growth","meandering"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":14854,"src":"\/media\/a\/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"void mainImage( out vec4 r, in vec2 u )\n{\n    vec2 uv = u \/ iResolution.xy;\n    \n    \/\/ edge detection\n    vec4 dx = texGradX(iChannel0, uv);\n    vec4 dy = texGradY(iChannel0, uv);\n    r = sqrt(dx*dx + dy*dy);\n    \n    \/\/ layering\n    vec4 mask = texBlur(iChannel0, uv);\n    float blend = smoothstep(.45, .55, uv.x);\n    r.xy *= mask.xy - vec2(1. - blend, blend) * mask.yx;\n    \n    \/\/ colours\n    r = 1. - clamp(2. * r, 0., 1.);\n    r.y -= .5 - .5 * r.x;\n    \n    \/\/ paper\n    r -= .05 * texture(iChannel1, .5 * u \/ iChannelResolution[1].xy).x;\n    \n    \/\/ shadow\n    float shadow = .1 * length(texBlur(iChannel0, (u + vec2(-5, 5)) \/ iResolution.xy));\n    shadow *= smoothstep(0., 4e-3 * iResolution.y, iTime);\n    shadow *= 1. - clamp(mask.x + mask.y, 0., 1.);\n    r -= shadow;\n    \n    \/\/if (abs(u.x - .5 * iResolution.x) \/ iResolution.y > .5) r = vec4(0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"vec4 char(vec2 p, int c) {\n    if (p.x < 0. || p.x > 1. || p.y < 0.|| p.y > 1.) return vec4(0,0,0,1);\n    return texture(iChannel2, p\/16. + fract(vec2(c, 15-c\/16)\/16.));\n}\n\nvoid mainImage(out vec4 r, vec2 u) {\n    vec2 i = u-u; r -= r;\n    int z = 15;\n    for(int k = (2*z+1)*(2*z+1); k-->0;) {\n        i = vec2(k%(2*z+1),k\/(2*z+1)) - float(z);\n        float q = mix(.015, .06, smoothstep(0., 16e-3 * iResolution.y, iTime));\n        r += .5 * texelFetch(iChannel0,ivec2(i+u),0) * (1. - q*dot(i,i))*exp(-q*dot(i,i));\n    }\n    vec2 uv = u\/iResolution.xy;\n    r = clamp(r,0.,1.);\n    if (iFrame < 9) {\n        if (u.x < .25 * iResolution.x) r.x = 1.;\n        if (u.x > .75 * iResolution.x) r.y = 1.;\n        \/\/if (u.y < .05 * iResolution.y) r.z = 1.;\n    }\n    \n    vec2 p = vec2(3.7,2.7) * (uv - vec2(.5,.38));\n    float heart = distance(p, vec2(0, sqrt(abs(p.x))));\n    if(heart > 1.) r = vec4(0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\/* Texture Stencil Library https:\/\/www.shadertoy.com\/view\/ssBczm\n\nThe MIT License\n\nCopyright (c) 2022 David A Roberts <https:\/\/davidar.io\/>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and\/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*\/\n\nvec4 texStencil(sampler2D ch, vec2 uv, float coeff[9]) {\n    vec2 texel = 1. \/ vec2(textureSize(ch, 0));\n    const vec2 stencilOffset[9] = vec2[](\n        vec2(-1, 1), vec2( 0, 1), vec2( 1, 1),\n        vec2(-1, 0), vec2( 0, 0), vec2( 1, 0),\n        vec2(-1,-1), vec2( 0,-1), vec2( 1,-1)\n    );\n    vec4 r = vec4(0);\n    for (int i = 0; i < 9; i++)\n        r += coeff[i] * texture(ch, uv + texel * stencilOffset[i]);\n    return r;\n}\n\n\/\/ Gaussian\/binomial blur\n\/\/ https:\/\/bartwronski.com\/2021\/10\/31\/practical-gaussian-filter-binomial-filter-and-small-sigma-gaussians\/\nvec4 texBlur(sampler2D ch, vec2 uv) {\n    return texStencil(ch, uv, float[](\n        .0625, .125, .0625,\n        .125,  .25,  .125,\n        .0625, .125, .0625\n    ));\n}\n\n\/\/ Laplacian, optimal 9-point stencil\n\/\/ https:\/\/docs.lib.purdue.edu\/cgi\/viewcontent.cgi?article=1928&context=cstech\nvec4 texLapl(sampler2D ch, vec2 uv) {\n    return texStencil(ch, uv, float[](\n        1.,   4., 1.,\n        4., -20., 4.,\n        1.,   4., 1.\n    )) \/ 6.;\n}\n\n\/\/ horizontal gradient (Sobel filter)\nvec4 texGradX(sampler2D ch, vec2 uv) {\n    return texStencil(ch, uv, float[](\n        -1., 0., 1.,\n        -2., 0., 2.,\n        -1., 0., 1.\n    )) \/ 8.;\n}\n\n\/\/ vertical gradient (Sobel filter)\nvec4 texGradY(sampler2D ch, vec2 uv) {\n    return texStencil(ch, uv, float[](\n         1.,  2.,  1.,\n         0.,  0.,  0.,\n        -1., -2., -1.\n    )) \/ 8.;\n}","name":"Common","description":"","type":"common"}]}}