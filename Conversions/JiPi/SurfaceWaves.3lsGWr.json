{"Shader":{"ver":"0.1","info":{"id":"3lsGWr","date":"1556066943","viewed":846,"name":"Surface Waves?...","username":"wyatt","description":"Strange waves resulting from me trying to simulate surface waves after Fabrice told me that there was a connection between them and the Schrodinger equation. I think I'm onto something, but I don't think these are surface waves...","likes":23,"published":3,"flags":32,"usePreview":0,"tags":["wave","physics","quantum"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/calculate 5x5 caustic\n#define R iResolution.xy\nvec4 A (vec2 U) {return texture(iChannel0,U\/R);}\nvec4 B (vec2 U) {return texture(iChannel1,U\/R);}\nvoid mainImage (out vec4 Q, vec2 U) {\n    Q = vec4(0);\n    for (int x = -2; x <= 2; x++)\n    for (int y = -2; y <= 2; y++) {\n       vec3 u = normalize(vec3(x,y,1));\n       vec2 b = B(U+u.xy).zw;\n       Q.x += dot(u,normalize(vec3(b,.005)));\n       Q.y += dot(u,normalize(vec3(b,.010)));\n       Q.z += dot(u,normalize(vec3(b,.015)));\n    }\n    Q = Q\/20.;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ fluid pressure and velocity\n#define R iResolution.xy\nvec4 t (vec2 U) {return texture(iChannel0,U\/R);}\nvec4 A (vec2 U) {return t(U-t(U).xy);}\nvec4 B (vec2 U) {return texture(iChannel1,U\/R);}\nvec4 C (vec2 U) {return texture(iChannel2,U\/R);}\nfloat ln (vec2 p, vec2 a, vec2 b) {return length(p-a-(b-a)*clamp(dot(p-a,b-a)\/dot(b-a,b-a),0.,1.));}\nvoid mainImage (out vec4 Q, vec2 U) {\n    vec4 \n        b = B(U),\n        c = C(U),\n        me = Q = A(U),\n        n = A(U+vec2(0,1)),\n        e = A(U+vec2(1,0)),\n        s = A(U-vec2(0,1)),\n        w = A(U-vec2(1,0));\n    \/\/ navier stokes\n    Q.x -= 0.25*(e.w-w.w+c.x);\n    Q.y -= 0.25*(n.w-s.w+c.y);\n    Q.z += 0.125*(me.w-b.x); \/\/ vertical velocity feeds back with the height\n    Q.w = 0.25*((n.w+e.w+s.w+w.w)-me.z-b.y-(n.y-s.y+e.x-w.x)); \/\/ pressure calculation accounting for the vertical force\n    \/\/ this part is pivotal but I don't remember why I put it there...\n    Q.xyz *= min(1.,b.x);\n    \n    \/\/boundaries\n    if (U.x<1.||R.x-U.x<1.||U.y<1.||R.y-U.y<1.) Q.xyz *= 0.;\n    if (iFrame < 1) Q = vec4(vec2(.1*smoothstep(50.,45.,length(U-0.5*R))),0,1);\n    vec4 mo = texture(iChannel3,U\/R);\n    float l = ln(U,mo.xy,mo.zw);\n   \tif (length(mo.xy-mo.zw)>0.) Q.xy += 2.*exp(-.05*l*l)*normalize(mo.xy-mo.zw);\n    if (length(Q.xy)>0.) Q.xy = normalize(Q.xy)*min(.8,length(Q.xy));\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/ fluid height\n#define R iResolution.xy\nvec4 A (vec2 U) {return texture(iChannel0,U\/R);}\nvec4 B (vec2 U) {return texture(iChannel1,(U-A(U).xy)\/R);}\nvoid mainImage (out vec4 Q, vec2 U) {\n\tQ = B(U);\n    vec4 a = A(U),\n        n = B(U+vec2(0,1)),\n        e = B(U+vec2(1,0)),\n        s = B(U-vec2(0,1)),\n        w = B(U-vec2(1,0)),\n        m = 0.25*(n+e+s+w);\n    \/\/ basically the schrodinger equation \n    Q.y = m.x-Q.x;\n    Q.x += a.z;\n    \/\/ gradient for making the caustic in Image\n    Q.zw = vec2(e.x-w.x,n.x-s.x);\n    \n    \/\/ boundaries\n    if (U.x<1.||R.x-U.x<1.||U.y<1.||R.y-U.y<1.) Q.x = 1.;\n    if (iFrame < 1) Q = vec4(1,0,0,0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":260,"channel":0}],"code":"\/\/Mouse\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec4 p = texture(iChannel0,U\/iResolution.xy);\n   \tif (iMouse.z>0.) {\n      if (p.z>0.) C =  vec4(iMouse.xy,p.xy);\n    else C =  vec4(iMouse.xy,iMouse.xy);\n   }\n    else C = vec4(-iResolution.xy,-iResolution.xy);\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":259,"channel":0}],"code":"\/\/ fluid vorticity\n#define R iResolution.xy\nvec4 t (vec2 U) {return texture(iChannel0,U\/R);}\nvec4 c (vec2 U) {return texture(iChannel2,U\/R);}\nvec4 C (vec2 U) {return c(U-t(U).xy);}\nfloat ln (vec2 p, vec2 a, vec2 b) {return length(p-a-(b-a)*clamp(dot(p-a,b-a)\/dot(b-a,b-a),0.,1.));}\nvoid mainImage (out vec4 Q, vec2 U) {\n    vec4 \n        c = C(U),\n        n = t(U+vec2(0,1)),\n        e = t(U+vec2(1,0)),\n        s = t(U-vec2(0,1)),\n        w = t(U-vec2(1,0));\n    \/\/ curl\n   \tQ.z = 0.25*(n.x-s.x+e.y-w.y);\n    \tn = C(U+vec2(0,1));\n        e = C(U+vec2(1,0));\n        s = C(U-vec2(0,1));\n        w = C(U-vec2(1,0));\n    \/\/ magnus force\n    Q.xy = c.z*vec2(s.z-n.z,w.z-e.z);\n    \n    if (iFrame < 1) Q = vec4(0);\n\n}","name":"Buffer C","description":"","type":"buffer"}]}}