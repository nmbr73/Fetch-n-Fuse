{
 "ver": "0.1",
 "info": {
  "id": "Ns2cD1",
  "date": "0",
  "viewed": 0,
  "name": "Fork Electric S JiPi 576",
  "description": "An android's dream of fluffy-soft but stingy-sparky sheep.\nI will be counting these tonight until I fall asleep.\n\n(Now I'm thinking of adding Shawn-like heads and faces to these, but I should definitely go to bed.)\n",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "noise",
   "fluffy",
   "trippy",
   "sparks",
   "bladerunner"
  ],
  "hasliked": 0,
  "parentid": "sdBcDh",
  "parentname": "Electric Sheep"
 },
 "renderpass": [
  {
   "inputs": [],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "// This is a quick and messy hack. Make of it what you want.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord/min(iResolution.x, iResolution.y);\n    float time = iTime;\n    \n    vec2 x, p, gwool, gtemp;\n\tfloat nwool, swool, wwool;\n\tp = vec2(0.0);\n\tx = vec2(st);\n\tswool = 12.0;\n\twwool = 0.5;\n    nwool = 0.0;\n\n    for(int i=0; i<4; i++) {\n\t  nwool += wwool*psrdnoise(swool*x, p, sqrt(swool)*0.2*sin(time-nwool), gtemp);\n\t  gwool += wwool*gtemp;\n\t  wwool *= 0.55;\n\t  swool *= 2.2;\n\t}\n\n    float mwool = 0.5+0.1*nwool+0.15*length(gwool);\n\tconst vec3 gray = vec3(0.5);\n\tconst vec3 white = vec3(1.0, 1.0, 1.0);\n\tconst vec3 black = vec3(0.0);\n\tconst vec3 blue = vec3(0.2,0.5,1.0);\n\n    // Slightly over-saturated on purpose - clips to flat white\n    vec3 woolcolor = mix(gray, white, 1.1*mwool);\n    \n    float r1 = length(x-vec2(0.5+0.02*sin(time*0.91), 0.45+0.02*sin(time*0.7)));\n    float sheep1 = 1.0-aastep(0.3, r1+0.02*nwool+0.01*length(gwool));\n    float r2 = length(x-vec2(1.3+0.02*sin(time*0.83), 0.6+0.02*sin(time*0.67)));\n    float sheep2 = 1.0-aastep(0.25, r2+0.02*nwool+0.01*length(gwool));\n    float sheep = max(sheep1, sheep2);\n \n    float freqspark = 8.0;\n    float ampspark = 1.0;\n    float nspark = 0.0;\n    vec2 g, gspark = vec2(0.0);\n\n    // Start with two terms of similar frequency to stomp out the\n    // regular \"beat\" of psrdnoise when it's animated rapidly,\n    // and then tuck on a fractal sum\n    nspark = ampspark*psrdnoise(0.5*freqspark*x*0.931,\n            vec2(0.0), 1.81*freqspark*time, g);\n    gspark += g*0.5*ampspark;\n    nspark += ampspark*psrdnoise(0.5*freqspark*x*1.137,\n            vec2(0.0), -2.27*freqspark*time, g);\n    gspark += g*0.5*ampspark;\n    float nflare = nspark; // Save low-frequency part for \"lighting effect\"\n    for (int i=0; i<3; i++) {\n        nspark += ampspark*psrdnoise(freqspark*x-0.2*gspark,\n            vec2(0.0), 2.0*freqspark*time, g);\n        gspark += g*ampspark;\n        freqspark *=1.82;\n        ampspark *= 0.68;\n    }\n\n    float sparkmask = 1.0 -\n        smoothstep(0.2, 0.5, r1+0.02*nflare) * smoothstep(0.15, 0.4, r2+0.02*nflare);\n\n    // Strongly over-saturated on purpose - clips to cyan and white\n    vec3 bgcolor = mix(vec3(0.0,0.0,0.0), blue, 5.0*nspark*sparkmask);\n\n    woolcolor = woolcolor + (1.0-smoothstep(0.5, 1.2, sparkmask))*max(0.0, nflare)*blue;\n    vec3 mixcolor = mix(bgcolor, woolcolor*(1.0-min(3.0*r1*r1,3.0*r2*r2)), sheep);\n    fragColor = vec4(mixcolor, 1.0);\n}\n",
   "name": "Image",
   "description": "",
   "type": "image"
  },
  {
   "inputs": [],
   "outputs": [],
   "code": "// A convenient anti-aliased step() using auto derivatives\nfloat aastep(float threshold, float value) {\n    float afwidth = 0.7 * length(vec2(dFdx(value), dFdy(value)));\n    return smoothstep(threshold-afwidth, threshold+afwidth, value);\n}\n\n// psrdnoise (c) Stefan Gustavson and Ian McEwan,\n// ver. 2021-12-02, published under the MIT license:\n// https://github.com/stegu/psrdnoise/\nfloat psrdnoise(vec2 x, vec2 period, float alpha, out vec2 gradient)\n{\n\tvec2 uv = vec2(x.x+x.y*0.5, x.y);\n\tvec2 i0 = floor(uv), f0 = fract(uv);\n\tfloat cmp = step(f0.y, f0.x);\n\tvec2 o1 = vec2(cmp, 1.0-cmp);\n\tvec2 i1 = i0 + o1, i2 = i0 + 1.0;\n\tvec2 v0 = vec2(i0.x - i0.y*0.5, i0.y);\n\tvec2 v1 = vec2(v0.x + o1.x - o1.y*0.5, v0.y + o1.y);\n\tvec2 v2 = vec2(v0.x + 0.5, v0.y + 1.0);\n\tvec2 x0 = x - v0, x1 = x - v1, x2 = x - v2;\n\tvec3 iu, iv, xw, yw;\n\tif(any(greaterThan(period, vec2(0.0)))) {\n\t\txw = vec3(v0.x, v1.x, v2.x);\n\t\tyw = vec3(v0.y, v1.y, v2.y);\n\t\tif(period.x > 0.0)\n\t\t\txw = mod(vec3(v0.x, v1.x, v2.x), period.x);\n\t\tif(period.y > 0.0)\n\t\t\tyw = mod(vec3(v0.y, v1.y, v2.y), period.y);\n\t\tiu = floor(xw + 0.5*yw + 0.5); iv = floor(yw + 0.5);\n\t} else {\n\t\tiu = vec3(i0.x, i1.x, i2.x); iv = vec3(i0.y, i1.y, i2.y);\n\t}\n\tvec3 hash = mod(iu, 289.0);\n\thash = mod((hash*51.0 + 2.0)*hash + iv, 289.0);\n\thash = mod((hash*34.0 + 10.0)*hash, 289.0);\n\tvec3 psi = hash*0.07482 + alpha;\n\tvec3 gx = cos(psi); vec3 gy = sin(psi);\n\tvec2 g0 = vec2(gx.x, gy.x);\n\tvec2 g1 = vec2(gx.y, gy.y);\n\tvec2 g2 = vec2(gx.z, gy.z);\n\tvec3 w = 0.8 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2));\n\tw = max(w, 0.0); vec3 w2 = w*w; vec3 w4 = w2*w2;\n\tvec3 gdotx = vec3(dot(g0, x0), dot(g1, x1), dot(g2, x2));\n\tfloat n = dot(w4, gdotx);\n\tvec3 w3 = w2*w; vec3 dw = -8.0*w3*gdotx;\n\tvec2 dn0 = w4.x*g0 + dw.x*x0;\n\tvec2 dn1 = w4.y*g1 + dw.y*x1;\n\tvec2 dn2 = w4.z*g2 + dw.z*x2;\n\tgradient = 10.9*(dn0 + dn1 + dn2);\n\treturn 10.9*n;\n}\n\n",
   "name": "Common",
   "description": "",
   "type": "common"
  }
 ]
}