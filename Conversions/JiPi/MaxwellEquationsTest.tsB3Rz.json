{"Shader":{"ver":"0.1","info":{"id":"tsB3Rz","date":"1547935600","viewed":548,"name":"Maxwell Equations Test","username":"wyatt","description":"Use the mouse to interact!\nDiscretization of the interplay of an electric field and a magnetic field.\n\ninspired by Plento's \"Currents\"","likes":10,"published":3,"flags":32,"usePreview":0,"tags":["test","physics"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ IMAGE\nvec2 R;\nvec3 E (vec3 U) {\n\treturn texture(iChannel0,U.xy\/R).xyz;\n}\nvec3 M (vec3 U) {\n\treturn texture(iChannel1,U.xy\/R).xyz;\n}\n\nvec3 X (vec3 U, vec3 R) {\n\treturn cross(R,E(U+R));\n}\nvoid mainImage( out vec4 c, in vec2 u )\n{\tR = iResolution.xy;\n \n \tvec3 U = vec3(u,0);\n \tvec3 e = E(U);\n \tvec3 m = M(U);\n \n \tfloat a = atan(e.y,e.x);\n \tvec3 cr = cross(e,m);\n \tvec3 C = 0.5+0.5*sin(10.*cr.x*vec3(1,2,3));\n \tc = vec4(C,1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ ELECTRIC FIELD\nvec2 R;\nfloat ln (vec2 p, vec2 a, vec2 b) { \/\/ returns distance to line segment for mouse input\n    return length(p-a-(b-a)*clamp(dot(p-a,b-a)\/dot(b-a,b-a),0.,1.));\n}\nvec3 E (vec3 U) {\n\treturn texture(iChannel0,U.xy\/R).xyz;\n}\nvec3 M (vec3 U) {\n\treturn texture(iChannel1,U.xy\/R).xyz;\n}\n\nvec3 X (vec3 U, vec3 R) {\n\treturn cross(R,M(U+R));\n}\n\nvoid mainImage( out vec4 c, in vec2 u )\n{\tR = iResolution.xy;\n \n \tvec3 U = vec3(u,0);\n \t# define l inversesqrt (2.)\n \tvec3 mu = 0.25*(E(U+vec3(1,0,0))+E(U-vec3(1,0,0))+E(U+vec3(0,1,0))+E(U-vec3(0,1,0)));\n    vec3 C = mix(E(U),mu,dx)\n        + dt*(- M(U) + \n      ( X(U, vec3( 1, 0,0)) + \n        X(U, vec3(-1, 0,0)) + \n        X(U, vec3( 0, 1,0)) + \n        X(U, vec3( 0,-1,0)) + \n        X(U, vec3( l, l,0)) + \n        X(U, vec3( l,-l,0)) +\n        X(U, vec3(-l,-l,0)) +\n        X(U, vec3(-l, l,0)) ) \/ 8.);\n \t\n \tif (iFrame < 1) C = 1e-1*vec3(-1.+2.*smoothstep(-10.,10.,U.x-0.5*R.x));\n \tvec4 mouse = texture(iChannel2,vec2(.5));\n \tif (iMouse.z > 0. ) C = mix(C,normalize(vec3(mouse.xy-mouse.zw,1)),smoothstep(7.,0.,ln(U.xy,mouse.xy,mouse.zw)));\n \tc = vec4(C,0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/ MAGNETIC FIELD\nvec2 R;\nvec3 E (vec3 U) {\n\treturn texture(iChannel0,U.xy\/R).xyz;\n}\nvec3 M (vec3 U) {\n\treturn texture(iChannel1,U.xy\/R).xyz;\n}\n\nvec3 X (vec3 U, vec3 R) {\n\treturn cross(R,E(U+R));\n}\nvoid mainImage( out vec4 c, in vec2 u )\n{\tR = iResolution.xy;\n \n \tvec3 U = vec3(u,0);\n \t# define l inversesqrt (2.)\n \tvec3 mu = 0.25*(M(U+vec3(1,0,0))+M(U-vec3(1,0,0))+M(U+vec3(0,1,0))+M(U-vec3(0,1,0)));\n    vec3 C = mix(M(U),mu,dx) + dt*( E(U) -\n      ( X(U, vec3( 1, 0,0)) + \n        X(U, vec3(-1, 0,0)) + \n        X(U, vec3( 0, 1,0)) + \n        X(U, vec3( 0,-1,0)) + \n        X(U, vec3( l, l,0)) + \n        X(U, vec3( l,-l,0)) +\n        X(U, vec3(-l,-l,0)) +\n        X(U, vec3(-l, l,0)) ) \/ 8.);\n \tif (iFrame < 1) C = vec3(0);\n \tc = vec4(C,0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\/\/ these values are improperly named dt = d\/dt and dx = dispersion\n#define dt 1.\n#define dx 0.001","name":"Common","description":"","type":"common"},{"inputs":[{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":259,"channel":0}],"code":"\/\/ keep track of mouse\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 p = texture(iChannel0,fragCoord\/iResolution.xy);\n    if (iMouse.z>0.) {\n        if (p.z>0.) fragColor =  vec4(iMouse.xy,p.xy);\n    \telse fragColor =  vec4(iMouse.xy,iMouse.xy);\n    }\n    else fragColor = vec4(-iResolution.xy,-iResolution.xy);\n}","name":"Buffer C","description":"","type":"buffer"}]}}