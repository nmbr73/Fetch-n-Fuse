{"Shader":{"ver":"0.1","info":{"id":"NdVfRh","date":"1657664308","viewed":149,"name":"Turbo Rainbow Dissolver","username":"leon","description":"starting an iridescent latex fetish","likes":11,"published":3,"flags":32,"usePreview":0,"tags":["noise","abstract","rainbow"],"hasliked":0},"renderpass":[{"inputs":[{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\n\/\/ popping shapes in a turbo rainbow dissolver\n\n\/\/ main code is in Buffer A\n\/\/ Buffer B is a minimal temporal anti aliasing\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord\/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":40,"src":"\/media\/a\/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","ctype":"volume","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":14854,"src":"\/media\/a\/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\n\/\/ fractal brownian motion https:\/\/thebookofshaders.com\/13\/\n\/\/ with a \"abs(sin(value))\" twist \nvec3 fbm (vec3 p)\n{\n    vec3 result = vec3(.0);\n    float a = .5;\n    for (float i = 0.; i < 3.; ++i) {\n        result += abs(sin(texture(iChannel1, p\/a).xyz*6.))*a;\n        a \/= 2.;\n    }\n    return result;\n}\n\n\/\/ signed distance function\nfloat map(vec3 p)\n{\n    float dist = 100.;\n    \n    \/\/ timing\n    float time = iTime;\n    float anim = fract(time);\n    float index = floor(time);\n    \n    \/\/ noise animation\n    float scale = .1-anim*.05;\n    vec3 seed = p * scale + index * .12344;\n    vec3 noise = fbm(seed);\n    \n    \/\/ shapes and distortions\n    float size = .5*pow(anim,.2);\n    float type = mod(index, 3.);\n    dist = type > 1.5 ? sdTorus(p, vec2(size, .1)) :\n           type > .5 ? sdBox(p,vec3(size*.7)) :\n           length(p)-size;\n    dist -= anim * noise.x * .2;\n    dist += pow(anim, 3.) * noise.y;\n    \n    \/\/ scale field when highly distorted to avoid artefacts\n    return dist * (1.-anim*.7);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy\/2.)\/iResolution.y;\n    \n    \/\/ background\n    vec3 color = vec3(.5)*smoothstep(2.,.5,length(uv));\n    \n    \/\/ coordinates\n    vec3 pos = vec3(0,0,-1.5);\n    pos.xz *= rot(iTime*.1);\n    pos.zy *= rot(sin(iTime*.2));\n    vec3 ray = lookAt(pos, vec3(0), uv, 1.5);\n    \n    \/\/ noise\n    vec3 blue = texture(iChannel0, fragCoord\/1024.).xyz;\n    \n    \/\/ raymarch\n    const float count = 30.;\n    float steps = 0.;\n    float total = 0.;\n    for (steps = count; steps > 0.; --steps) {\n        float dist = map(pos);\n        if (dist < total\/iResolution.y || total > 3.) break;\n        dist *= 0.9+0.1*blue.z;\n        pos += ray * dist;\n        total += dist;\n    }\n    \n    \/\/ coloring\n    float shade = steps\/count;\n    if (shade > .001 && total < 3.) {\n    \n        \/\/ NuSan https:\/\/www.shadertoy.com\/view\/3sBGzV\n        vec2 noff = vec2(.02,0);\n        vec3 normal = normalize(map(pos)-vec3(map(pos-noff.xyy), map(pos-noff.yxy), map(pos-noff.yyx)));\n        \n        color = vec3(.1);\n        float light = dot(reflect(ray, normal), vec3(0,1,0))*.5+.5;\n        float rainbow = dot(normal, -normalize(pos))*.5+.5;\n        color += vec3(0.5)*pow(light, 4.5);\n        \n        \/\/ Inigo Quilez color palette https:\/\/iquilezles.org\/articles\/palettes\/\n        color += (.5+.5*cos(vec3(0.,.3,.6)*6.+uv.y*3.+iTime))*pow(rainbow,4.);\n        color *= pow(shade,.5);\n    }\n    \n    fragColor = vec4(color, 1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\nvec3 lookAt (vec3 from, vec3 at, vec2 uv, float fov)\n{\n  vec3 z = normalize(at-from);\n  vec3 x = normalize(cross(z, vec3(0,1,0)));\n  vec3 y = normalize(cross(x, z));\n  return normalize(z * fov + uv.x * x + uv.y * y);\n}\n\n\/\/ Inigo Quilez\n\/\/ https:\/\/iquilezles.org\/articles\/distfunctions\/\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/ Temporal Anti Aliasing from:\n\/\/ https:\/\/www.elopezr.com\/temporal-aa-and-the-quest-for-the-holy-trail\/\n\n\/\/ but only the color clamping...\n\/\/ it's very subtle but I like it...\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec3 color = texture(iChannel0, uv).rgb;\n    vec3 temporal = texture(iChannel1, uv).rgb;\n    vec3 minColor = vec3(9999.), maxColor = vec3(-9999.);\n    for(int x = -1; x <= 1; ++x){\n        for(int y = -1; y <= 1; ++y){\n            vec3 c = texture(iChannel0, uv + vec2(x, y) \/ iResolution.xy).rgb;\n            minColor = min(minColor, c);\n            maxColor = max(maxColor, c);\n        }\n    }\n    temporal = clamp(temporal, minColor, maxColor);\n    fragColor.rgb = mix(color, temporal, 0.9);\n    fragColor.a = 1.0;\n}","name":"Buffer B","description":"","type":"buffer"}]}}