{"Shader":{"ver":"0.1","info":{"id":"lsVfRd","date":"1530141791","viewed":1898,"name":"Drag a Pseudo Fluid!","username":"wyatt","description":"pressure is calculated by advecting a known volume and then seeing how it shrinks or grows over time and space\nI was thinking about how traffic congestion is related to the density and speed of cars along a straight line\nnot super accurate but works ok","likes":37,"published":3,"flags":32,"usePreview":0,"tags":["fluid"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/*\n\tI changed this since I first posted it\n\tit now advects the velocity which makes it more realistic\n\n\n\n\tHello thanks for looking at my shader\n\tbuffer A has the fun stuff\n\t\n\tit works by taking a square around the pixel\n\tand advecting it through the velocity feild\n\tif the square gets bigger, pressure is decreasing\n\tand visa-versa\n\n\tkind of a contrived way of calculating divergence\n\tbut hey look! it worked! kind of...\n\t\n*\/\nvoid mainImage( out vec4 C, in vec2 U )\n{\n   \tvec4 g = texture(iChannel0,U\/iResolution.xy);\n    vec2 d = vec2(\n    \ttexture(iChannel0,(U+vec2(1,0))\/iResolution.xy).w-texture(iChannel0,(U-vec2(1,0))\/iResolution.xy).w,\n    \ttexture(iChannel0,(U+vec2(0,1))\/iResolution.xy).w-texture(iChannel0,(U-vec2(0,1))\/iResolution.xy).w\n    );\n    vec3 n = normalize(vec3(d,.1));\n    float a = acos(dot(n,normalize(vec3(1))))\/3.141593;\n\tC = vec4(\n        (.5+0.5*sin(2.*g.w*vec3(1,2,3)))*(0.7+0.5*pow(a,2.))\n       ,1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ FLUID PART\n\nvec2 ur, U;\nfloat ln (vec2 p, vec2 a, vec2 b) {\n    return length(p-a-(b-a)*clamp(dot(p-a,b-a)\/dot(b-a,b-a),0.,1.));\n}\nvec4 t (vec2 v, int a, int b) {return texture(iChannel0,fract((v+vec2(a,b))\/ur));}\nvec4 t (vec2 v) {return texture(iChannel0,fract(v\/ur));}\nfloat area (vec2 a, vec2 b, vec2 c) {\n    float A = length(b-c), B = length(c-a), C = length(a-b), s = 0.5*(A+B+C);\n    return sqrt(s*(s-A)*(s-B)*(s-C));\n}\nvoid mainImage( out vec4 Co, in vec2 uu )\n{\n    U = uu;\n    ur = iResolution.xy;\n    if (iFrame < 1) {\n        \/\/ INIT\n        float w = 0.5+sin(0.2*U.x)*0.5;\n        float q = length(U-0.5*ur);\n        Co = vec4(0.1*exp(-0.001*q*q),0,0,w);\n    } else {\n        \n        vec2 v = U,\n             A = v + vec2( 1, 1),\n             B = v + vec2( 1,-1),\n             C = v + vec2(-1, 1),\n             D = v + vec2(-1,-1);\n        \/\/ ADVECT TO LEARN FROM THE PAST\n        for (int i = 0; i < 8; i++) {\n            v -= t(v).xy;\n            A -= t(A).xy;\n            B -= t(B).xy;\n            C -= t(C).xy;\n            D -= t(D).xy;\n        }\n        vec4 me = t(v,0,0);\n        vec4 n = t(v,0,1),\n            e = t(v,1,0),\n            s = t(v,0,-1),\n            w = t(v,-1,0);\n        vec4 ne = .25*(n+e+s+w);\n\t\tme = mix(t(v),ne,vec4(0.1,0.1,0.9,0.));\n        me.z  = me.z  - 0.01*((area(A,B,C)+area(B,C,D))-4.);\n\t\t\n        \/\/ PRESSURE GRADIENT\n            vec4 pr = vec4(e.z,w.z,n.z,s.z);\n            me.xy = me.xy + 100.*vec2(pr.x-pr.y, pr.z-pr.w)\/ur;\n        \n        \/\/ MOUSE MOVEMENT\n        \tvec4 mouse = texture(iChannel1,vec2(0.5));\n            float q = ln(U,mouse.xy,mouse.zw);\n            vec2 m = mouse.xy-mouse.zw;\n            float l = length(m);\n            if (l>0.) m = min(l,10.)*m\/l;\n            me.xyw += 0.03*exp(-5e-2*q*q*q)*vec3(m,10.);\n        Co = me;\n        Co.xyz = clamp(Co.xyz, -.4, .4);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/ MOUSE\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 p = texture(iChannel0,fragCoord\/iResolution.xy);\n    if (iMouse.z>0.) {\n        if (p.z>0.) fragColor =  vec4(iMouse.xy,p.xy);\n    \telse fragColor =  vec4(iMouse.xy,iMouse.xy);\n    }\n    else fragColor = vec4(-iResolution.xy,-iResolution.xy);\n}","name":"Buffer B","description":"","type":"buffer"}]}}