{"Shader":{"ver":"0.1","info":{"id":"7lcfz7","date":"1662891620","viewed":202,"name":"Cyborg Signature","username":"leon","description":"virtual artificial intelligence signing generated algorithm certificates","likes":20,"published":3,"flags":32,"usePreview":0,"tags":["tag","graffiti","cyborg"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\n\/\/ Cyborg Signature,\n\/\/ when you have to sign that check for your ai bot therapist\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0, 0, 0, 1);\n    vec2 uv = fragCoord\/iResolution.xy;\n    float timeline = fract(iTime*speed);\n    \n    \/\/ data readability unpacking\n    vec4 data = texture(iChannel0, uv);\n    float mask = data.r;\n    float timestamp = data.b;\n    float dist = data.g;\n    float material = data.a;\n    float glow = texture(iChannel1, uv).a;\n    vec3 normal = texture(iChannel1, uv).rgb;\n    \n    \/\/ background\n    color.rgb = vec3(1) * smoothstep(2., -2., length(uv-.5));\n    \n    \/\/ ambient occlusion\n    if (.01 < timeline) \n        color *= smoothstep(-.5,.2,dist);\n    \n    if (mask > .001)\n    {\n        \/\/ lighting\n        vec3 light = normalize(vec3(0,1,1));\n        float shade = dot(normal, light)*.5+.5;\n        color *= material;\n        color += glow;\n        color += pow(shade, 10.);\n\n    \/\/ debug g-buffer\n    } else if (false) {\n    \n        uv *= 4.;\n        if (inside(uv))\n        {\n            \/\/ data pack\n            vec4 d = texture(iChannel0, uv);\n            color = fract(d.grba*3.);\n        }\n        uv.x -= 1.;\n        if (inside(uv))\n        {\n            \/\/ normal and glow\n            vec4 d = texture(iChannel1, uv);\n            if (d.r > .001)\n                color += d;\n            color += d.aaaa;\n        }\n    }\n    \n    \/\/ shine\n    vec3 tint = .5+.5*cos(vec3(1,2,3)*5.+uv.x*6.);\n    color.rgb += tint*glow;\n    \n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\n\/\/ move horizontally, with circles and random offset\nvec2 move(float t)\n{\n    vec2 pos = vec2(0);\n    float angle = t*10.;\n    float radius = .1;\n    float jitter = .1;\n    float time = t*5.;\n    float index = floor(time);\n    float anim = fract(time);\n    float scroll = fract(t*speed);\n    vec2 rng = mix(hash21(index), hash21(index+1.), anim);\n    pos += (rng*2.-1.)*jitter;\n    pos.x += scroll*2.-1.;\n    pos.y += pow(abs(sin(time*.2)), 20.)*.5;\n    pos.y -= pow(abs(sin(time*.1)), 50.)*.4;\n    pos += vec2(cos(angle),sin(angle*1.5))*radius;\n    return pos;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord\/iResolution.xy;\n    vec2 pos = 1.5*(fragCoord-iResolution.xy\/2.)\/iResolution.y;\n    \n    \/\/ shape\n    float thin = .02+.01*sin(iTime*10.);\n    float time = iTime;\n    float dist = sdSegment(pos, move(time-iTimeDelta), move(time));\n    float mask = smoothstep(thin,.0,dist);\n    \n    \/\/ frame buffer\n    vec4 frame = texture(iChannel0, uv);\n    if (frame.g > .0) dist = min(dist, frame.g);\n    float timestamp = mix(frame.b, iTime, step(.0001,mask));\n    mask = max(mask*.1,frame.r);\n    float material = step(threshold,fract(timestamp*cycle));\n    \n    \/\/ pack\n    fragColor = vec4(mask, dist, timestamp, material);\n    \n    \/\/ wipe\n    float timeline = fract(iTime*speed);\n    fragColor *= step(.01, timeline);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define speed 0.1\n#define cycle 2.\n#define threshold 0.95\n\n#define T(uv) texture(iChannel0, uv).r\n#define inside(uv) (abs(uv.x-.5) < 0.5 && abs(uv.y-.5) < 0.5)\n\n\/\/ Inigo Quilez https:\/\/iquilezles.org\/articles\/distfunctions2d\/\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)\/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\/\/ Dave Hoskins https:\/\/www.shadertoy.com\/view\/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":14854,"src":"\/media\/a\/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","ctype":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord\/iResolution.xy;\n    float timeline = fract(iTime*speed);\n    \n    \/\/ compute normal\n    vec4 color = texture(iChannel0, uv);\n    vec3 unit = vec3(1.\/iResolution.xy, 0);\n    vec3 normal = normalize(vec3(\n                            T(uv+unit.xz)-T(uv-unit.xz),\n                            T(uv-unit.zy)-T(uv+unit.zy),\n                            color.r));\n    \n    \/\/ glow diffusion\n    float glow = 0.;\n    vec4 blue = texture(iChannel2, fragCoord\/1024.+iTime)*2.-1.;\n    uv += 5.*blue.xy\/iResolution.xy;\n    float gold = texture(iChannel1, uv).a;\n    glow = max(gold, color.a*.35);\n    glow *= step(.01, timeline);\n    \n    fragColor = vec4(normal, glow);\n}","name":"Buffer B","description":"","type":"buffer"}]}}