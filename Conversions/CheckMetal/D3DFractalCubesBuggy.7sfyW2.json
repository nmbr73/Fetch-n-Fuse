{"Shader":{"ver":"0.1","info":{"id":"7sfyW2","date":"1642781813","viewed":102,"name":"3D Fractal Cubes (buggy)","username":"SnoopethDuckDuck","description":"Wanted the cubes to be bigger, but artifacts appear if 2 cubes dont align along the abs() boundary\n\n(n>=5. looks cool in GetDist, but very laggy)","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","template","artofcode"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 10.\n#define SURF_DIST .001\n\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvec2 GetDist(vec3 p) {\n\n    float m = 0.8;\n    \n    vec3 id = vec3(1);\n    float time = 0.15 * iTime;\n    float n = 3.;\n    for (float i = 0.; i < n; i++) {\n       \/\/ id \n        id *= 0.5;\n        id += vec3(step(p.x,0.), step(p.y,0.), step(p.z,0.));\n        time += 2. * pi \/ n;\n        p = abs(p) - m;\n        p.xy *= Rot(time - 2. * pi \/ 3.);\n        p.yz *= Rot(time);\n        p.zx *= Rot(time + 2. * pi \/ 3.);\n        \/\/float s = 0.5 + 0.5 * cos(time + 4. * 0.);\/\/step(0., cos(time + 2. * p.x));\n        \/\/m *= 0.6 * (1.-s) + s * 0.4;\n               \n        m *= 0.5;\n       \n        \/\/m *= mix(0.25, 0.5, s);\n        \/\/m *= 0.6 + 0.4 * thc(8., 0.2 * iTime + time);\n    }\n    \n    float i = h21(id.xy);\n    float j = h21(id.yz);\n    float k = h21(vec2(i, j)); \/\/ need better 3d noise\n    float k2 = 0.375 + 0.125 * thc(8., 2. * pi * k + 0. * mlength(p) - 0.5 * iTime);\n    \n    float d = mlength(p) - 2. * m * k2;\n\n    \/\/d = length(p) - 2. * m;\n    return vec2(0.8 * d, k);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p).x;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nfloat GetLight(vec3 p, vec3 lightPos) {\n   \/\/ vec3 lightPos = vec3(0, 5, 6);\n    \/\/lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    dif = 0.15 + 0.85 * dif * step(length(lightPos-p), d);\n   \/\/ if(d<length(lightPos-p)) dif = 0.;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)\/iResolution.y;\n\tvec2 m = iMouse.xy\/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.4);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        float dif2 = GetLight(p,vec3(4., 2., 4.));\n        col = vec3(dif2);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col *= vec3(dif);\n        \n        \/\/ VERY sloppy way of doing it\n        float k = GetDist(p).y;\n        \/\/col *= 0.5 + 0.5 * thc(4., 2. * pi * k + iTime);\n        vec3 e = vec3(1.);\n        col *= pal(k + 0.5 * pi * thc(8., 2. * pi * k + 0.1 * iTime), \n                   e, e, e, 0.5 * vec3(0.,0.33,0.66));\n        \/\/col *= 0.52 + 0.48 * cos(4. * length(p) - iTime);\n    }\n    \n    col = pow(col, vec3(.4545));\t\/\/ gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159\n\nfloat thc(float a, float b) {\n    return tanh(a * cos(b)) \/ tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) \/ tanh(a);\n}\n\nvec2 thc(float a, vec2 b) {\n    return tanh(a * cos(b)) \/ tanh(a);\n}\n\nvec2 ths(float a, vec2 b) {\n    return tanh(a * sin(b)) \/ tanh(a);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\nfloat mlength(vec3 p) {\n    return max(max(abs(p.x), abs(p.y)), abs(p.z));\n}\n\n","name":"Common","description":"","type":"common"}]}}