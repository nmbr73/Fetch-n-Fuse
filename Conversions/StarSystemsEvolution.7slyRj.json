{"Shader":{"ver":"0.1","info":{"id":"7slyRj","date":"1642395756","viewed":109,"name":"Star systems evolution","username":"ersh","description":"Star dynamics. Mass conservation guaranteed. Walls in reality do not exist but this makes it more fun :)","likes":13,"published":3,"flags":32,"usePreview":0,"tags":["simulation"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ (C) Copyright 2021 by Yury Ershov\n\n\/\/ https:\/\/en.wikipedia.org\/wiki\/Smoothed-particle_hydrodynamics\n\n#define PALETTE        0    \/\/ 0=fire, 1=blue, 2=green\n\nvec3 col(float x) {\n  return vec3(\n#if PALETTE == 0\n      clamp(x, 0., 1.\/3.),\n      clamp(x-1.\/3., 0., 1.\/3.),\n      clamp(x-2.\/3., 0., 1.\/3.)\n#elif PALETTE == 1\n      clamp(x-2.\/3., 0., 1.\/3.),\n      clamp(x-1.\/3., 0., 1.\/3.),\n      clamp(x, 0., 1.\/3.)\n#elif PALETTE == 2\n      clamp(x-2.\/3., 0., 1.\/3.),\n      clamp(x, 0., 1.\/3.),\n      clamp(x-1.\/3., 0., 1.\/3.)\n#endif\n   ) * 3.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    fragColor.a = 1.0;\n\n\tfragColor.rgb = col(log(texture(iChannel0,uv).a*10000.)\/12.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ (C) Copyright 2021 by Yury Ershov\n\n#define WALLS_BOUNCE   1\n\n#define CH iChannel0\n\nconst float dt = 1.;\nconst float G = 0.01;\nconst float m_epsilon = 0.000001;\nconst float speed_rnd = 0.08;\nconst float center_gravity = 0.0005;\n\nvec2 vclamp(vec2 v) {\n    float l = length(v);\n    return l < 10. ? v : v\/l;\n}\n\n\/\/ https:\/\/www.shadertoy.com\/view\/4djSRW\nfloat hash12(vec2 position)\n{\n    vec2 p = (position + mod(iTime, 200.) * 1500. + 50.0);\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat overlapping_area(vec2 l1, vec2 r1, vec2 l2, vec2 r2)\n{\n    float x_dist = min(r1.x, r2.x) - max(l1.x, l2.x);\n    float y_dist = min(r1.y, r2.y) - max(l1.y, l2.y);\n    return x_dist > 0. && y_dist > 0. ? x_dist * y_dist : 0.;\n}\n\nvec2 randomizespeed(vec2 v) {\n    return vec2(v.x + (hash12(fract(v)*1573.32)-0.5)*speed_rnd, v.y + (hash12(fract(v)*178362.78)-0.5)*speed_rnd);\n}\n\n\n\/\/ Gas dynamics layer\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.x < 1.5 || fragCoord.y < 1.5 || fragCoord.x > iResolution.x-1.5 || fragCoord.y > iResolution.y-1.5) { fragColor=vec4(0.); return; }\n    vec2 uv = fragCoord \/ iResolution.xy;\n\n    if(iFrame < 2 || iMouse.z > 0.) {\n        float r = distance(fragCoord, iResolution.xy\/2.);\n        if (r < 50.) {\n            fragColor = vec4(0.0,-(uv.y - 0.5)*30.\/(r+1.)*50.,(uv.x - 0.5)*30.\/(r+1.)*50.,hash12(fragCoord)*5.*(52.-r)\/20.);\n        } else {\n\/\/            fragColor = vec4(0.0,0.0,0.0,hash12(fragCoord)*100.*m_epsilon);\n            fragColor = vec4(0.0);\n        }\n        return;\n    }\n\n    vec2 s1 = vec2(1., 1.) \/ iResolution.xy;\n    vec4 pt0 = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec2 speed0 = pt0.gb;\n    float mass0 = pt0.a;\n    vec2 f = vec2(0.);\n    vec2 p = vec2(0.);\n    float mass2 = 0.;\n\n    vec2 sh;\n    for (sh.y = -10.; sh.y < 10.5; sh.y+=1.) for (sh.x = -10.; sh.x < 10.5; sh.x+=1.) {\n        float l = length(sh);\n        vec2 coord1 = fragCoord + sh;\n        vec4 pt1 = texelFetch(iChannel0, ivec2(coord1), 0);\n        vec2 speed1 = pt1.gb;\n        float mass1 = pt1.a;\n\n        if (l > 3.5) {    \/\/ must be 0.5 but bigger number prevents from collapsing into 2x2 dots.\n            \/\/ Gravity, acceleration\n            f += sh\/l * mass0*mass1\/l\/l;\n        }\n\n        \/\/ speed: mass transfer, impulse change:\n        vec2 coord_next = coord1 + speed1 * dt;\n        float overlap = overlapping_area(fragCoord, fragCoord+vec2(1.,1.), coord_next, coord_next+vec2(1.,1.));\n        float dm = mass1 * overlap;\n        mass2 += dm;\n        p += speed1 * dm;\n    }\n    \n    \/\/ Slight gravity towards the center to compensate the inability to feel further than 10 pts.\n    vec2 to_c = iResolution.xy\/2. - fragCoord;\n    to_c = length(to_c) < 5. ? vec2(0.) : normalize(to_c)*center_gravity;\n\n    fragColor.r = 0.;\n    fragColor.a = mass2 > m_epsilon ? mass2 : 0.;\n    fragColor.gb =\n        mass2 > m_epsilon ?\n        vclamp(randomizespeed(p\/mass2 + dt * G*f\/(mass0 > m_epsilon ? mass0 : mass2) + dt*to_c)) : vec2(0.);\n#if WALLS_BOUNCE\n    if (fragCoord.x <= 11.) {\n        if (fragColor.g < 0.) fragColor.g = abs(fragColor.g)\/2.;\n    } else if (fragCoord.x >= iResolution.x - 12.) {\n        if (fragColor.g > 0.) fragColor.g = -abs(fragColor.g)\/2.;\n    }\n    if (fragCoord.y <= 11.) {\n        if (fragColor.b < 0.) fragColor.b = abs(fragColor.b)\/2.;\n    } else if (fragCoord.y >= iResolution.y - 12.) {\n        if (fragColor.b > 0.) fragColor.b = -abs(fragColor.b)\/2.;\n    }\n#endif\n}\n","name":"Buffer A","description":"","type":"buffer"}]}}