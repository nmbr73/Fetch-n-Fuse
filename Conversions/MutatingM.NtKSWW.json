{
 "ver": "0.1",
 "info": {
  "id": "NtKSWW",
  "date": "0",
  "viewed": 0,
  "name": "Fork Mutating M JiPi 835",
  "description": "A mandelbox distance used as the radius of a sphere.  A mandelball....",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "raymarching",
   "fractal",
   "reflection"
  ],
  "hasliked": 0,
  "parentid": "MlcGzX",
  "parentname": "Mutating Mandelball"
 },
 "renderpass": [
  {
   "inputs": [],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "float de(vec3 p, inout vec4 o) {\n\tvec4 q = vec4(p, 1);\n\tvec4 c = q;\n\n\to = vec4(10000.0);\n\t\n\tq.xyz *= abs(cos(iTime*0.1));\n\tfor(int i = 0; i < 10; i++) {\n\t\tq.xyz = 2.0*clamp(q.xyz, -1.0, 1.0) - q.xyz;\n\t\tq *= clamp(1.0/dot(q.xyz, q.xyz), 1.0, 1.0/0.5);\n\t\t\n\t\tq = 3.0*q - c;\n\n\t\to = min(o, vec4(abs(q.xzy), length(q.xyz)));\n\t}\n\n\treturn min(length(p) - 1.0 - smoothstep(-2.0, -1.97, -length(p))*(length(q.xyz)/q.w - 0.001), p.y + 1.0);\n}\n\nvec3 render(vec3 ro, vec3 rd, inout vec3 pos, inout vec3 ref) {\n\tfloat t = 0.0;\n\tvec4 orb;\n\tfor(int i = 0; i < 200; i++) {\n\t\tfloat d = de(ro + rd*t, orb);\n\t\tif(d < 0.0001*t || t >= 10.0) break;\n\t\tt += d*0.35;\n\t}\n\t\n\tvec3 col = vec3(0.15);\n\tif(t < 10.0) {\n\t\tvec4 tmp;\n\t\tpos = ro + rd*t;\n\t\tvec2 eps = vec2(0.001, 0.0);\n\t\tvec3 nor = normalize(vec3(\n\t\t\tde(pos + eps.xyy, tmp) - de(pos - eps.xyy, tmp),\n\t\t\tde(pos + eps.yxy, tmp) - de(pos - eps.yxy, tmp),\n\t\t\tde(pos + eps.yyx, tmp) - de(pos - eps.yyx, tmp)\n\t\t));\n\t\tref = reflect(rd, nor);\n\t\tvec3 key = normalize(vec3(0.8, 0.7, -0.6));\n\t\t\n\t\tfloat occ = 0.0, w = 1.0, s = 0.006;\n\t\tfor(int i = 0; i < 15; i++) {\n\t\t\tfloat d = de(pos + nor*s, tmp);\n\t\t\tocc += (s - d)*w;\n\t\t\tw *= 0.95;\n\t\t\ts += s/(float(i) + 1.0);\n\t\t}\n\t\tocc = 1.0 - clamp(occ, 0.0, 1.0);\n\t\t\n\t\tfloat sha = 1.0; s = 0.002;\n\t\tfor(int i = 0; i < 50; i++) {\n\t\t\tfloat d = de(pos + key*s, tmp);\n\t\t\ts += d;\n\t\t\tsha = min(sha, 8.0*d/s);\n\t\t\tif(d < 0.0 || t >= 10.0) break;\n\t\t}\n        sha = clamp(sha, 0.0, 1.0);\n\t\t\n\t\tcol = clamp(dot(nor, key), 0.0, 1.0)\n\t\t\t*vec3(1.64, 1.57, 0.99)\n\t\t\t*sha;\n\t\t\n\t\tcol += clamp(0.5 + 0.5*nor.y, 0.0, 1.0)\n\t\t\t*vec3(0.16, 0.20, 0.28)\n\t\t\t*occ;\n\t\t\n\t\tcol += clamp(dot(nor, key*vec3(-1, 0, -1)), 0.0, 1.0)\n\t\t\t*vec3(0.40, 0.28, 0.20)\n\t\t\t*occ;\n\n\t\tvec3 mat; \n\t\t\t\t\t\n\t\tif(pos.y > -0.99) {\n\t\t\tmat = mix(vec3(1.0, 0.3, 0.0), vec3(0.3, 1.0, 0.3), orb.x);\n\t\t\tmat = mix(mat, vec3(0.3, 0.3, 1.0), orb.y);\n\t\t\tmat = mix(mat, vec3(1.1, 0.8, 0.1), orb.z);\n\t\t}\n\t\telse mat = 0.5 + 0.5*vec3(mod(floor(pos.x) + floor(pos.z), 2.0));\n\n\t\tcol *= 0.2*mat;\n\t\tcol += pow(clamp(dot(key, ref), 0.0, 1.0), 8.0)*vec3(1.00, 0.95, 0.5)*mat*occ;\n\t}\n\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 p = -1.0 + 2.0*fragCoord.xy/iResolution.xy;\n\tp.x *= iResolution.x/iResolution.y;\n\n\tvec3 ro = 1.75*vec3(cos(iTime*0.4), 0.5, -sin(iTime*0.4));\n\tvec3 ww = normalize(-ro);\n\tvec3 uu = normalize(cross(vec3(0, 1, 0), ww));\n\tvec3 vv = normalize(cross(ww, uu));\n\tvec3 rd = normalize(p.x*uu + p.y*vv + 1.97*ww);\n\n\tvec3 td, tp, rp, re;\n\tvec3 col = render(ro, rd, tp, td);\n\n\tvec3 rcol = render(tp, td, rp, re);\n\n\tcol = mix(col, rcol, 0.2);\n\t\n\tcol = pow(col, vec3(1.0/2.2));\n\t\n\tfragColor = vec4(col, 1);\n}",
   "name": "Image",
   "description": "",
   "type": "image"
  }
 ]
}