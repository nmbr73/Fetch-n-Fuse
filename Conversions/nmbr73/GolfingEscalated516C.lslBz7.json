{"Shader":{"ver":"0.1","info":{"id":"lslBz7","date":"1495514854","viewed":8615,"name":"Golfing Escalated - 516 c","username":"GregRostami","description":"iapafoto and I've done everything that we can to reduce drift's brilliant shader:\n[url]https:\/\/www.shadertoy.com\/view\/MtK3Wc[\/url]\nPlease help me make this shader smaller.\nCalling all golfing addicts (Fabrice, coyote, iq) ... HELP!! :)","likes":22,"published":3,"flags":64,"usePreview":0,"tags":["raymarching","iq","elevated","codegolf"],"hasliked":0},"renderpass":[{"inputs":[{"id":12823,"src":"https:\/\/soundcloud.com\/paulaloveless\/puryx-re-elevated","ctype":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ 516 chars - Xor does the IMPOSSIBLE by removing 13 chars!!\n\n#define V vec3\/\/\n#define S .1*sin(q.x+sin(q.z))\/\/\nmat2 m = mat2(8,6,-6,8);\/\/\nfloat h,s,t,x,p,d,v;\/\/\nV q,z,w,U;\/\/\n#define g(p)(q=p,h=abs(S),q.xz*=m*.1,h+S)\/\/\nfloat n(V p){\/\/\n    for(p*=.1,s=.08,t=.9; (s\/=.4)<4e2; p+=t) t-=g(p)\/s, p.xz*=m*.21;\/\/\n    return 3.-exp(t);}\/\/\nvoid mainImage(out vec4 O, vec2 u) {\n    U = V(u,0)\/iResolution-1.;\n    for(d=p=x=0.; d++<2e2 && p\/5e3<=x;)\n        z=V(0,-8.*g(V(0,0,v=iTime*.2)),v\/.1)+p*normalize(U-V(sin(v),U.y*.7-.1,-3)),\n        p += x = z.y+n(z);\n    O.rgb = d\/5e2+.1+.1*log(p)\n                -dot(V(w.z=.01),\n                     normalize(V(n(z-w.zyx),\n                                 x = n(z),\n                                 n(z-w)-n(z.zyx*11.)\/5e2)\n                               -x))\n           *n(z.zyx*6.)*V(5,10,15); }\/*\n\n\n\/\/ 529 chars - Applying #define trick:\n\n#define V vec3\/\/\n#define S.1*sin(q.x+sin(q.z))\/\/\nmat2 m = mat2(8,6,-6,8);\/\/\nfloat h,s,t,x,p,o=.1,d,v;\/\/\nV q,z,w;\/\/\n#define g(p)(q=p,h=abs(S),q.xz*=m*.1,h+S)\/\/\nfloat n(V p){\/\/\n    for(p*=.1,s=.08,t=.9; (s\/=.4)<4e2; p+=t) t-=g(p)\/s, p.xz=p.xz*m*.21;\/\/\n    return 3.-exp(t);}\/\/\n#define mainImage(O,u)                                                                  \\\n    vec2 U = u\/iResolution.xy;                                                          \\\n    U--;                                                                                \\\n    for(d=p=x=0.; d++<2e2 && p\/5e3<=x; o+=.002 )                                        \\\n        z=V(0,-8.*g(w=V(0,0,v=iTime*.2)),v\/.1)+p*normalize(V(U.x-sin(v),U.y*.3+.1,2)),  \\\n        p += x = z.y+n(z);                                                              \\\n    O.rgb = o+.1*log(p)                                                                 \\\n                -dot(V(w.z=.01),                                                        \\\n                     normalize(V(n(z-w.zyx),                                            \\\n                                 x = n(z),                                              \\\n                                 n(z-w)-n(z.zyx*11.)\/5e2)                               \\\n                               -x))                                                     \\\n                *n(z.zyx*6.)*V(5,10,15)                                            \n\n\n        \n\/\/ 540 chars - Golfing master coyote, does it again ...\n\n#define V vec3\n#define S.1*sin(q.x+sin(q.z))\n\nmat2 m = mat2(8,6,-6,8);\nfloat h,s,t,x,p,o=.1,d,v;\nV q,z,w;\n\n#define g(p)(q=p,h=abs(S),q.xz*=m*.1,h+S)\n\nfloat n(V p){\n    for(p*=.1,s=.08,t=.9; (s\/=.4)<4e2; p+=t) t-=g(p)\/s, p.xz=p.xz*m*.21;\n    return 3.-exp(t);}\n\nvoid mainImage(out vec4 O,vec2 U)\n{\n    U\/=iResolution.xy;\n    U--;\n    for(d=p=x=0.; d++<2e2 && p\/5e3<=x; o+=.002 )\n        z=V(0,-8.*g(w=V(0,0,v=iTime*.2)),v\/.1)+p*normalize(V(U.x-sin(v),U.y*.3+.1,2)),\n        p += x = z.y+n(z);\n    O.xyz = o+.1*log(p)\n                -dot(V(w.z=.01),\n                     normalize(V(n(z-w.zyx),\n                                 x = n(z),\n                                 n(z-w)-n(z.zyx*11.)\/5e2)\n                               -x))\n                *n(z.zyx*6.)*V(5,10,15);\n}\n\n\n\n\/\/ 555 chars - stduhpf uses several optimizations to bring this shader DOWN!\n\n#define V vec3\n#define S sin(p.x+sin(p.z))\n\nmat2 m = .1*mat2(8,6,-6,8);\nfloat h,s,t,i;\n\nfloat g(V p){\n    h=abs(S); p.xz*=m;\n    return h+S;}\n\nfloat n(V p){\n    for(p*=.1,s=5.,i=t=.9; i++<9.;) t-=s*.1*g(p), s*=.4, p.xz*=m*2.1, p+=t;\n    return 3.-exp(t);}\n\nvoid mainImage(out vec4 O,vec2 U)\n{\n    float x=.0,p=x,o=1.,d=x;\n    V z, w = V(0,0,iTime*.2);\n    U\/=iResolution.xy;\n    for(U--; d++<2e2 && p\/5e3<=x;o+=.02 )\n        z=V(0,-.8*g(w),w.z\/.1)+p*normalize(V(U.x-sin(w.z),U.y*.3+.1,2)),\n        p += x = z.y+n(z);\n    w.z=.01;\n    O.xyz = .1*(o+log(p)\n                -dot(V(.5),\n                     normalize(V(n(z-w.zyx),\n                                 x = n(z),\n                                 n(z-w)-n(z.zyx*11.)\/5e2)\n                               -x))\n                *n(z.zyx*6.)*V(1,2,3));\n}\n\n\n\n\/\/ 598 chars - by Greg Rostami\n\n#define V vec3\n#define W vec2\n#define S sin(p.x+sin(p.y))\n\nmat2 m = .1*mat2(8,6,-6,8);\nfloat h,s,t;\n\nfloat g(W p){\n    h=abs(S); p*=m;\n\treturn h+S;}\n\nfloat n(W p){\n    p*=.1;\n    s=5.,t=.9;\n\tfor(int i=0;i++<9;) t-=s*.1*g(p), s*=.4, p=p*m*2.1+t;\n    return 3.-exp(t);}\n\nvoid mainImage(out vec4 O,W U)\n{\n    float e,v=iTime*.2,u=sin(v),x=.0,p=x,o=x;\n\tV r=V(U\/iResolution.xy-1.,0),z,y;\n\tfor(int d=0;d++<200;)        \n        if (p\/5e3<=x)\n\t\t\tz=V(0,-.8*g(W(0,v)),v\/.1)+p*normalize(V(r.x-u,r.y*.3+.1,2)),\n            x=z.y+n(z.xz),p+=x,o++;\n    x=n(z.xz);\n    O.xyz = .1*(dot(V(-.5),normalize(V(n(z.xz-W(.01,0))-x,0,n(z.xz-W(0,.01))-x-n(z.zx*11.)\/5e2)))*\n        n(z.zx*6.)*V(1,2,3)+1.+o\/50.+log(p));\n\n}\n\n\n\n\/\/ 664 chars: drift's original shader:\n\nmat2 m=mat2(.8,-.6,.6,.8);\n\nfloat g(vec2 p){\n    float e=abs(sin(p.x+sin(p.y)));p=m*p;\n\treturn .1*(e+sin(p.x+sin(p.y)));\n}\n\nfloat n(vec2 p){\n    p*=.1;\n    float s=5.,t=.9;\n\tfor(int i=0;i<9;i++)\n        t-=s*g(p),s*=.4,p=m*2.1*p+t;\n    return 3.-exp(t);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    float v=iTime*2.,u=sin(v*.1),x=.0,p=.0,o=.0;\n\tvec3 r=vec3(fragCoord\/iResolution.xy-1.,0),z,y;\n\tfor(int d=0;d<288;d++)        \n        if (p*.0002<=x)\n\t\t\tz=vec3(0,-8.*g(vec2(0,v)*.1),v)+p*normalize(vec3(r.x-u,r.y*.3+.1,2)),x=z.y+n(z.xz),p+=x,o++;\n    x=n(z.xz);\n    y=normalize(vec3(n(z.xz-vec2(.01,0))-x,0,n(z.xz-vec2(0,.01))-x-n(z.zx*11.)*.002));\n    fragColor.xyz=dot(vec3(-.5),y)*n(z.zx*6.)*vec3(.1,.2,.3)+.1+o*.002+log(p)*.1;\n}\n*\/","name":"Image","description":"","type":"image"}]}}