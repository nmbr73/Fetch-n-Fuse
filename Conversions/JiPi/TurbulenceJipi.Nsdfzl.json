{
 "ver": "0.1",
 "info": {
  "id": "Nsdfzl",
  "date": "0",
  "viewed": 0,
  "name": "Turbulence JiPi",
  "description": "Turbulence",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "a"
  ],
  "hasliked": 0,
  "parentid": "sd3fzs",
  "parentname": "Turbulence"
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "4dfGRn",
     "filepath": "/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg",
     "type": "texture",
     "channel": 0,
     "sampler": {
      "filter": "mipmap",
      "wrap": "repeat",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "\nfloat evolution =0.0;//-50~50\nfloat seed = 0.0;//0~5\nfloat intensity = 0.85;//0  1\nfloat octaves = 5.0;//0 8\nvec2 position = vec2(250.,250.);//0~500.0\n  \n\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n        vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n        vec4 mod289(vec4 x) {\n          return x - floor(x * (1.0 / 289.0)) * 289.0;\n        }\n        vec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n        vec4 permute(vec4 x) {\n             return mod289(((x*34.0)+1.0)*x);\n        }\n\n        vec4 taylorInvSqrt(vec4 r)\n        {\n          return 1.79284291400159 - 0.85373472095314 * r;\n        }\n\n        float snoise(vec3 v)\n          {\n          const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n          const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n        // First corner\n          vec3 i  = floor(v + dot(v, C.yyy) );\n          vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n        // Other corners\n          vec3 g = step(x0.yzx, x0.xyz);\n          vec3 l = 1.0 - g;\n          vec3 i1 = min( g.xyz, l.zxy );\n          vec3 i2 = max( g.xyz, l.zxy );\n\n          //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n          //   x1 = x0 - i1  + 1.0 * C.xxx;\n          //   x2 = x0 - i2  + 2.0 * C.xxx;\n          //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n          vec3 x1 = x0 - i1 + C.xxx;\n          vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n          vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n        // Permutations\n          i = mod289(i);\n          vec4 p = permute( permute( permute(\n                     i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n                   + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n                   + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n        // Gradients: 7x7 points over a square, mapped onto an octahedron.\n        // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n          float n_ = 0.142857142857; // 1.0/7.0\n          vec3  ns = n_ * D.wyz - D.xzx;\n\n          vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n          vec4 x_ = floor(j * ns.z);\n          vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n          vec4 x = x_ *ns.x + ns.yyyy;\n          vec4 y = y_ *ns.x + ns.yyyy;\n          vec4 h = 1.0 - abs(x) - abs(y);\n\n          vec4 b0 = vec4( x.xy, y.xy );\n          vec4 b1 = vec4( x.zw, y.zw );\n\n          //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n          //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n          vec4 s0 = floor(b0)*2.0 + 1.0;\n          vec4 s1 = floor(b1)*2.0 + 1.0;\n          vec4 sh = -step(h, vec4(0.0));\n\n          vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n          vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n          vec3 p0 = vec3(a0.xy,h.x);\n          vec3 p1 = vec3(a0.zw,h.y);\n          vec3 p2 = vec3(a1.xy,h.z);\n          vec3 p3 = vec3(a1.zw,h.w);\n\n        //Normalise gradients\n          vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n          p0 *= norm.x;\n          p1 *= norm.y;\n          p2 *= norm.z;\n          p3 *= norm.w;\n\n        // Mix final noise value\n          vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n          m = m * m;\n          return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                        dot(p2,x2), dot(p3,x3) ) );\n        }\n\n        float snoise(vec2 v) {\n\n            // Precompute values for skewed triangular grid\n            const vec4 C = vec4(0.211324865405187,\n                                // (3.0-sqrt(3.0))/6.0\n                                0.366025403784439,\n                                // 0.5*(sqrt(3.0)-1.0)\n                                -0.577350269189626,\n                                // -1.0 + 2.0 * C.x\n                                0.024390243902439);\n                                // 1.0 / 41.0\n\n            // First corner (x0)\n            vec2 i  = floor(v + dot(v, C.yy));\n            vec2 x0 = v - i + dot(i, C.xx);\n\n            // Other two corners (x1, x2)\n            vec2 i1 = vec2(0.0);\n            i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n            vec2 x1 = x0.xy + C.xx - i1;\n            vec2 x2 = x0.xy + C.zz;\n\n            // Do some permutations to avoid\n            // truncation effects in permutation\n            i = mod289(i);\n            vec3 p = permute(\n                    permute( i.y + vec3(0.0, i1.y, 1.0))\n                        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n            vec3 m = max(0.5 - vec3(\n                                dot(x0,x0),\n                                dot(x1,x1),\n                                dot(x2,x2)\n                                ), 0.0);\n\n            m = m*m ;\n            m = m*m ;\n\n            // Gradients:\n            //  41 pts uniformly over a line, mapped onto a diamond\n            //  The ring size 17*17 = 289 is close to a multiple\n            //      of 41 (41*7 = 287)\n\n            vec3 x = 2.0 * fract(p * C.www) - 1.0;\n            vec3 h = abs(x) - 0.5;\n            vec3 ox = floor(x + 0.5);\n            vec3 a0 = x - ox;\n\n            // Normalise gradients implicitly by scaling m\n            // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n            m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n            // Compute final noise value at P\n            vec3 g = vec3(0.0);\n            g.x  = a0.x  * x0.x  + h.x  * x0.y;\n            g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n            return 130.0 * dot(m, g);\n        }\n\n        float turbulence (in vec2 st, in int OCTAVES, in vec2 parallax, in float evolution) {\n            // Initial values\n            float value = 0.0;\n            float amplitude = .5;\n            float frequency = 0.;\n            //\n            // Loop of octaves\n            for (int i = 0; i < OCTAVES; i++) {\n                value += amplitude * abs(snoise(vec3(st,evolution)));\n                st *= 2.;\n                st += parallax;\n                amplitude *= .5;\n            }\n            return value;\n        }\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv =  fragCoord.xy / iResolution.xy;\n    vec2 st =  fragCoord.xy / iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    st += position*vec2(-1.,1.)/500. - 0.5;\n\n    vec2 parallax = vec2(0.0,0.0);\n   \n    float p = 0.0;\n    p += turbulence(st, int(octaves), parallax, evolution + 7391.935*seed);\n    p *= intensity;\n    uv.x += p;\n    \n    \n    vec2 parallay = vec2(0.0,0.0);\n    float q = 0.0;\n    q += turbulence(st, int(octaves), parallay, evolution + 7391.935*seed);\n    q *= intensity;\n    uv.y += q;\n    \n   \n\n    vec4 texColor = texture(iChannel0,uv);\n    fragColor = texColor;\n   \n}",
   "name": "Image",
   "description": "",
   "type": "image"
  }
 ]
}