{"Shader":{"ver":"0.1","info":{"id":"WsKXWh","date":"1573998453","viewed":636,"name":"JeanParticleVanDamme","username":"kuvkar","description":"Just messing around.. simple VanDamme based particlesystem","likes":20,"published":3,"flags":32,"usePreview":1,"tags":["particles","feedback"],"hasliked":0},"renderpass":[{"inputs":[{"id":36,"src":"\/media\/a\/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","ctype":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 P )\n{\n    vec2 uv = P\/iResolution.xy;\n    \n    float mask = mask(texture(iChannel2, uv));\n    vec4 c = texelFetch(iChannel0, ivec2(P), 0);\n    vec4 col = (texture(iChannel2, uv))*mask;\n    col *= 1.-mask;\n    vec4 col1 = vec4(1.0, 0., 0.0, 0.0);\n    vec4 col2 = vec4(1.0, 1.0, 1.0, 0.0);\n    vec4 col3 = vec4(.2, .8, 1.0, 0.0);\n    col1 = mix(col1, col3, clamp(c.y*1.5, 0.0, 1.0));\n    float ln = min(length(c.xy)*.6, 1.0);\n    fragColor = col + ln * (1.-mask) * mix(col1, col2, ln);\n    float edge = .55-max(abs(uv.x - .5), abs(uv.y - .5));\n    fragColor *=  1.+smoothstep(.41, 0.5, .49-edge)*155.*vec4(.2, 0.9, 0.6, 0.0);\n    fragColor = min(fragColor, 1.0);\n    vec4 bg = vec4(0.02, 0.0, uv.y * .07, 0.0)*.1;\n    fragColor +=bg;\n    fragColor = sqrt(fragColor);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":30,"src":"\/media\/a\/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":36,"src":"\/media\/a\/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","ctype":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 P )\n{\n    \n    fragColor = vec4(0.0);\n    \n    if(iFrame < 5) return;\n    \n    vec2 uv = P.xy\/iChannelResolution[0].xy;\n    vec4 rgba  = texture(iChannel2, uv);\n    \n    float ba= smoothstep(0.49, 0.5, abs(uv.x - .5));\n    float bb= smoothstep(0.49, 0.5, abs(uv.y - .5));\n\n    if(mask(rgba) > 0.)\n    {\n        \n        fragColor = vec4(0.0);\n        fragColor.xy = texture(iChannel1, uv + iTime).rg;\n        fragColor.x -= .5;\n        fragColor.y *= 0.25;\n        fragColor.zw = sign(fragColor.xy) * 1.1;\n    }\n    else\n    {\n        vec4 ct = texelFetch(iChannel0, ivec2(P) + ivec2( 0.0,  1.0), 0);\n        vec4 cr = texelFetch(iChannel0, ivec2(P) + ivec2( 1.0,  0.0), 0);\n        vec4 cl = texelFetch(iChannel0, ivec2(P) + ivec2(-1.0,  0.0), 0);\n        vec4 cb = texelFetch(iChannel0, ivec2(P) + ivec2( 0.0, -1.0), 0);\n\n        vec4 tr = texelFetch(iChannel0, ivec2(P) + ivec2(  1.0,  1.0), 0);\n        vec4 tl = texelFetch(iChannel0, ivec2(P) + ivec2(  1.0, -1.0), 0);\n        \n        vec4 br = texelFetch(iChannel0, ivec2(P) + ivec2(  1.0, -1.0), 0);\n        vec4 bl = texelFetch(iChannel0, ivec2(P) + ivec2( -1.0, -1.0), 0);\n        \n        vec4 c = texelFetch(iChannel0, ivec2(P), 0);\n        vec4 incb = vec4(0.0);\n\n        \/\/ incoming from topright\n        if(tr.z <= -1.0 && tr.w <= -1.0)\n        {\n            tr.zw -= vec2(-1.0, -1.0);\n            incb = tr;\n        }\n\n        \/\/ incoming from topleft\n        else if(tl.z >= 1.0 && tl.w <= -1.0)\n        {\n            tl.zw -= vec2(1.0, -1.0);\n            incb = tl;\n        }\n        \n        \/\/ incoming from bottomright\n        if(br.z <= -1.0 && br.w >= 1.0)\n        {\n            br.zw -= vec2(-1.0, 1.0);\n            incb = br;\n        }\n\n        \/\/ incoming from bottomleft\n        else if(bl.z >= 1.0 && bl.w >= 1.0)\n        {\n            bl.zw -= vec2(1.0, 1.0);\n            incb = bl;\n        }\n        \n        \n        \/\/ incoming from bottom\n        else if(cb.w >= 1.0 && abs(cb.z) < 1.0)\n        {\n            cb.w -= 1.0;\n            incb = cb;\n        }\n\n        \/\/ incoming from top\n        else if(ct.w <= -1.0 && abs(ct.z) < 1.0)\n        {\n            ct.w += 1.0;\n            incb = ct;\n        }\n        \n        \/\/ incoming from left\n        else if(abs(cl.w) < 1.0 && cl.z >= 1.0)\n        {\n            cl.z -= 1.0;\n            incb = cl;\n        }\n\n        \/\/ incoming from right\n        else if(abs(cr.w) < 1.0 && cr.z <= -1.0)\n        {\n            cr.z += 1.0;\n            incb = cr;\n        }\n        \n        \n        \/\/ delete from this cell if moved out\n        if(abs(c.z) > 1.0 || abs(c.w) > 1.0) c = vec4(0.0);\n        \n         \n        \n        \/\/ add incoming one\n        c += incb;\n        \n        \/\/ apply velocity\n        c.zw += c.xy * iTimeDelta * 50.;\n        if(dot(c, c) > 0. && bb <= 0. && ba <= 0.)\n        {\n            c.y -= iTimeDelta * iTimeDelta * 25.;\n        }\n        \n        c.xy *= 0.98;\n        fragColor = c;\n    }\n\n    \/\/ vignette\n    vec2 edgeDir = (-(uv - 0.5));\n    edgeDir.y += sin(uv.x*220. + iTime*2.1);\n    edgeDir.x += cos(uv.y*220. + iTime*2.1);\n    fragColor.xy += min(1.0, ba + bb)*edgeDir*.005;    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\/\/ https:\/\/www.shadertoy.com\/view\/XsXGDM\n\n#define BIAS  4.\n#define LUMIN vec3(.2126, .7152, .0722)\n\nfloat mask(in vec4 fg)\n{\n\tfloat sf = max(fg.r, fg.b);\n\tfloat k = clamp((fg.g - sf) * BIAS, 0., 1.);\n\t\n\tif (fg.g > sf) fg = vec4(dot(LUMIN, fg.xyz));\n\t\n\treturn smoothstep(0.3, 0., (fg * k).r);    \n}","name":"Common","description":"","type":"common"}]}}