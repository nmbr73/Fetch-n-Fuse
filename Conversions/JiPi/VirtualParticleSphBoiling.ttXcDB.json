{"Shader":{"ver":"0.1","info":{"id":"ttXcDB","date":"1592944029","viewed":1077,"name":"Virtual particle SPH - Boiling","username":"michael0884","description":"Everything is improved once more! Also now tracking the temperature!\nCellular automaton particle tracking used for advection in a fluid which is also fully conservative\nEach pixel has 1 virtual particle","likes":38,"published":3,"flags":32,"usePreview":0,"tags":["particles","ca"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"vec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); \/\/ cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 pos )\n{\n\tR = iResolution.xy; time = iTime;\n    \/\/pos = R*0.5 + pos*0.1;\n    ivec2 p = ivec2(pos);\n    \n    \/\/pressure\n    vec4 P = textureLod(ch1, pos\/R, 0.);\n    \n    \/\/border render\n    vec3 bord = smoothstep(border_h+1.,border_h-1.,border(pos))*vec3(1.);\n    \n    \/\/particle render\n    vec2 rho = vec2(0.);\n\n    range(i, -1, 1) range(j, -1, 1)\n    {\n       vec2 dx = vec2(i,j);\n       vec4 data = texel(ch0, pos + dx);\n       particle P = getParticle(data, pos + dx);\n       \n        vec2 x0 = P.X; \/\/update position\n        \/\/how much mass falls into this pixel\n        rho += 1.*P.M*G((pos - x0)\/0.75); \n    }\n  \trho = 1.2*rho;\n    \n     vec4 D = pixel(ch2, pos);\n    float ang = atan(D.x, D.y);\n    float mag = 0. + 10.*length(D.xy)*rho.x;\n    \n    \/\/ Output to screen\n    fragColor = vec4(1.6*vec3(0.2,0.4,1.)*rho.x + 1.*vec3(1.5,0.3,0.3)*rho.y*rho.x + bord + 0.*abs(P.x),0);\n\tfragColor.xyz = tanh(vec3(1.,1.1,1.3)*fragColor.xyz);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define Bf(p) p\n#define Bi(p) ivec2(p)\n#define texel(a, p) texelFetch(a, Bi(p), 0)\n#define pixel(a, p) texture(a, (p)\/R)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n\n#define PI 3.14159265\n\n#define loop(i,x) for(int i = 0; i < x; i++)\n#define range(i,a,b) for(int i = a; i <= b; i++)\n\n#define dt 1.5\n\n#define border_h 5.\nvec2 R;\nvec4 Mouse;\nfloat time;\n\nfloat Pf(vec2 rho)\n{\n    \/\/return 0.2*rho; \/\/gas\n    float GF = smoothstep(0.49, 0.5, 1. - rho.y);\n    return mix(0.5*rho.x,0.04*rho.x*(rho.x\/0.2 - 1. + 0.1*rho.y), GF); \/\/water pressure\n}\n\nmat2 Rot(float ang)\n{\n    return mat2(cos(ang), -sin(ang), sin(ang), cos(ang)); \n}\n\nvec2 Dir(float ang)\n{\n    return vec2(cos(ang), sin(ang));\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat border(vec2 p)\n{\n    float bound = -sdBox(p - R*0.5, R*vec2(0.5, 0.5)); \n    float box = 1e10 + sdBox(Rot(0.4*time)*(p - R*0.5) , R*vec2(0.005, 0.2));\n    float drain = -sdBox(p - R*vec2(0.9, 0.05), vec2(0));\n    return max(drain,min(bound, box));\n}\n\n#define h 1.\nvec3 bN(vec2 p)\n{\n    vec3 dx = vec3(-h,0,h);\n    vec4 idx = vec4(-1.\/h, 0., 1.\/h, 0.25);\n    vec3 r = idx.zyw*border(p + dx.zy)\n           + idx.xyw*border(p + dx.xy)\n           + idx.yzw*border(p + dx.yz)\n           + idx.yxw*border(p + dx.yx);\n    return vec3(normalize(r.xy), r.z + 1e-4);\n}\n\nuint pack(vec2 x)\n{\n    x = 65534.0*clamp(0.5*x+0.5, 0., 1.);\n    return uint(round(x.x)) + 65535u*uint(round(x.y));\n}\n\nvec2 unpack(uint a)\n{\n    vec2 x = vec2(a%65535u, a\/65535u);\n    return clamp(x\/65534.0, 0.,1.)*2.0 - 1.0;\n}\n\nvec2 decode(float x)\n{\n    uint X = floatBitsToUint(x);\n    return unpack(X); \n}\n\nfloat encode(vec2 x)\n{\n    uint X = pack(x);\n    return uintBitsToFloat(X); \n}\n\nstruct particle\n{\n    vec2 X;\n    vec2 V;\n    vec2 M;\n};\n    \nparticle getParticle(vec4 data, vec2 pos)\n{\n    particle P; \n    P.X = decode(data.x) + pos;\n    P.V = decode(data.y);\n    P.M = data.zw;\n    return P;\n}\n\nvec4 saveParticle(particle P, vec2 pos)\n{\n    P.X = clamp(P.X - pos, vec2(-0.5), vec2(0.5));\n    return vec4(encode(P.X), encode(P.V), P.M);\n}\n\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nfloat G(vec2 x)\n{\n    return exp(-dot(x,x));\n}\n\nfloat G0(vec2 x)\n{\n    return exp(-length(x));\n}\n\n\/\/diffusion amount\n#define dif 1.1\nvec3 distribution(vec2 x, vec2 p, float K)\n{\n    vec4 aabb0 = vec4(p - 0.5, p + 0.5);\n    vec4 aabb1 = vec4(x - K*0.5, x + K*0.5);\n    vec4 aabbX = vec4(max(aabb0.xy, aabb1.xy), min(aabb0.zw, aabb1.zw));\n    vec2 center = 0.5*(aabbX.xy + aabbX.zw); \/\/center of mass\n    vec2 size = max(aabbX.zw - aabbX.xy, 0.); \/\/only positive\n    float m = size.x*size.y\/(K*K); \/\/relative amount\n    \/\/if any of the dimensions are 0 then the mass is 0\n    return vec3(center, m);\n}\n\n\/\/diffusion and advection basically\nvoid Reintegration(sampler2D ch, inout particle P, vec2 pos)\n{\n    \/\/basically integral over all updated neighbor distributions\n    \/\/that fall inside of this pixel\n    \/\/this makes the tracking conservative\n    float Mi = 0.;\n    range(i, -2, 2) range(j, -2, 2)\n    {\n        vec2 tpos = pos + vec2(i,j);\n        vec4 data = texel(ch, tpos);\n       \n        particle P0 = getParticle(data, tpos);\n       \n        P0.X += P0.V*dt; \/\/integrate position\n\n        vec3 D = distribution(P0.X, pos, dif);\n\t\tvec3 D1 = distribution(P0.X, pos, 1.);\n        \/\/the deposited mass into this cell\n        float m = P0.M.x*D.z;\n        \n        \/\/add weighted by mass\n        P.X += D.xy*m;\n        P.V += P0.V*m;\n        \n        P.M.y += P0.M.y*P0.M.x*D1.z;\n        \n        \/\/add mass\n        P.M.x += m;\n        Mi += P0.M.x*D1.z;\n    }\n    \n    \/\/normalization\n    if(P.M.x != 0.)\n    {\n        P.X \/= P.M.x;\n        P.V \/= P.M.x;\n    }\n    if(Mi != 0.)\n    {\n        P.M.y \/= Mi;\n    }\n}\n\n\/\/force calculation and integration\nvoid Simulation(sampler2D ch, inout particle P, vec2 pos)\n{\n    \/\/Compute the SPH force\n    vec2 F = vec2(0.);\n    vec3 avgV = vec3(0.);\n    range(i, -2, 2) range(j, -2, 2)\n    {\n        vec2 tpos = pos + vec2(i,j);\n        vec4 data = texel(ch, tpos);\n        particle P0 = getParticle(data, tpos);\n        vec2 dx = P0.X - P.X;\n        float avgP = 0.5*P0.M.x*(Pf(P.M) + Pf(P0.M)); \n        F -= 1.*G(1.*dx)*avgP*dx;\n        avgV += P0.M.x*G(1.*dx)*vec3(P0.V,1.);\n    }\n    avgV.xy \/= avgV.z;\n\n    \/\/viscosity\n    F += 0.*P.M.x*(avgV.xy - P.V);\n    \n    \/\/gravity\n    F += P.M.x*vec2(0., -0.0005) + P.M.x*step(0.5, P.M.y)*vec2(0., 0.005);\n\n    if(Mouse.z > 0.)\n    {\n        vec2 dm =(Mouse.xy - Mouse.zw)\/10.; \n        float d = distance(Mouse.xy, P.X)\/20.;\n        F += 0.001*dm*exp(-d*d);\n        P.M.y += 0.1*exp(-40.*d*d);\n    }\n    \n    \/\/integrate\n    P.V += F*dt\/P.M.x;\n\n    \/\/border \n    vec3 N = bN(P.X);\n    float vdotN = step(N.z, border_h)*dot(-N.xy, P.V);\n    P.V += 1.*(N.xy*vdotN + N.xy*abs(vdotN));\n    P.V += P.M.x*N.xy*step(abs(N.z), border_h)*exp(-N.x);\n    \n        \n    if(length(vec2(1., 1.)*(P.X - R*vec2(0.5, 0.1))) < 10.) P.M.y = mix(P.M.y, 1., 0.06);\n    if(N.z < 2.*border_h) P.M.y *= 0.9;\n\n    \n    \/\/velocity limit\n    float v = length(P.V);\n    P.V \/= (v > 1.)?v:1.;\n}\n\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"#define mass 1.\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    R = iResolution.xy; time = iTime; Mouse = iMouse;\n    ivec2 p = ivec2(pos);\n        \n    \/\/particle velocity, mass and grid distributed density\n    vec2 F = vec2(0.);\n    \n    vec4 data = texel(ch0, pos); \n    \n    particle P;\/\/ = getParticle(data, pos);\n       \n    Reintegration(ch0, P, pos);\n   \n    \/\/initial condition\n    if(iFrame < 1)\n    {\n        \/\/random\n        vec3 rand = hash32(pos);\n        if(rand.z < 0.3) \n        {\n            P.X = pos;\n            P.V = 0.5*(rand.xy-0.5) + vec2(0., 0.);\n            P.M = vec2(mass, 0.);\n        }\n        else\n        {\n            P.X = pos;\n            P.V = vec2(0.);\n            P.M = vec2(0.);\n        }\n    }\n    \n    U = saveParticle(P, pos);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"void mainImage( out vec4 U, in vec2 pos )\n{\n    R = iResolution.xy; time = iTime; Mouse = iMouse;\n    ivec2 p = ivec2(pos);\n        \n    \/\/particle velocity, mass and grid distributed density\n    vec2 F = vec2(0.);\n    \n    vec4 data = texel(ch0, pos); \n    \n    particle P = getParticle(data, pos);\n    \n    \n    if(P.M.x != 0.) \/\/not vacuum\n    {\n        Simulation(ch0, P, pos);\n    }\n    \n    U = saveParticle(P, pos);\n}","name":"Buffer B","description":"","type":"buffer"}]}}