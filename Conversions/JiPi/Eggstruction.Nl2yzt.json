{"Shader":{"ver":"0.1","info":{"id":"Nl2yzt","date":"1650116687","viewed":393,"name":"Eggstruction","username":"blackle","description":"revision shader showdown 2022 semi-final","likes":35,"published":3,"flags":32,"usePreview":0,"tags":["livecode"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"#define ro(r) mat2(cos(r),sin(r),-sin(r),cos(r))\n\nfloat box(vec3 p, vec3 d) {\n  p = abs(p)-d;\n  return length(max(p,0.))+min(0.,max(p.x,max(p.y,p.z)));\n}\n\nfloat beam(vec3 p) {\n  p.xy -= max(0.,dot(normalize(vec2(1.)),p.xy))*2.*normalize(vec2(1));\n  p.xy -= max(0.,dot(normalize(vec2(1,-1)),p.xy))*2.*normalize(vec2(1,-1));\n  p.x += .2;\n  vec3 p2 = p;\n  p2.y = abs(p2.y)-.2;\n  p.z = asin(sin(p.z*10.))\/10.;\n  p.yz *= ro(radians(45.));\n  return min(length(p2.xy),length(p.xy))-.02;\n}\n\nfloat zip(float k) {\n  k += iTime;\n  float id = floor(k)+.5;\n  k -= id;\n  k = smoothstep(-.1,.1,k)+smoothstep(-.2,.2,k)-smoothstep(-.3,.3,k);\n  k+=id;\n  return k;\n}\n\nfloat o1, o2, o3;\nvec3 oop;\nfloat scene(vec3 p) {\n  p.xy *= ro(asin(sin(zip(.4)\/2.))*.7);\n  o1 = beam(p);\n  o2 = beam(p.xzy);\n  o3 = box(p,vec3(.2))-.1;\n  o3 = min(o3,box(p-vec3(0,1,0),vec3(.2,.2,.4))-.1);\n  o3 = min(o3,box(p-vec3(0,-5,0),vec3(.2,.05,.2))-.1);\n  o3 = min(o3,box(p-vec3(0,0,.6),vec3(.2,.2,.05))-.1);\n  o2 = max(o2,p.y-.79);\n  o2 = max(o2,-p.y-5.);\n  o1 = max(o1,p.z-.48);\n  p.z+=.4;\n  float op = p.z;\n  p.y += 2.5 + asin(sin(zip(0.)));\n  o3  = min(o3, box(p,vec3(.2,.3,.1))-0.05);\n  \n  vec3 p2 = p;\n  p2.y=abs(p.y)-.1;\n  p.z+=.4 + max(0.,asin(sin(iTime)))*8.;\n  o3  = min(o3, box(p,vec3(.2,.3,.1))-0.05);\n  o3 = min(o3,max(max(op,-p.z),length(p2.xy)-.02));\n  p.z+=.4;\n  p.xy*=ro(iTime\/3.);\n  oop = p;\n  p.z*=.8;\n  float e = length(p)-.25+smoothstep(-.5,.5,p.z)*.4-.2;\n  if (asin(sin(iTime\/2. - 3.14159\/4.)) < 0.) e = 1e5;\n  return min(min(o3,e),min(o1,o2));\n}\n\nvec3 norm(vec3 p) {\n  mat3 k = mat3(p,p,p)-mat3(0.001);\n  return normalize(scene(p)-vec3( scene(k[0]),scene(k[1]),scene(k[2]) ));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)\/iResolution.y;\n  \n\n  vec3 cam = normalize(vec3(1.+sin(zip(.3)\/2.)*.5,uv));\n  float v = sin(zip(.7))*.3;\n  vec3 init = vec3(-6,-2.+v,-1.+cos(zip(2.)*2.)*.25);\n  \n  cam.xz*=ro(.3);\n  init.xz*=ro(.3);\n  \n  vec3 p = init;\n  bool hit = false;\n  float dist;\n  bool trig = false;\n  for(int i = 0; i<50&&!hit;i++){ \n    dist = scene(p);\n    p+=cam*dist;\n    hit = dist*dist<1e-6;\n    if(!trig)trig=dist<0.03;\n    if(dist>1e4)break;\n  }\n  vec3 lp = oop;\n  bool io1 = dist==o1;\n  bool io2 = dist==o2;\n  bool io3 = dist==o3;\n  vec3 n = norm(p);\n  vec3 r = reflect(cam,n);\n  float fact = length(sin(r*3.)*.5+.5)\/sqrt(3.);\n  vec3 matcol = texture(iChannel0,clamp(lp.yz*1.8+vec2(0,.3)+.5,0.,1.)).xyz;\n  if(io1)matcol=vec3(.7,.2,.1);\n  if(io3)matcol=vec3(.05);\n  if(io2)matcol=vec3(.7,.6,.05);\n  vec3 col = matcol+pow(fact,7.)*2.;\n  fragColor.xyz=hit?sqrt(col):vec3(trig?0.:uv.y*.5+.5);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":257,"channel":0}],"code":"\/\/from https:\/\/www.shadertoy.com\/view\/4sKyRK\nfloat distanceToBottleCurve(vec2 point) {\n    return point.y-0.1*sin(point.x*2.5 + 0.6) + 0.05*sin(5.0*point.x) + 0.04*sin(7.5*point.x);\n}\nbool texturee(vec2 uv) {\n    float ang = atan(uv.y, uv.x);\n    float len = floor(length(uv)*10.0);\n    bool val = len == 2. || len == 6. || len == 9.;\n    if (len == 3. || len == 4. || len == 5. || len == 8. || len == 10.) {\n        val = distanceToBottleCurve(vec2(ang+len,0.0))*7.99 > cos(len*7.99);\n    }\n    return val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord\/iResolution.xy-.5;\n    \/\/I would make a better revision logo but I am too tired :(\n    fragColor = vec4(1.0,91.0,188.0,1.0)\/255.;\n    float rad1 = abs(floor(atan(uv.x,uv.y)\/2.)*.04);\n    if (texturee(uv*2.5)) {\n        fragColor = vec4(255.0,214.0,0.0,1.0)\/255.;\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}}