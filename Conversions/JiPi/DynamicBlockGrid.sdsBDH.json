{"Shader":{"ver":"0.1","info":{"id":"sdsBDH","date":"1644835090","viewed":165,"name":"Dynamic Block Grid","username":"dr2","description":"Varying randomly sized mobile blocks","likes":14,"published":3,"flags":0,"usePreview":0,"tags":["blocks"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"\/\/ \"Dynamic Block Grid\" by dr2 - 2022\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n\/\/ Constant gap between adjacent blocks (full 3D extension of \"Random Rectangular Tiling\",\n\/\/ the fixed-width channels were used in, e.g., \"Green Mercury\")\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrRound4BoxDf (vec3 p, vec3 b, float r);\nfloat PrRound4Box2Df (vec2 p, vec2 b, float r);\nfloat Minv2 (vec2 p);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec3 HsvToRgb (vec3 c);\nfloat Hashfv2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\n\nvec3 ltDir;\nvec2 pMid[4], pEdge[4], qcMin, ip;\nfloat tCur, dstFar, eFac, eRound, gSize;\nconst float pi = 3.1415927;\n\n#define H(z) (0.5 + 0.5 * cos (1.5 * tCur * (0.1 + 0.9 * Hashfv2 (ip + z))))\n\nvoid CellParms ()\n{\n  vec4 hm, hc;\n  vec3 e;\n  vec2 ee[4];\n  float hp;\n  e = vec3 (-1., 0., 1.);\n  ee[0] = e.xz;\n  ee[1] = e.zz;\n  ee[2] = e.zx;\n  ee[3] = e.xx;\n  hp = H(0.);\n  hm = vec4 (H(e.zy), H(e.xy), H(e.yz), H(e.yx));\n  hc = vec4 (H(e.zz), H(e.xx), H(e.xz), H(e.zx));\n  if (mod (ip.x + ip.y, 2.) < 0.5) {\n    pEdge[0] = vec2 (hm.z - hm.y, hc.z - hp);\n    pEdge[1] = vec2 (hm.x - hm.z, hc.x - hp);\n    pEdge[2] = vec2 (hm.x - hm.w, hp - hc.w);\n    pEdge[3] = vec2 (hm.w - hm.y, hp - hc.y);\n    pMid[0] = vec2 (hm.z, hp);\n    pMid[1] = pMid[0];\n    pMid[2] = vec2 (hm.w, hp);\n    pMid[3] = pMid[2];\n  } else {\n    pEdge[0] = vec2 (hp - hc.z, hm.z - hm.y);\n    pEdge[1] = vec2 (hc.x - hp, hm.z - hm.x);\n    pEdge[2] = vec2 (hc.w - hp, hm.x - hm.w);\n    pEdge[3] = vec2 (hp - hc.y, hm.y - hm.w);\n    pMid[0] = vec2 (hp, hm.y);\n    pMid[1] = vec2 (hp, hm.x);\n    pMid[2] = pMid[1];\n    pMid[3] = pMid[0];\n  }\n  for (int k = 0; k < 4; k ++) {\n    pEdge[k] = eFac * pEdge[k] + 0.5;\n    pMid[k] = 2. * eFac * (pMid[k] - 0.5) + pEdge[k] * ee[k];\n  }\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, bs;\n  vec2 qc;\n  float dMin, d;\n  dMin = dstFar;\n  for (int k = 0; k < 4; k ++) {\n    qc = ip + pMid[k];\n    q.xz = p.xz - gSize * qc;\n    qc = floor (qc);\n    bs.xz = pEdge[k] - eFac + 0.05;\n    bs.y = 0.4 * (bs.x + bs.z) + 0.1 * Hashfv2 (qc);\n    q.y = p.y - gSize * bs.y;\n    d = gSize * PrRound4BoxDf (q \/ gSize, bs - eRound, eRound);\n    if (d < dMin) {\n      dMin = d;\n      qcMin = qc;\n    }\n  }\n  return dMin;\n}\n\n#if 1\n\nfloat ObjRay (vec3 ro, vec3 rd)  \/\/ (cell-based ray-marching)\n{\n  vec3 p, rdi;\n  vec2 fp, ipP;\n  float dHit, d, eps;\n  eps = 0.001;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  rdi.xz = 1. \/ rd.xz;\n  dHit = eps;\n  ipP = vec2 (0.5);\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + dHit * rd;\n    fp = p.xz + 0.5;\n    ip = floor (fp \/ gSize);\n    if (ip != ipP) {\n      ipP = ip;\n      CellParms ();\n    }\n    d = ObjDf (p);\n    dHit += min (d, eps + max (0., Minv2 ((gSize * (ip + step (0., rd.xz)) - fp) * rdi.xz)));\n    if (d < eps || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d >= eps || p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\n#else\n\nfloat ObjRay (vec3 ro, vec3 rd)  \/\/ (simple ray-marching - visual artifacts)\n{\n  vec3 p;\n  vec2 ipP;\n  float dHit, d;\n  dHit = 0.;\n  ipP = vec2 (0.5);\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + dHit * rd;\n    ip = floor ((p.xz + 0.5) \/ gSize);\n    if (ip != ipP) {\n      ipP = ip;\n      CellParms ();\n    }\n    d = ObjDf (p);\n    if (d < 0.001 || dHit > dstFar || p.y < 0.) break;\n    dHit += d;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\n#endif\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 ipP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  ipP = vec2 (0.5);\n  for (int j = VAR_ZERO; j < 24; j ++) {\n    p = ro + d * rd;\n    ip = floor ((p.xz + 0.5) \/ gSize);\n    if (ip != ipP) {\n      ipP = ip;\n      CellParms ();\n    }\n    h = ObjDf (p);\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += max (h, 0.01);\n    if (h < 0.001 || d > dstFar) break;\n  }\n  return 0.5 + 0.5 * sh;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  vec2 q, b;\n  float dstObj, dstGrnd, sh, nDotL, s;\n  eFac = 0.2;\n  eRound = 0.2;\n  gSize = 1.;\n  dstObj = ObjRay (ro, rd);\n  dstGrnd = dstFar;\n  if (dstObj < dstFar || rd.y < 0.) {\n    if (dstObj < dstFar) {\n      ro += dstObj * rd;\n      vn = ObjNf (ro);\n      col4 = vec4 (HsvToRgb (vec3 (Hashfv2 (qcMin), 0.7, 1.)), 0.2);\n      nDotL = max (dot (vn, ltDir), 0.);\n      nDotL *= nDotL;\n      s = 1.;\n    } else {\n      dstGrnd = - ro.y \/ rd.y;\n      ro += dstGrnd * rd;\n      vn = vec3 (0., 1., 0.);\n      vn = VaryNf (16. * ro, vn, 0.5);\n      col4 = vec4 (0.4, 0.4, 0.4, 0.);\n      ip = floor ((ro.xz + 0.5) \/ gSize);\n      CellParms ();\n      s = 1.;\n      for (int k = 0; k < 4; k ++) {\n        q = ro.xz - gSize * (ip + pMid[k]);\n        b = pEdge[k] - eFac + 0.1;\n        s = min (s, gSize * PrRound4Box2Df (q \/ gSize, b - eRound, eRound));\n      }\n      col4 *= 1. + 0.7 * (1. - smoothstep (0.01, 0.02, abs (s)));\n      s = 1.;\n      for (int k = 0; k < 4; k ++) {\n        q = ro.xz - gSize * (ip + pMid[k]);\n        b = pEdge[k] - eFac;\n        s = min (s, gSize * PrRound4Box2Df (q \/ gSize, b - eRound, eRound));\n      }\n      s = 0.5 + 0.5 * smoothstep (0., 0.02, s - 0.02);\n      nDotL = max (dot (vn, ltDir), 0.);\n    }\n    sh = (dstGrnd <= dstFar) ? min (s, ObjSShadow (ro + 0.01 * vn, ltDir)) : 1.;\n    col = col4.rgb * (0.1 + 0.1 * max (vn.y, 0.) + 0.8 * sh * nDotL) +\n       col4.a * step (0.95, sh) * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n  } else {\n    col = vec3 (0.6, 0.6, 1.);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ canvas - 0.5;\n  tCur += 1.;\n  az = 0.;\n  el = -0.15 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  } else {\n    az += 0.03 * pi * sin (0.1 * pi * tCur);\n  }\n  el = clamp (el, -0.4 * pi, -0.12 * pi);\n  ltDir = normalize (vec3 (0.7, 1.5, -1.));\n  vuMat = StdVuMat (el, az);\n  ro = vec3 (0.07 * tCur, 6., 0.2 * tCur);\n  zmFac = 4.;\n  dstFar = 120.;\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRound4BoxDf (vec3 p, vec3 b, float r)\n{\n  p = max (abs (p) - b, 0.);\n  return sqrt (length (p * p)) - r;\n}\n\nfloat PrRound4Box2Df (vec2 p, vec2 b, float r)\n{\n  p = max (abs (p) - b, 0.);\n  return sqrt (length (p * p)) - r;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2.\/3., 1.\/3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e;\n  e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n","name":"Image","description":"","type":"image"}]}}