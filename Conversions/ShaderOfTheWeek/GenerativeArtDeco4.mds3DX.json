{"Shader":{"ver":"0.1","info":{"id":"mds3DX","date":"1666918093","viewed":239,"name":"generative art deco 4","username":"morisil","description":"I just played a bit with the coefficients of my original \"generative art deco\". I changed color grading to be based on polar coordinates and put the shape in motion.","likes":25,"published":3,"flags":64,"usePreview":0,"tags":["chromaticaberration","study","depthoffield","focus"],"hasliked":0},"renderpass":[{"inputs":[{"id":29472,"src":"https:\/\/soundcloud.com\/giovanni-sollima\/linvenzione-del-nero","ctype":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ Fork of \"generative art deco 3\" by morisil. https:\/\/shadertoy.com\/view\/mdl3WX\n\/\/ 2022-10-28 00:47:55\n\n\/\/ Fork of \"generative art deco 2\" by morisil. https:\/\/shadertoy.com\/view\/ftVBDz\n\/\/ 2022-10-27 22:34:54\n\n\/\/ Fork of \"generative art deco\" by morisil. https:\/\/shadertoy.com\/view\/7sKfDd\n\/\/ 2022-09-28 11:25:15\n\n\/\/ Copyright Kazimierz Pogoda, 2022 - https:\/\/xemantic.com\/\n\/\/ I am the sole copyright owner of this Work.\n\/\/ You cannot host, display, distribute or share this Work in any form,\n\/\/ including physical and digital. You cannot use this Work in any\n\/\/ commercial or non-commercial product, website or project. You cannot\n\/\/ sell this Work and you cannot mint an NFTs of it.\n\/\/ I share this Work for educational purposes, and you can link to it,\n\/\/ through an URL, proper attribution and unmodified screenshot, as part\n\/\/ of your educational material. If these conditions are too restrictive\n\/\/ please contact me and we'll definitely work it out.\n\n\/\/ copyright statement borrowed from Inigo Quilez\n\n\/\/ Music by Giovanni Sollima, L'invenzione del nero:\n\/\/ https:\/\/soundcloud.com\/giovanni-sollima\/linvenzione-del-nero\n\n\/\/ See also The Mathematics of Perception to check the ideas behind:\n\/\/ https:\/\/www.shadertoy.com\/view\/7sVBzK\n\nconst float SHAPE_SIZE = .618;\nconst float CHROMATIC_ABBERATION = .01;\nconst float ITERATIONS = 10.;\nconst float INITIAL_LUMA = .5;\n\nconst float PI = 3.14159265359;\nconst float TWO_PI = 6.28318530718;\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat sdPolygon(in float angle, in float distance) {\n  float segment = TWO_PI \/ 4.0;\n  return cos(floor(.5 + angle \/ segment) * segment - angle) * distance;\n}\n\nfloat getColorComponent(in vec2 st, in float modScale, in float blur) {\n    vec2 modSt = mod(st, 1. \/ modScale) * modScale * 2. - 1.;\n    float dist = length(modSt);\n    float angle = atan(modSt.x, modSt.y) + sin(iTime * .08) * 9.0;\n    \/\/dist = sdPolygon(angle, dist);\n    \/\/dist += sin(angle * 3. + iTime * .21) * .2 + cos(angle * 4. - iTime * .3) * .1;\n    float shapeMap = smoothstep(SHAPE_SIZE + blur, SHAPE_SIZE - blur, sin(dist * 3.0) * .5 + .5);\n    return shapeMap;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float blur = .4 + sin(iTime * .52) * .2;\n\n    vec2 st =\n        (2.* fragCoord - iResolution.xy)\n        \/ min(iResolution.x, iResolution.y);\n    vec2 origSt = st;\n    st *= rotate2d(sin(iTime * .14) * .3);\n    st *= (sin(iTime * .15) + 2.) * .3;\n    st *= log(length(st * .428)) * 1.1;\n\n    float modScale = 1.;\n\n    vec3 color = vec3(0);\n    float luma = INITIAL_LUMA;\n    for (float i = 0.; i < ITERATIONS; i++) {\n        vec2 center = st + vec2(sin(iTime * .12), cos(iTime * .13));\n        \/\/center += pow(length(center), 1.);\n        vec3 shapeColor = vec3(\n            getColorComponent(center - st * CHROMATIC_ABBERATION, modScale, blur),\n            getColorComponent(center, modScale, blur),\n            getColorComponent(center + st * CHROMATIC_ABBERATION, modScale, blur)        \n        ) * luma;\n        st *= 1.1 + getColorComponent(center, modScale, .04) * 1.2;\n        st *= rotate2d(sin(iTime  * .05) * 1.33);\n        color += shapeColor;\n        color = clamp(color, 0., 1.);\n\/\/        if (color == vec3(1)) break;\n        luma *= .6;\n        blur *= .63;\n    }\n    const float GRADING_INTENSITY = .4;\n    vec3 topGrading = vec3(\n        1. + sin(iTime * 1.13 * .3) * GRADING_INTENSITY,\n        1. + sin(iTime * 1.23 * .3) * GRADING_INTENSITY,\n        1. - sin(iTime * 1.33 * .3) * GRADING_INTENSITY\n    );\n    vec3 bottomGrading = vec3(\n        1. - sin(iTime * 1.43 * .3) * GRADING_INTENSITY,\n        1. - sin(iTime * 1.53 * .3) * GRADING_INTENSITY,\n        1. + sin(iTime * 1.63 * .3) * GRADING_INTENSITY\n    );\n    float origDist = length(origSt);\n    vec3 colorGrading = mix(topGrading, bottomGrading, origDist - .5);\n    fragColor = vec4(pow(color.rgb, colorGrading), 1.);\n    fragColor *= smoothstep(2.1, .7, origDist);\n}","name":"Image","description":"","type":"image"}]}}