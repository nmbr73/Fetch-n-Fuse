{"Shader":{"ver":"0.1","info":{"id":"fsKfzW","date":"1657758353","viewed":169,"name":"Silky Storm","username":"leon","description":"Shader suave","likes":9,"published":3,"flags":32,"usePreview":0,"tags":["cloud","abstract","gyroid"],"hasliked":0},"renderpass":[{"inputs":[{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\n\/\/ Silky Storm\n\/\/ gyroidisticly tunneled\n\n\/\/ main code is in Buffer A\n\/\/ Buffer B is a minimal temporal anti aliasing\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord\/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":40,"src":"\/media\/a\/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","ctype":"volume","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":14854,"src":"\/media\/a\/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","ctype":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\n\/\/ fractal brownian motion\n\/\/ https:\/\/thebookofshaders.com\/13\/\nfloat fbm (vec3 p)\n{\n    float result = 0.;\n    float a = .5;\n    for (float i = 0.; i < 4.; ++i) {\n        result += sin(gyroid(p\/a)*3.14+.1*iTime\/a)*a;\n        a \/= 2.;\n    }\n    return result;\n}\n\n\/\/ signed distance function\nfloat map(vec3 p)\n{\n    \/\/ tunnel\n    float dist = max(0., -length(p.xy)+.5);\n    \n    \/\/ displace with gyroid noise\n    float t = iTime * .1;\n    vec3 s = p * 1.;\n    s.z -= t;\n    float noise = fbm(s);\n    dist -= .1*noise;\n    \n    \/\/ filaments\n    dist = min(dist, abs(noise)+max(0.,-p.z)*.003);\n    \n    return dist;\n}\n\nvoid coloring (inout vec3 color, in vec3 pos, in vec3 normal, in vec3 ray, in vec2 uv, in float shade)\n{\n    \/\/ Inigo Quilez color palette\n    \/\/ https:\/\/iquilezles.org\/www\/articles\/palettes\/palettes.htm\n    vec3 tint = .5+.5*cos(vec3(0,.3,.6)*6.283+iTime*.2+uv.y*2.);\n\n    \/\/ lighting\n    vec3 rf = reflect(ray, normal);\n    float top = dot(rf, vec3(0,1,0))*.5+.5;\n    float glow = dot(normal, ray)*.5+.5;\n    color = vec3(0.5) * pow(dot(normal, -normalize(pos))*.5+.5, 0.5);\n    color += vec3(.2)*clamp(top,0.,1.);\n    color += tint*glow;\n    color *= pow(shade,.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0);\n    \n    \/\/ coordinates\n    vec2 uv = (fragCoord-iResolution.xy\/2.)\/iResolution.y;\n    vec3 pos = vec3(0,0,1);\n    vec3 at = vec3(0);\n    pos.xz *= rot(cos(iTime*.1)*.2);\n    pos.zy *= rot(sin(iTime*.2)*.1);\n    vec3 ray = lookAt(pos, at, uv, 1.);\n    \n    \/\/ noise\n    vec3 blue = texture(iChannel0, fragCoord\/1024.).xyz;\n    vec3 white = hash33(vec3(fragCoord, iFrame));\n    \n    \/\/ start ahead\n    pos += ray * white.z * .2;\n    \n    \/\/ blur edges\n    float dof = .2*smoothstep(.5, 2., length(uv));\n    ray.xy += vec2(cos(blue.x*6.28),sin(blue.x*6.28))*blue.z*dof;\n    \n    \/\/ raymarch\n    float maxDist = 8.;\n    const float count = 50.;\n    float steps = 0.;\n    float total = 0.;\n    for (steps = count; steps > 0.; --steps) {\n        float dist = map(pos);\n        if (dist < total\/iResolution.y || total > maxDist) break;\n        dist *= 0.9+0.1*blue.z;\n        ray += white * total*.002;\n        pos += ray * dist;\n        total += dist;\n    }\n    \n    \/\/ coloring\n    float shade = steps\/count;\n    if (shade > .001 && total < maxDist) {\n        \/\/ NuSan\n        \/\/ https:\/\/www.shadertoy.com\/view\/3sBGzV\n        vec2 noff = vec2(.01,0);\n        vec3 normal = normalize(map(pos)-vec3(map(pos-noff.xyy), map(pos-noff.yxy), map(pos-noff.yyx)));\n        coloring(color, pos, normal, ray, uv, shade);\n    }\n    \n    fragColor = vec4(color, 1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define repeat(p,r) (mod(p,r)-r\/2.)\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\nvec3 lookAt (vec3 from, vec3 at, vec2 uv, float fov)\n{\n  vec3 z = normalize(at-from);\n  vec3 x = normalize(cross(z, vec3(0,1,0)));\n  vec3 y = normalize(cross(x, z));\n  return normalize(z * fov + uv.x * x + uv.y * y);\n}\nfloat gyroid (vec3 s)\n{\n    return dot(sin(s),cos(s.yzx));\n}\n\n\/\/ Dave Hoskins\n\/\/ https:\/\/www.shadertoy.com\/view\/4djSRW\nvec3 hash33(vec3 p3) {\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/ Temporal Anti Aliasing from:\n\/\/ https:\/\/www.elopezr.com\/temporal-aa-and-the-quest-for-the-holy-trail\/\n\n\/\/ but only the color clamping...\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec3 color = texture(iChannel0, uv).rgb;\n    vec3 temporal = texture(iChannel1, uv).rgb;\n    vec3 minColor = vec3(9999.), maxColor = vec3(-9999.);\n    for(int x = -1; x <= 1; ++x){\n        for(int y = -1; y <= 1; ++y){\n            vec3 c = texture(iChannel0, uv + vec2(x, y) \/ iResolution.xy).rgb;\n            minColor = min(minColor, c);\n            maxColor = max(maxColor, c);\n        }\n    }\n    temporal = clamp(temporal, minColor, maxColor);\n    fragColor.rgb = mix(color, temporal, 0.9);\n    fragColor.a = 1.0;\n}","name":"Buffer B","description":"","type":"buffer"}]}}