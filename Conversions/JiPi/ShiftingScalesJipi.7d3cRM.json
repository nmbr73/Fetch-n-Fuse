{
 "ver": "0.1",
 "info": {
  "id": "7d3cRM",
  "date": "0",
  "viewed": 0,
  "name": "shifting scales JiPi",
  "description": "Noise controlled NCA test\n",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "clip",
   "nca"
  ],
  "hasliked": 0,
  "parentid": "7styz4",
  "parentname": "shifting scales"
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "XsXGR8",
     "filepath": "/media/previz/buffer01.png",
     "type": "buffer",
     "channel": 1,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Apply zoom (can't figure out how to re-size buffers \n    // so this wastes a lot of compute updating the offscreen parts)\n    uv = uv/2.;\n\n    // Read the buffer\n    vec3 col = (texture(iChannel0, uv).xyz-vec3(0.5))*10. + vec3(0.5);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}",
   "name": "Image",
   "description": "",
   "type": "image"
  },
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "nearest",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "XsXGR8",
     "filepath": "/media/previz/buffer01.png",
     "type": "buffer",
     "channel": 1,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dXGR8",
     "channel": 0
    }
   ],
   "code": "const int nh = 16;\nfloat b1[16] = float[16](-0.1275949627161026,-0.09450257569551468,-0.07566718012094498,0.2428344190120697,-0.09019827097654343,-0.05062813311815262,-0.03427153825759888,0.013352488167583942,0.07250174880027771,-0.09471696615219116,-0.2223607748746872,0.04483039677143097,0.18174059689044952,0.11528093367815018,-0.0667099729180336,0.0236106030642986);\nfloat w1[304] = float[304](-0.14080430567264557,-0.026868026703596115,0.21015068888664246,0.14671064913272858,-0.11699232459068298,-0.11786699295043945,0.20070892572402954,0.2560640573501587,0.20556320250034332,-0.14395472407341003,0.2366764098405838,0.05551886186003685,0.03964449092745781,0.10342927277088165,-0.08135916292667389,0.04789956286549568,0.08983530849218369,-0.06019752100110054,-0.02222045697271824,-0.1584351807832718,0.036516666412353516,0.22627060115337372,-0.006398756988346577,0.05043160170316696,0.06481527537107468,0.10419649630784988,-0.09414298832416534,-0.3358660638332367,0.34370407462120056,0.41617557406425476,0.1428890824317932,0.03717514127492905,0.06943638622760773,-0.016169335693120956,-0.04023682326078415,-0.03176407888531685,-0.03018992766737938,-0.05130023881793022,0.3086848258972168,0.3177115023136139,-0.016221003606915474,0.18932989239692688,0.18927256762981415,0.1569887101650238,-0.12147001922130585,-0.049278683960437775,-0.10304568707942963,0.07707950472831726,0.10394562780857086,-0.2779878079891205,0.09752975404262543,0.1590166836977005,-0.004657905548810959,0.17958007752895355,-0.06824717670679092,-0.06842119991779327,-0.03996706008911133,0.05098485201597214,0.03025956265628338,-0.1632341593503952,-0.2810683250427246,-0.13400433957576752,0.13162942230701447,0.104570172727108,0.1501365751028061,-0.3185262978076935,-0.1166423112154007,0.1299605667591095,0.028189338743686676,-0.1463458240032196,0.018531061708927155,-0.008282226510345936,0.23955872654914856,0.06511308252811432,-0.09634167701005936,-0.02636609971523285,0.34102270007133484,-0.16751731932163239,0.3470216989517212,-0.10182174295186996,0.22196798026561737,0.08256272226572037,0.052956532686948776,-0.060923293232917786,-0.12438315898180008,0.000639529840555042,-0.06618203222751617,-0.24085642397403717,0.15398550033569336,-0.1947477012872696,0.17027224600315094,0.10721397399902344,-0.02300598844885826,0.010672475211322308,-0.03747137635946274,-0.19244442880153656,-0.1534421443939209,0.33055248856544495,0.13359026610851288,-0.15174594521522522,0.0746116116642952,0.21380852162837982,0.16521291434764862,-0.18752968311309814,-0.05387669801712036,0.15426206588745117,0.012908702716231346,0.20546625554561615,-0.022075554355978966,-0.28372570872306824,-0.2946659326553345,-0.07278662174940109,-0.08274810761213303,-0.10622761398553848,-0.32060861587524414,0.213771253824234,-0.04379267990589142,0.24838753044605255,0.20393241941928864,-0.17556995153427124,-0.14584781229496002,-0.16978538036346436,-0.2693498432636261,0.09818701446056366,-0.07841885089874268,-0.015524936839938164,-0.20069633424282074,0.008305800147354603,-0.018933942541480064,0.07203184068202972,0.12870629131793976,0.053401075303554535,0.11041537672281265,-0.0169256292283535,0.08602173626422882,-0.1149032786488533,-0.01340780220925808,0.11959466338157654,-0.004679994657635689,-0.020545586943626404,-0.11498360335826874,-0.21332599222660065,-0.1739683896303177,-0.014313604682683945,0.07053832709789276,-0.08312220871448517,0.13829146325588226,-0.11021738499403,-0.13740086555480957,0.037122942507267,-0.06782133877277374,0.058642834424972534,-0.26944705843925476,-0.31970471143722534,0.08807267993688583,0.10960442572832108,0.25279316306114197,0.061417900025844574,-0.19970622658729553,0.029310228303074837,-0.053060851991176605,0.21827828884124756,-0.08539487421512604,0.09981755912303925,-0.014016379602253437,0.016156861558556557,-0.12251466512680054,-0.1017794981598854,0.06782016903162003,0.006950834300369024,-0.0030113793909549713,-0.23558641970157623,0.21568229794502258,-0.019147882238030434,0.18582695722579956,-0.2801423668861389,0.031641583889722824,-0.044527262449264526,-0.20764674246311188,-0.09051618725061417,-0.05997084453701973,0.10215991735458374,-0.22098036110401154,-0.26914462447166443,-0.04677315801382065,-0.19059371948242188,-0.1518290638923645,-0.008095433935523033,-0.026501990854740143,-0.022799858823418617,-0.14077332615852356,-0.03812664747238159,-0.1889197826385498,0.022737829014658928,-0.3482382595539093,0.1603982001543045,-0.14505963027477264,0.028317855671048164,-0.06561470031738281,0.2469213902950287,-0.23129019141197205,0.003964403178542852,0.2004251778125763,0.09487626701593399,-0.11152387410402298,-0.08538051694631577,0.014660230837762356,0.014864637516438961,0.007159452885389328,-0.24635377526283264,0.09959244728088379,0.11900382488965988,0.11503642052412033,-0.10549198091030121,0.12244902551174164,0.036493703722953796,0.07206176966428757,0.3015463054180145,0.16289839148521423,-0.082069531083107,-0.1259652078151703,0.11022020876407623,-0.32696908712387085,-0.03532020375132561,-0.1741977334022522,0.08424000442028046,0.08591797202825546,0.07468967884778976,0.1837518960237503,-0.266082763671875,0.15360139310359955,-0.16883525252342224,0.16093234717845917,0.08374004065990448,-0.14539769291877747,-0.07053764909505844,-0.318446546792984,0.16329504549503326,0.19345572590827942,-0.07228654623031616,0.26070523262023926,-0.34841880202293396,-0.2550112009048462,-0.08552594482898712,-0.007146872580051422,0.0812193900346756,0.04666871577501297,-0.09488335996866226,0.07157552987337112,-0.10581283271312714,0.15044979751110077,0.29023751616477966,0.1963278353214264,0.0919988676905632,-0.14453719556331635,-0.0524955652654171,-0.08844055235385895,-0.016712214797735214,0.10381287336349487,0.24415938556194305,0.024218924343585968,0.025793403387069702,-0.1749105006456375,0.1544051617383957,0.1833929568529129,0.14494647085666656,-0.4505853056907654,0.06719965487718582,0.46406736969947815,-0.1733226627111435,-0.2336266040802002,0.17739206552505493,-0.11394678056240082,-0.0523369126021862,-0.1315702497959137,0.09753775596618652,0.07248570770025253,-0.08913727849721909,0.0829273909330368,-0.06094783917069435,0.1144513338804245,-0.1591494381427765,0.08176036179065704,0.10808447748422623,0.08260544389486313,-0.2009381651878357,-0.2083185762166977,0.08112384378910065,0.05698838084936142,0.19468837976455688,0.1241222620010376,-0.008474493399262428,-0.0441143736243248,0.2414262741804123,-0.04003392904996872,-0.1670873761177063,-0.011282357387244701,-0.12079014629125595,0.11966439336538315,0.10974006354808807,-0.16521187126636505,0.030639903619885445,-0.0009862212464213371,-0.02830863930284977);\nfloat w2[64] = float[64](0.05477364733815193,0.08509646356105804,-0.010731047950685024,-0.09784814715385437,-0.0999220609664917,0.08297448605298996,0.06579071283340454,-0.013713710010051727,0.008191213011741638,0.04046080261468887,0.05600346624851227,-0.03470642864704132,-0.10811358690261841,-0.07301194220781326,0.042982764542102814,0.009564274922013283,0.028923559933900833,0.05724873021245003,-0.05696067586541176,-0.00801454484462738,-0.027924543246626854,0.06163661181926727,-0.037624940276145935,-0.014055940322577953,-0.05337720364332199,0.016334151849150658,0.10578610748052597,-0.03077259659767151,-0.03537117689847946,-0.1385769248008728,0.04417937248945236,0.052174944430589676,-0.005542446859180927,0.20165960490703583,-0.05577676370739937,0.01303199864923954,-0.0012016163673251867,-0.029802773147821426,0.015513886697590351,0.01910318434238434,0.013644350692629814,-0.08286455273628235,0.013271462172269821,-0.1548565924167633,0.021827412769198418,-0.03458331152796745,0.05645303055644035,0.013120475225150585,0.026858780533075333,0.03326160088181496,0.05996105074882507,0.016673076897859573,0.08056259900331497,-0.10825452208518982,-0.0020626832265406847,0.005089879035949707,0.03821643441915512,0.07546956092119217,-0.022499529644846916,-0.045474205166101456,0.041259653866291046,-0.09594440460205078,-0.05013250187039375,-0.0049316855147480965);\n// Random Number Generator\n// From https://www.shadertoy.com/view/MsKGWz:\n// See Stack Overflow: http://stackoverflow.com/questions/5149544/can-i-generate-a-random-number-inside-a-pixel-shader/10625698#10625698\nfloat random_1( vec2 p )\n{\n    vec2 r = vec2(\n        23.14069263277926, // e^pi (Gelfond's constant)\n         2.665144142690225 // 2^sqrt(2) (Gelfondâ€“Schneider constant)\n    );\n    return fract( cos( mod( 12345678., 256. * dot(p,r) ) ) );\n}\n\n// Samples the neighbourhood (wrapping around where needed)\nvec2 coord (vec2 fragCoord, vec2 offset){\n    float x = mod(fragCoord.x + offset.x, iResolution.x);\n    float y = mod(fragCoord.y + offset.y, iResolution.y);\n    return vec2(x, y)/iResolution.xy;\n}\nvec4[9] sample_tex (vec2 fragCoord){\n    vec4 tex[9] = vec4[9](\n        (texture(iChannel0, coord(fragCoord, vec2(-1, 1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(0, 1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(1, 1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(-1, 0)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(0, 0)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(1, 0)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(-1, -1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(0, -1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(1, -1)))-0.5)*10.\n    );\n    return tex;\n}\n\n// The four kernels used\nvec4 ident(vec2 fragCoord, vec4[9] tex){\n    return tex[4]; // no offset\n}\nvec4 sobel_x(vec2 fragCoord, vec4[9] tex){\n    vec4 result = -1.*tex[0]-2.*tex[3]-1.*tex[6]+1.*tex[2]+2.*tex[5]+1.*tex[8];\n    return result;\n}\nvec4 sobel_y(vec2 fragCoord, vec4[9] tex){\n    vec4 result = -1.*tex[0]-2.*tex[1]-1.*tex[2]+1.*tex[6]+2.*tex[7]+1.*tex[8];\n    return result;\n}\nvec4 lap(vec2 fragCoord, vec4[9] tex){\n    vec4 result = 1.*tex[0]+2.*tex[1]+1.*tex[2]+2.*tex[3]-12.*tex[4]+2.*tex[5]+1.*tex[6]+2.*tex[7]+1.*tex[8]; // was an errant +2.\n    return result;\n}\n\n// Our activation function\nfloat relu(float x){\n    if (x > 0.){return x;}\n    return 0.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    \n    // Init \n    if (iFrame==0){fragColor = vec4(0.5);}\n    \n    if (uv.x< 0.55){ // ignore half the screen since we zoom anyway\n    \n        // If (noise>0.5) apply update\n        vec2 p = vec2(uv.x/2.+sin(iTime/1000.), uv.y/2.+cos(iTime/1000.));\n        float pp = random_1(p);\n        if (uv.y > 0.51){pp += 0.4;} // updates less likely for offscreen\n        if (pp < 0.5){\n            \n             // Sample BufC for kernels\n            vec4 tex[9] = sample_tex(fragCoord);\n\n            // Apply filters\n            vec4 id = ident(fragCoord, tex);\n            vec4 sx = sobel_x(fragCoord, tex);\n            vec4 sy = sobel_y(fragCoord, tex);\n            vec4 ll = lap(fragCoord, tex);\n            \n            // Sample webcam\n            vec2 cc = fragCoord*2.;\n            vec4 img = texture(iChannel1,cc/iResolution.xy);\n\n            // Create x (4 channels x 4 filters, per channel conv)\n            // + 5 rules\n            float x[19];\n            x[0] = id.x;x[1] = sx.x;x[2] = sy.x;x[3] = ll.x;\n            x[4] = id.y;x[5] = sx.y;x[6] = sy.y;x[7] = ll.y;\n            x[8] = id.z;x[9] = sx.z;x[10] = sy.z;x[11] = ll.z;\n            x[12] = id.w;x[13] = sx.w;x[14] = sy.w;x[15] = ll.w;\n            x[16]=img.r*2.-0.3;x[17]=img.g*2.-0.3;x[18]=img.b*2.-0.3;//x[19]=0.;x[20]=0.;\n \n\n            // First layer \n            float l1_out[nh];\n            for (int i = 0; i < nh; i++){\n                // Dot Product equivalent to:\n                // dot_product = x @ w1_i\n                float dot_product = 0.;\n                for (int j = 0; j < 16+3; j++){\n                    dot_product += x[j]*w1[i*(16+3)+j];\n                }\n                // Add bias then RELU\n                l1_out[i] = relu(dot_product+b1[i]);  ;\n            }\n\n            // Second layer\n            float l2_out[4];\n            for (int i = 0; i < 4; i++){\n                float dp2 = 0.;\n                for (int j = 0; j < nh; j++){\n                    dp2 += l1_out[j]*w2[i*nh+j];\n                }\n                l2_out[i] = dp2; \n            }\n\n            // Proposed update\n            vec4 y = vec4(l2_out[0], l2_out[1], l2_out[2], l2_out[3]);\n        \n            fragColor = (id + y)*0.1 + vec4(0.5);\n        }\n        else{\n            // Output as prev state\n            fragColor = texture(iChannel0, coord(fragCoord, vec2(0, 0)));\n        }\n        \n        // Init \n        if (iFrame==0){fragColor = vec4(0.5);}\n\n        // If (mouse down) paint grey around it\n        if(length(fragCoord.xy-iMouse.xy/2.)<(20.)){\n            if (iMouse.z>0.5){fragColor = vec4(0.5);}\n        }\n    \n        \n    \n    }\n    \n}\n",
   "name": "Buffer A",
   "description": "",
   "type": "buffer"
  },
  {
   "inputs": [],
   "outputs": [
    {
     "id": "XsXGR8",
     "channel": 0
    }
   ],
   "code": "float colormap_red(float x) {\n    if (x < 0.0) {\n        return 54.0 / 255.0;\n    } else if (x < 20049.0 / 82979.0) {\n        return (829.79 * x + 54.51) / 255.0;\n    } else {\n        return 1.0;\n    }\n}\n\nfloat colormap_green(float x) {\n    if (x < 20049.0 / 82979.0) {\n        return 0.0;\n    } else if (x < 327013.0 / 810990.0) {\n        return (8546482679670.0 / 10875673217.0 * x - 2064961390770.0 / 10875673217.0) / 255.0;\n    } else if (x <= 1.0) {\n        return (103806720.0 / 483977.0 * x + 19607415.0 / 483977.0) / 255.0;\n    } else {\n        return 1.0;\n    }\n}\n\nfloat colormap_blue(float x) {\n    if (x < 0.0) {\n        return 54.0 / 255.0;\n    } else if (x < 7249.0 / 82979.0) {\n        return (829.79 * x + 54.51) / 255.0;\n    } else if (x < 20049.0 / 82979.0) {\n        return 127.0 / 255.0;\n    } else if (x < 327013.0 / 810990.0) {\n        return (792.02249341361393720147485376583 * x - 64.364790735602331034989206222672) / 255.0;\n    } else {\n        return 1.0;\n    }\n}\n\nvec4 colormap(float x) {\n    return vec4(colormap_green(x), colormap_red(x), colormap_blue(x), 1.0);\n}\n\n// https://iquilezles.org/articles/warp\n/*float noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float a = textureLod(iChannel0,(p+vec2(0.5,0.5))/256.0,0.0).x;\n\tfloat b = textureLod(iChannel0,(p+vec2(1.5,0.5))/256.0,0.0).x;\n\tfloat c = textureLod(iChannel0,(p+vec2(0.5,1.5))/256.0,0.0).x;\n\tfloat d = textureLod(iChannel0,(p+vec2(1.5,1.5))/256.0,0.0).x;\n    return mix(mix( a, b,f.x), mix( c, d,f.x),f.y);\n}*/\n\n\nfloat rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n    vec2 ip = floor(p);\n    vec2 u = fract(p);\n    u = u*u*(3.0-2.0*u);\n\n    float res = mix(\n        mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n        mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n    return res*res;\n}\n\nconst mat2 mtx = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n\n    f += 0.500000*noise( p + iTime/2.  ); p = mtx*p*2.02;\n    f += 0.031250*noise( p ); p = mtx*p*2.01;\n    f += 0.250000*noise( p ); p = mtx*p*2.03;\n    f += 0.125000*noise( p ); p = mtx*p*2.01;\n    f += 0.062500*noise( p ); p = mtx*p*2.04;\n    f += 0.015625*noise( p + sin(iTime) );\n\n    return f/0.96875;\n}\n\nfloat pattern( in vec2 p )\n{\n\treturn fbm( p + fbm( p + fbm( p ) ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.x;\n\tfloat shade = pattern(uv);\n    fragColor = vec4(colormap(shade).rgb, shade);\n}",
   "name": "Buffer B",
   "description": "",
   "type": "buffer"
  }
 ]
}