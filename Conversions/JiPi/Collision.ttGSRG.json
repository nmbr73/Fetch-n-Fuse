{"Shader":{"ver":"0.1","info":{"id":"ttGSRG","date":"1582974063","viewed":815,"name":"Collision","username":"avin","description":"collision visualisation with flashes","likes":31,"published":3,"flags":32,"usePreview":0,"tags":["collision","flash"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"#define COL1 vec3(24, 32, 38) \/ 255.0\n#define COL2 vec3(235, 241, 245) \/ 255.0\n\n#define SF 2.\/min(iResolution.x, iResolution.y)\n#define SS(l, s) smoothstep(SF, -SF, l - s)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) \/ iResolution.y;\n    \n    float m = 0.;    \n    for (float i = 0.; i < float(SIZE); i += 1.) {\n        vec4 point = FD(i, 0);\n        vec4 colData = FD(i, 1);\n        \n        float colTimeDiff = clamp(iTime - colData.x, 0., .5)*5.;        \n        \n        vec2 pos = point.xy;        \n        \n        float d = length(uv - pos)*.5;        \n        float g = .1\/(d*(10. + 20.*colTimeDiff))*FLASH_POWER;        \n\n        m += g;        \n    }\n    \n    vec3 col = mix(COL1, COL2, m);\n    \n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    int x = int(fragCoord.x);\n    int y = int(fragCoord.y);\n    \n    if(y > 2 || x > SIZE){\n    \tdiscard;\n    }     \n    \n    vec2 rt = vec2(iResolution.x \/ iResolution.y, 1.);\n    \n    if(iFrame == 1){\n        float ms = sqrt(float(SIZE));\n        float yp = floor(float(x) \/ ms) - ms*.45;\n        float xp = mod(float(x), ms) - ms*.45;\n        vec2 pos = (vec2(xp,yp)) * (1.\/ms)*.9;\n                \n        pos *= rt;                       \n                \n        vec2 dir = normalize(vec2(hash12(fragCoord*200.)*2.-1., hash12(fragCoord * 100.)*2.-1.));   \n        \n        if(y==0){\n            fragColor = vec4(pos, dir);                   \n        }\n        if(y==1){\n            fragColor = vec4(-100., 0,0,0);                   \n        }\n        \n    } else {\n        vec4 iPoint = FD(x,0);\n        vec2 pos = iPoint.xy;        \n        vec2 dir = iPoint.zw;\n                \n        \n        bool col = false;\n                                                       \n        \n        if(iPoint.x <= (-.5*rt.x + RADIUS)){\n            dir.x *= -1.;      \n            col = true;\n        }\n        if(iPoint.x >= (.5*rt.x - RADIUS)){\n            dir.x *= -1.; \n            col = true;\n        }\n        if(iPoint.y <= (-.5*rt.y + RADIUS)){\n            dir.y *= -1.;            \n            col = true;\n        }\n        if(iPoint.y >= (.5*rt.y - RADIUS)){\n            dir.y *= -1.;            \n            col = true;\n        }\n        \n        for(int i=0; i<SIZE; i+=1){\n            if(i!=x){\n                vec4 nPoint = FD(i,0);\n                vec2 nPointDir = nPoint.zw;\n                if(distance(nPoint.xy, pos) < (RADIUS*2.)){\n                    vec2 inV = normalize(nPoint.xy - pos);\n                    if(dot(dir, inV) > 0.){                    \t \n                        dir = reflect(dir, inV);                        \n                    }\n                    \n                    col = true;                    \n                }\n            }        \t\n        }\n        \n        dir = normalize(dir);\n        \n        pos += dir * SPEED;\n        \n        pos.x = min(max(pos.x, -.5*rt.x + RADIUS), .5*rt.x - RADIUS);\n        pos.y = min(max(pos.y, -.5*rt.y + RADIUS), .5*rt.y - RADIUS);\n        \n    \n        if(y==0){\n            fragColor = vec4(pos, dir);\n        }\n        if(y==1){\n            if(col){\n                fragColor = vec4(iTime, 0, 0, 0);\n            } else {\n                fragColor = FD(x,1);\n            }\n            \n        }\n        \n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define SIZE 122\n#define FLASH_POWER .38\n#define RADIUS .01\n#define SPEED .0018\n\n#define FD(x,y) texelFetch(iChannel0, ivec2(x, y), 0)\n\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}","name":"Common","description":"","type":"common"}]}}