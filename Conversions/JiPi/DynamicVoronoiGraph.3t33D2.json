{"Shader":{"ver":"0.1","info":{"id":"3t33D2","date":"1577554639","viewed":624,"name":"Dynamic Voronoi Graph","username":"michael0884","description":"Drawing lines between directly neighboring Voronoi cells, within a radius.","likes":24,"published":3,"flags":32,"usePreview":0,"tags":["fast","particles","triangulation"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 pos )\n{\n\tvec4 particle = texel(ch0, pos);\n    float distr = 4.*gauss(pos - particle.xy, 0.7);\n    vec4 b = texel(ch1, pos);\n    vec3 c1 = jet_range(length(texel(ch0, b.xy).zw), 0.,0.9);\n    vec3 c2 = jet_range(length(texel(ch0, b.zw).zw), 0.,0.9);\n    float line = exp(-pow(sdLine(pos, b.xy, b.zw)\/0.5,2.));\n \tfloat linel = length(b.xy - b.zw);\n    float pl1 = length(pos - b.zw);\n    vec3 color = mix(c2,c1,pl1\/(linel+0.01)); \n    fragColor = vec4(1.3*color*line + distr, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/voronoi particle tracking \n\n\/\/loop the vector\nvec2 loop_d(vec2 pos)\n{\n\treturn mod(pos + size*0.5, size) - size*0.5;\n}\n\n\/\/loop the space\nvec2 loop(vec2 pos)\n{\n\treturn mod(pos, size);\n}\n\n\nvoid Check(inout vec4 U, vec2 pos, vec2 dx)\n{\n    vec4 Unb = texel(ch0, loop(pos+dx));\n    \/\/check if the stored neighbouring particle is closer to this position \n    if(length(loop_d(Unb.xy - pos)) < length(loop_d(U.xy - pos)))\n    {\n        U = Unb; \/\/copy the particle info\n    }\n}\n\nvoid CheckRadius(inout vec4 U, vec2 pos, float r)\n{\n    Check(U, pos, vec2(-r,0));\n    Check(U, pos, vec2(r,0));\n    Check(U, pos, vec2(0,-r));\n    Check(U, pos, vec2(0,r));\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    \/\/this pixel value\n    U = texel(ch0, pos);\n    \n    \/\/check neighbours \n    CheckRadius(U, pos, 1.);\n    CheckRadius(U, pos, 2.);\n    CheckRadius(U, pos, 3.);\n    CheckRadius(U, pos, 4.);\n   \n    U.xy = loop(U.xy);\n    \n    vec2 particle_pos = U.xy;\n    \n    if(iMouse.z > 0.) \n    {\n        vec2 dm = (iMouse.xy - U.xy);\n        U.zw += dt*normalize(dm)*pow(length(dm)+10., -1.);\n        U.zw *= 0.998;\n    }\n    \n    \/\/update the particle\n    U.xy += dt*U.zw;\n    \n    U.xy = loop(U.xy);\n    \n    \n    if(iFrame < 1)\n    {\n        particle_pos = vec2(10.*floor(pos.x\/10.),10.*floor(pos.y\/10.));\n        U = vec4(particle_pos, hash22(particle_pos) - 0.5);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\/\/simulation variables\n#define dt 0.7\n#define radius 17.\n\n\/\/definitions\n#define size iResolution.xy\n#define texel(a, p)  texelFetch(a, ivec2(p), 0)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n#define PI 3.14159265\n\n\/\/hash functions\n\/\/https:\/\/www.shadertoy.com\/view\/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n\n\/\/functions\nfloat gauss(vec2 x, float r)\n{\n    return exp(-pow(length(x)\/r,2.));\n}\n   \nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)\/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\/\/a rainbow colormap from Matlab\nfloat interpolate(float val, float y0, float x0, float y1, float x1) \n{\n    return (val-x0)*(y1-y0)\/(x1-x0) + y0;\n}\n\nfloat base(float val) \n{\n    if ( val <= -0.75 ) return 0.0;\n    else if ( val <= -0.25 ) return interpolate( val, 0.0, -0.75, 1.0, -0.25 );\n    else if ( val <= 0.25 ) return 1.0;\n    else if ( val <= 0.75 ) return interpolate( val, 1.0, 0.25, 0.0, 0.75 );\n    else return 0.0;\n}\n\nvec3 jet_colormap(float v)\n{\n    return vec3(base(v - 0.5),base(v),base(v + 0.5));\n}\n\nvec3 jet_range(float v, float a, float b)\n{\n    return jet_colormap(2.*clamp((v-a)\/(b-a),0.,1.) - 1.);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/voronoi line tracking \n\n\/\/loop the vector\nvec2 loop_d(vec2 pos)\n{\n\treturn mod(pos + size*0.5, size) - size*0.5;\n}\n\n\/\/loop the space\nvec2 loop(vec2 pos)\n{\n\treturn mod(pos, size);\n}\n\nvec4 loop(vec4 line)\n{\n\treturn vec4(mod(line.xy, size),mod(line.zw, size));\n}\n\nfloat is_border(vec2 pos)\n{\n    vec4 cp = texel(ch1, pos);\n    vec4 p0 = texel(ch1, loop(pos+vec2(-1,0.)));\n    vec4 p1 = texel(ch1, loop(pos+vec2(1,0.)));\n    vec4 p2 = texel(ch1, loop(pos+vec2(0.,-1.)));\n    vec4 p3 = texel(ch1, loop(pos+vec2(0.,1.)));\n    if(cp!=p0 || cp!=p1 || cp!=p2 || cp!=p3)\n    {\n        return 1.;\n    }\n    return 0.;\n}\n\nvec4 use_best(vec2 pos, vec4 U1, vec4 U2)\n{\n    float d1 = sdLine(pos, U1.xy, U1.zw);\n    float d2 = sdLine(pos, U2.xy, U2.zw);\n    \/\/check if the stored neighbouring line is closer to this position \n    if(d2 < d1)\n    {\n       return U2; \/\/copy the line info\n    }\n    else\n    {\n       return U1;\n    }\n}\n\n\nfloat d(vec2 a, vec2 b)\n{\n    return length(a-b);\n}\n\n\n\nfloat is_direct_neighbour(vec2 p1, vec2 p2)\n{\n   \/* vec2 cpoint = (p1+p2)\/2.;\n    vec2 cvect = 2.*normalize(p2 - p1);\n    \/\/is the center point a boundary between at least 1 of them\n    vec4 pp1 = texel(ch1, cpoint + cvect);\n    vec4 pp2 = texel(ch1, cpoint - cvect);*\/\n    if( d(p1,p2) < radius)\n    {\n        return 1.;\n    }\n    \n    return 0.;\n}  \n\n\/\/the boudary line intersection is the source of the line info\nvoid on_center(inout vec4 U, vec2 pos)\n{\n    vec4 p0 = texel(ch1, loop(pos+vec2(-1,0.)));\n    vec4 p1 = texel(ch1, loop(pos+vec2(1,0.)));\n    vec4 p2 = texel(ch1, loop(pos+vec2(0.,-1.)));\n    vec4 p3 = texel(ch1, loop(pos+vec2(0.,1.)));\n    if(p0 != p1 && is_direct_neighbour(p0.xy,p1.xy) > 0.)\n    {\n       U = use_best(pos, vec4(p0.xy, p1.xy), U);\n    }\n    if(p2 != p3 && is_direct_neighbour(p2.xy,p3.xy) > 0.)\n    {\n       U = use_best(pos, vec4(p2.xy, p3.xy), U);\n    } \n}\n\n\nvoid Check(inout vec4 U, vec2 pos, vec2 dx)\n{\n    vec4 Unb = loop(texel(ch0, loop(pos+dx)));\n    float d1 = sdLine(pos, U.xy, U.zw);\n    float d2 = sdLine(pos, Unb.xy, Unb.zw);\n    \/\/check if the stored neighbouring line is closer to this position \n    if(d2 < d1)\n    {\n        U = Unb; \/\/copy the line info\n    }\n}\n\nvoid CheckRadius(inout vec4 U, vec2 pos, float r)\n{\n    Check(U, pos, vec2(-r,0));\n    Check(U, pos, vec2(r,0));\n    Check(U, pos, vec2(0,-r));\n    Check(U, pos, vec2(0,r));\n}\n\nvoid mainImage( out vec4 U, in vec2 pos )\n{\n    \/\/this pixel value\n    U = texel(ch0, pos);\n    \n    \/\/check neighbours \n    CheckRadius(U, pos, 1.);\n    CheckRadius(U, pos, 2.);\n    CheckRadius(U, pos, 3.);\n    CheckRadius(U, pos, 4.);\n    CheckRadius(U, pos, 5.);\n    CheckRadius(U, pos, 6.);\n    CheckRadius(U, pos, 7.);\n    CheckRadius(U, pos, 8.);\n    CheckRadius(U, pos, 9.);\n    CheckRadius(U, pos, 10.);\n    \n    \/\/update the line from the particles\n    U.xy = loop(texel(ch1, loop(U.xy)).xy);\n    U.zw = loop(texel(ch1, loop(U.zw)).xy);\n    \n    \/\/sort \n    if(length(U.xy) > length(U.zw)) U = U.zwxy;\n    \n    if(is_direct_neighbour(U.xy, U.zw) < 1.)\n    {\n        U = vec4(0.);\n    }\n    \n    on_center(U, pos);\n}","name":"Buffer B","description":"","type":"buffer"}]}}