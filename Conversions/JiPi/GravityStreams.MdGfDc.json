{"Shader":{"ver":"0.1","info":{"id":"MdGfDc","date":"1531657434","viewed":1551,"name":"Gravity Streams","username":"Lorenzo_Vannuccini","description":"Let's make art from gravity!\n\nBuffA stores and updates particles positions & inertia.\nBuffB & BuffC exploit accumulation to track particles trails, generating scene albedo & normals.\nImage Shader computes lighting, glow & vignetting (final compositing).","likes":56,"published":3,"flags":32,"usePreview":0,"tags":["particles","physics","gravity","multipass","streams"],"hasliked":0},"renderpass":[{"inputs":[{"id":35,"src":"\/media\/a\/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","ctype":"music","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ Final Compositing (Deferred Lighting + Bloom)\n\nvec2 getParticlePosition(in int particleID)\n{\n    int iChannel0_width = int(iChannelResolution[0].x);\n\tivec2 particleCoord = ivec2(particleID % iChannel0_width, particleID \/ iChannel0_width);\n    \n    return texelFetch(iChannel0, particleCoord, 0).xy;\n}\n\nvec3 computeLighting( in vec3 surfaceAlbedo,\n                      in vec3 surfaceNormal,\n                      in float surfaceGloss,\n                      in vec3 lightCol,\n                      in vec3 lightDir,\n                      in float lightSpec,\n                      in float lightAmb )\n{\n    float dot_n  = clamp(dot(surfaceNormal, lightDir), 0.0, 1.0);\n    \n    vec3 diffuse  = lightCol * surfaceAlbedo * clamp(dot_n, lightAmb, 1.0);\n    vec3 specular = lightCol * float(dot_n > 0.0) * pow(clamp(dot(reflect(-lightDir, surfaceNormal), vec3(0.0, 0.0, 1.0)), 0.0, 1.0), surfaceGloss);\n    \n    return diffuse + specular * lightSpec;\n}\n\nvec3 computeSpotLight( in vec3 surfaceAlbedo,\n                       in vec3 surfaceNormal,\n                       in float surfaceGloss,\n                       in vec3 surfacePos,  \n                       in vec3 lightCol,\n                       in vec3 lightPos,\n                       in float lightRadius )\n{\n    vec3 lightVec = lightPos - surfacePos;\n    float contribution = 1.0 \/ max(dot(lightVec, lightVec) * 0.08 \/ (lightRadius * lightRadius), 1.0);\n    \n    return computeLighting(surfaceAlbedo, surfaceNormal, surfaceGloss, lightCol, normalize(lightVec), 0.066667 * surfaceGloss, 0.0) * contribution;\n}\n\nvec3 computeLightGlow(in vec3 position, in vec3 lightCol, in vec3 lightPos, in float lightRadius)\n{\n    vec3 glare = spotlightsGlare * lightCol * smoothstep(lightRadius * 10.0, 0.0, length((lightPos.xy - position.xy) * vec2(1.0, 16.0)));\n    vec3 innerGlow = vec3(0.8) * smoothstep(lightRadius, lightRadius * 0.5, distance(lightPos.xy, position.xy));\n    vec3 outerGlow = 0.25 * lightCol * smoothstep(lightRadius * 2.5, 0.0, distance(lightPos.xy, position.xy));\n  \n    return innerGlow + outerGlow + glare;\n}\n\nvec3 computeVignetting(in vec2 fragCoord, in vec3 src) \/\/ https:\/\/www.shadertoy.com\/view\/4lSXDm\n{\n\tvec2 coord = ((fragCoord.xy \/ iResolution.xy) - 0.5) * (iResolution.x \/ iResolution.y) * 2.0;\n    float rf = sqrt(dot(coord, coord)) * 0.25;\n    float rf2_1 = rf * rf + 1.0;\n    \n\treturn src * pow((1.0 \/ (rf2_1 * rf2_1)), 2.24);\n}    \n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec4 albedo = texelFetch(iChannel1, ivec2(fragCoord), 0);\n\tvec3 normal = normalize(texelFetch(iChannel2, ivec2(fragCoord), 0).xyz);\n    vec3 position = vec3(fragCoord, -(1.0 - albedo.a) * 384.0 \/ particlesSize); \/\/ fake Z-depth from fade level\n        \n    fragColor = vec4(vec3(0.0), albedo.a); \n    fragColor.rgb += computeLighting(albedo.rgb, normal, streamsGlossExp, ambientLightCol, ambientLightDir, 0.5, 0.175);\n    \n    for(int i = 0; i < nParticles; ++i)\n    {\n        vec3 particlePos = vec3(getParticlePosition(i), 0.0);\n        vec3 particleCol = texelFetch(iChannel1, ivec2(particlePos.xy), 0).rgb;\n            \n        fragColor.rgb += computeSpotLight(albedo.rgb, normal, streamsGlossExp, position, particleCol, particlePos, particlesSize);\n    }\n    \n    fragColor.rgb = 1.25 * fragColor.rgb - vec3(0.075);\n    fragColor.rgb = mix(backgroundColor, fragColor.rgb, min(fragColor.a * 1.125, 1.0));\n    fragColor.rgb = computeVignetting(fragCoord, fragColor.rgb);\n    \n    for(int i = 0; i < nParticles; ++i)\n    {\n        vec3 particlePos = vec3(getParticlePosition(i), 0.0);\n        vec3 particleCol = texelFetch(iChannel1, ivec2(particlePos.xy), 0).rgb;\n        \n        fragColor.rgb += computeLightGlow(position, particleCol, particlePos, particlesSize);\n    }\n    \n    fragColor = vec4(pow(fragColor.rgb, vec3(1.0 \/ 2.24)), 1.0); \/\/ gamma correction\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ Compute Physics (Verlet Integration)\n\nfloat rand(in vec2 co) {\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 randVec2(in vec2 co) {\n\treturn vec2(rand(co.xy + generationSeed * 0.0001), rand(-co.yx + generationSeed * 0.0001));\n}\n\nvec2 randNrm2(in vec2 fragCoord)\n{\n\tvec2 n = vec2(-1.0) + randVec2(fragCoord) * 2.0;\n    \n    float l = length(n);   \n    if(l <= 0.0000001) n = vec2(0.0, (l = 1.0));\n    \n    return (n \/ l);\n}\n\nvoid initParticle(in vec2 fragCoord, inout vec2 particlePrevPosition, inout vec2 particleCurrPosition)\n{\n\tparticleCurrPosition = randVec2(fragCoord) * iResolution.xy;\n    particlePrevPosition = particleCurrPosition - randNrm2(fragCoord) * particlesSize * 0.0625;\n}\n\nvec2 getParticlePosition(in int particleID)\n{\n    int iChannel0_width = int(iChannelResolution[0].x);\n\tivec2 particleCoord = ivec2(particleID % iChannel0_width, particleID \/ iChannel0_width);\n    \n    return texelFetch(iChannel0, particleCoord, 0).xy;\n}\n\nvec2 computeGravitation(in int particleID, in vec2 particlePosition)\n{\n    vec2 acceleration = vec2(0.0);\n        \n\tfor(int i = 0; i < nParticles; ++i) if(i != particleID)\n    {\n        vec2 v = (getParticlePosition(i) - particlePosition);\n        float d = length(v);\n        \n        if(d > 0.0000001) acceleration += (v \/ d) \/ pow(max(d, particlesSize * 2.0) * gravityStrength, 2.0);\n    }\n    \n    return acceleration;\n}\n\nvoid solveCollisions(inout vec2 particlePrevPosition, inout vec2 particleCurrPosition)\n{\n    vec2 particleInertia = (particleCurrPosition - particlePrevPosition);\n    \n\tif(particleCurrPosition.x < particlesSize || particleCurrPosition.x > iResolution.x - particlesSize)\n    {\n    \tparticleCurrPosition.x = clamp(particleCurrPosition.x, particlesSize, iResolution.x - particlesSize);\n        particlePrevPosition.x = particleCurrPosition.x + particleInertia.x * collisionDamping;\n    }\n    \n    if(particleCurrPosition.y < particlesSize || particleCurrPosition.y > iResolution.y - particlesSize)\n    {\n    \tparticleCurrPosition.y = clamp(particleCurrPosition.y, particlesSize, iResolution.y - particlesSize);\n        particlePrevPosition.y = particleCurrPosition.y + particleInertia.y * collisionDamping;\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    int particleID = int(floor(fragCoord.x) + iResolution.x * floor(fragCoord.y));\n    if(particleID >= nParticles) return;\n    \n    vec4 particleData = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec2 particlePrevPosition = particleData.zw;\n    vec2 particleCurrPosition = particleData.xy;\n     \n    if(iFrame == 0) initParticle(fragCoord, particlePrevPosition, particleCurrPosition);\n   \n    vec2 particleAcceleration = computeGravitation(particleID, particleCurrPosition);\n    vec2 particleInertia = particleCurrPosition - particlePrevPosition;\n    vec2 particleVelocity = particleInertia + particleAcceleration;\n    \n    particlePrevPosition = particleCurrPosition;\n    particleCurrPosition += particleVelocity;\n    \n    solveCollisions(particlePrevPosition, particleCurrPosition);\n    \n    fragColor = vec4(particleCurrPosition, particlePrevPosition);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":16,"src":"\/media\/a\/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","ctype":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/ Compute Scene Albedo\n\nvec2 getParticlePosition(in int particleID)\n{\n    int iChannel0_width = int(iChannelResolution[0].x);\n\tivec2 particleCoord = ivec2(particleID % iChannel0_width, particleID \/ iChannel0_width);\n    \n    return texelFetch(iChannel0, particleCoord, 0).xy;\n}\n\nvec3 getParticleColor(in vec2 p) {\n    return normalize(vec3(0.1) + texture(iChannel2, p * 0.0001 + iTime * 0.005).rgb);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{ \n    fragColor = texelFetch(iChannel1, ivec2(fragCoord) + cameraVelocity, 0);\n    fragColor.a *= (1.0 - streamsFadingExp);\n        \n\tfor(int i = 0; i < nParticles; ++i)\n    {\n        vec2 particlePos = getParticlePosition(i);\n        vec3 particleCol = getParticleColor(particlePos);\n        \n        float alpha = smoothstep(particlesSize, particlesSize * 0.5, distance(fragCoord, particlePos));\n        fragColor = mix(fragColor, vec4(particleCol , 1.0), alpha);\n    }\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":259,"channel":0}],"code":"\/\/ Compute Scene Normals\n\nvec2 getParticlePosition(in int particleID)\n{\n    int iChannel0_width = int(iChannelResolution[0].x);\n\tivec2 particleCoord = ivec2(particleID % iChannel0_width, particleID \/ iChannel0_width);\n    \n    return texelFetch(iChannel0, particleCoord, 0).xy;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{ \n    fragColor = texelFetch(iChannel1, ivec2(fragCoord) + cameraVelocity, 0);\n    \n\tfor(int i = 0; i < nParticles; ++i)\n    {\n        vec2 v = fragCoord - getParticlePosition(i);\n        \n        float l = length(v);\n        float alpha = smoothstep(particlesSize, particlesSize * 0.5, l);\n        \n        float z = sqrt(abs(particlesSize * particlesSize - l * l));\n        vec3 n = normalize(vec3(v, z));\n\n        fragColor = mix(fragColor, vec4(n, 1.0), alpha);\n    }\n}\n","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n\/\/ #define USE_CINEMATIC_MODE      \/\/ Uncomment this line for a more cinematic view (camera will side-scroll)\n\/\/ #define USE_BUMPY_STREAMS_MODE  \/\/ Uncomment this line to make streams bumpy (sausages-like)\n\/\/ #define USE_GENERATION_SEED 123 \/\/ Uncomment this line to use a fixed generation seed (then reset the simulation to apply the changes)\n    \nconst int nParticles = 20;\nconst float particlesSize = 8.0;\nconst float collisionDamping = 0.5;\nconst float streamsFadingExp = 0.001;\nconst float gravityStrength = 1.6 \/ particlesSize;\n\nconst vec3 ambientLightDir = normalize(vec3(1.0, 2.0, 0.0));\nconst vec3 ambientLightCol = vec3(1.1, 1.0, 0.9);\nconst vec3 backgroundColor = vec3(0.65);\nconst float streamsGlossExp = 120.0;\nconst float spotlightsGlare = 0.0;\n\n#ifdef USE_BUMPY_STREAMS_MODE\n#define particlesSize mix(particlesSize, particlesSize * 0.5, (1.0 + sin(1.85 + iTime * 11.93805208)) * 0.5)\n#endif\n\n#ifdef USE_GENERATION_SEED\n#define generationSeed float(USE_GENERATION_SEED) \/\/ a fixed seed will generate the same output (in respect of the viewport size)\n#else\n#define generationSeed iDate.w \/\/ if no custom seed is provided, POSIX time is used instead (producing different results every time)\n#endif\n\nconst ivec2 cameraVelocity =\n#ifdef USE_CINEMATIC_MODE\nivec2(1, 0);\n#else\nivec2(0);\n#endif\n\n\/\/ Buf A: particles positions and inertia\n\/\/ Buf B: scene albedo  (accumulated)\n\/\/ Buf C: scene normals (accumulated)\n\/\/ Image: final compositing\n","name":"Common","description":"","type":"common"}]}}