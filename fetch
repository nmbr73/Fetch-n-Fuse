#!/usr/bin/env python3

import os
import io
import re
import requests
import json
import yaml
import argparse
from dotenv import load_dotenv





# ---------------------------------------------------------------------------------------------------------------------

def patchForDCTL(code,fuse_name,buffer_name):
  """
  Do some text replacememt to make some WebGL to DCTL conversions.
  """

  code = code.replace("\t", "  ")

  code=re.sub(r'([^\w])(fragCoord)\.xy([^\w])',r'\1\2\3', code)
  code=re.sub(r'(\w+)\.([xyzw]{2,4})',r'swi\2(\1)', code)
  code=re.sub(r'(^\w+)texture(\s*)\(',r'\g<1>_tex2DVecN\2(',code)

  for s in [
      # prefix, suffix, fuctions
      [ '' ,   '_f', 'mod'], # '_f' dahinter, um auf eigene Implementierung umzubiegen
      [ '_',   'f' , 'pow|log2|log10|log|copysign|saturate|sqrt|trunc|hypot|cos|sin|cospi|sinpi|tan|acos|asinh|atanh|cosh|sinh|tanh|cbrt|lgamma|tgamma|rsqrt|exp|exp2'],
      [ '_',   '2f', 'atan'],
      [ '_f',  'f' , 'max|min|dim'],
      [ '_' ,  ''  , 'ceil|floor|round|mix'],
      [ '_f',  ''  , 'maf|divide|recip|abs|remainder']
    ]:
    code=re.sub(r'([^\w])('+s[2]+r')(\s*)\(',r'\g<1>'+s[0]+r'\g<2>'+s[1]+r'\3(', code)


  code=re.sub(r'([ \(,\+\-\*=/<>]+)(\.[0-9]+f{0,1})([ \),\+\-\*=;/<>]+)',r'\g<1>0\2\3', code)
  code=re.sub(r'([ \(,\+\-\*=/<>]+)(\.[0-9]+f{0,1})([ \),\+\-\*=;/<>]+)',r'\g<1>0\2\3', code)
  code=re.sub(r'([ \(,\+\-\*=/<>]+)([0-9]+\.)([ \),\+\-\*=;/<>]+)',r'\1\g<2>0\3', code)
  code=re.sub(r'([ \(,\+\-\*=/<>]+)([0-9]+\.)([ \),\+\-\*=;/<>]+)',r'\1\g<2>0\3', code)
  code=re.sub(r'([ \(,\+\-\*=/<>]+)([0-9]+\.[0-9]+)([ \),\+\-\*=;/<>]+)',r'\1\2f\3', code)
  code=re.sub(r'([ \(,\+\-\*=/<>]+)([0-9]+\.[0-9]+)([ \),\+\-\*=;/<>]+)',r'\1\2f\3', code)

  # vecN ... =  -> floatN ... =
  code=re.sub(r'\n(\s*)vec([234])(\s+[_A-Za-z][_A-Za-z0-9]*\s*=)',r'\n\1float\2\3', code)
  code=re.sub(r'\n(\s*)const(\s+)vec([234])(\s+[_A-Za-z][_A-Za-z0-9]*\s*=)',r'\n\1const\2float\3\4', code)

  # vecN(float) -> to_floatN_s(float)
  code=re.sub(r'vec([234])(\s*\(\s*[0-9]+\.[0-9]+f\s*\))',r'to_float\1_s\2', code)

  # versuche floatN_aw zu erwischen - geht aber natuerlich nur sehr bedingt
  code=re.sub(r'vec([34])(\s*\([^,]+,[^,\)]+\))',r'to_float\1_aw\2', code)

  code=re.sub(r'vec([234])(\s*\()',r'to_float\1\2', code)

  # am Schluss alle verbleibenden 'vecN' weghauen:
  code=re.sub(r'([\s\(\)\*\+\-;,=])vec([234])(\s)',r'\1float\2\3', code)

  kernel_name=fuse_name+'Fuse'

  if buffer_name!="Image":
    kernel_name=fuse_name+'Fuse_'+buffer_name

  kernel_name=kernel_name.replace(" ", "")

  kernel_parameters=""

  for e in [
      ['iTime','float iTime'],
      ['iResolution','float2 iResolution'],
      ['iMouse','float4 iMouse'],
      ['iTimeDelta' , 'float iTimeDelta'],
      ['iFrame' , 'int iFrame'],
      ['iChannelTime' , 'float iChannelTime[]'],
      ['iChannelResolution' , 'float3 iChannelResolution[]'],
      ['iDate' , 'float4 iDate'],
      ['iSampleRate' , 'float iSampleRate'],
      ['iChannel0', 'sampler2D iChannel0'],
      ['iChannel1', 'sampler2D iChannel1'],
      ['iChannel2', 'sampler2D iChannel2'],
      ['iChannel3', 'sampler2D iChannel3'],
    ]:
    if code.find(e[0])!=-1: # okay, ein find() ist hier arg grob - aber fuer's erste soll's reichen
      kernel_parameters=kernel_parameters+", "+e[1]


  # Kernelaufruf
  #   Ich erwische dabei nur die mit fragColor und fragCoord? Gibt's bei Shadertoy auch Aufrufe ohne diese beiden,
  #   gar oder mit mehr Parametern?!?
  #
  match_kernel=r'void\s+mainImage\s*\(\s*out\s+float4\s+([A-Za-z_]\w*)\s*,\s*in\s+float2\s+([A-Za-z_]\w*)\s*\)\s*{'

  m = re.search(match_kernel,code)

  if m:
    fragColor=m.group(1)

    code = re.sub(match_kernel,
      '__KERNEL__ void '+kernel_name+'(float4 \\1, float2 \\2'+kernel_parameters+')\n{\n'
      , code)

    # Versuche jetzt am Ende noch etwas reinzuschmieren:

    p=code.rfind("}")

    if p!=-1:
      code=code[0:p] + "\n\n  SetFragmentShaderComputedColor("+ fragColor +");\n" +code[p]
  else:
    print("no kernel")


  # Mal versuchen Funktionen zu finden:

  code=re.sub(r'(\n\s*)(mat[2-4]|float[1-4]{0,1}|int|void)(\s+[A-Za-z_]\w*\s*\([^\)]*\)\s*{)',r'\g<1>__DEVICE__ \g<2>\g<3>',code)


  return code





# ---------------------------------------------------------------------------------------------------------------------

def copyTextFile(src,dst):
  """
  Copy file src to dst.

  There seems to be no such function in `os`or in `io`, but I don't
  want to include another big package just for that simple functionality.
  """
  txt=""
  with open(src, "r") as f:
    txt=f.read()
  with open(dst, "w") as f:
    f.write(txt)





# ---------------------------------------------------------------------------------------------------------------------

def getCacheFilename(path,id):

  files=[entry for entry in os.scandir(path) if entry.is_file() and entry.name.endswith(f".{id}.json")]

  if len(files) > 1:
    raise Exception(f"multiple files matching '{path}*.{id}.{suffix}'")

  if len(files) < 1:

    fname=f"shader_{id}.json"

    if os.path.isfile(path + fname):
      return fname

    downloads=os.getenv('DOWNLOADS')

    if downloads!=None and downloads!="":
      if os.path.isfile(downloads + fname):
        print(f"copy '{fname}' from downloads")
        copyTextFile(downloads + fname , path + fname)
      else:
        print(f"found no '{downloads}{fname}' that could be used")
    else:
      print(f"no DOWNLOADS folder configured in environment")

    if os.path.isfile(path + fname):
      return fname

    return None

  return files[0].name





# ---------------------------------------------------------------------------------------------------------------------

def convertToFusename(shader_name):
  """
  Derive an identifier from shader_name.

  Remove whitespace, leading digits, special characters, etc to make something that can be used as an identifier out of `shader_name`.
  """
  return''.join(x for x in re.sub(r'[^A-Za-z0-9 ]+',' ', shader_name).title() if not x.isspace())





# ---------------------------------------------------------------------------------------------------------------------

def doFetch(id,force=False,nocache=False,noassets=False,nopatch=False):

  path = './Conversions/'
  url = "https://www.shadertoy.com/view/"+id

  json_text = None
  cache_filename = None



  if not nocache:

    cache_filename = getCacheFilename(path,id)

    if cache_filename:
      print("read from cache ..."+cache_filename)

      with open(path+cache_filename, "r") as f:
        json_text=f.read()

  if json_text == None:

    print("fetch from shadertoy.com")
    response = requests.get("https://www.shadertoy.com/api/v1/shaders/" +id+"?key="+os.getenv('APIKEY'))

    if response.status_code != 200:
      raise Exception(url+"\nHTTP Error "+str(response.status_code))

    json_text = response.text





  json_data = json.loads(json_text)

  error = json_data.get('Error',None)

  if error != None:
    raise Exception(url+"\n"+error)

  if 'Shader' in json_data:
     json_data = json_data['Shader']

  info = json_data['info']

  shader_name=info['name']

  m=re.match(r'^Fork (.+) ([^ ]+) \d+$',shader_name)

  if m != None:
    shader_name=m.group(1)

  if 'username' in info:
    shader_author = info['username']
  else:
    shader_author = "N.N."

  shader_description=info['description']


  fuse_name = convertToFusename(shader_name)

  fname=f"{fuse_name}.{id}.json"

  if not nocache:
    if cache_filename == None:
      print("write to cache")
      with io.open(path+fname, 'w') as f:
        f.write(json_text)
    else:

      if cache_filename == f"shader_{id}.json":
        print(f"rename '{cache_filename}' to '{fname}'")
        copyTextFile(path+cache_filename,path+fname)
        os.remove(path+cache_filename)
        cache_filename=fname
      else:
        if cache_filename != fname:
          raise Exception(f"cache filename is {cache_filename} but should be '{fuse_name}.{id}.json'")



  fuse_author=os.getenv('AUTHOR')

  fuse_filename='Conversions/'+fuse_name+'.'+id

  if os.path.isfile(fuse_filename+".c") and not force:
    raise Exception(url+"\nconversion already exists (use -f to overwrite)")

  yaml_data={
        'shader':{
          'id':id,
          'name':shader_name,
          'author':shader_author,
          'url':'https://www.shadertoy.com/view/'+id,
          'description':info['description'],
          'tags':info['tags'],
        },
        'fuse':{
          'name':fuse_name,
          'author':fuse_author

        }
      }

  if "parentid" in info and "parentname" in info:
    yaml_data['shader']['parent']={
      'id':info['parentid'],
      'name':info['parentname'],
      'url':'https://www.shadertoy.com/view/'+info['parentid'],
      }


  with io.open(fuse_filename+".yaml", 'w', encoding='utf8') as outfile:
      yaml.dump(yaml_data
      ,outfile, default_flow_style=False, allow_unicode=True)

  code=""

  assets_exists=False


# for entry in json_data['Shader']['renderpass']:
  for entry in json_data['renderpass']:


    header="\n// ----------------------------------------------------------------------------------\n"+ \
      "// - "+entry['name']+(" "*(79-len(entry['name'])))+"-\n" \
      "// ----------------------------------------------------------------------------------\n\n\n"

    if nopatch:
      code = header + entry['code'] + code
    else:
      code = header + patchForDCTL(entry['code'],fuse_name,entry['name']) + code

    # code="\n// ----------------------------------------------------------------------------------\n"+ \
    #   "// - "+entry['name']+(" "*(79-len(entry['name'])))+"-\n" \
    #   "// ----------------------------------------------------------------------------------\n"+ \
    #   "\n\n\n"+patchForDCTL(entry['code'],fuse_name,entry['name'])+"\n\n\n"+code

    if not noassets:

      inputs=entry.get('inputs',None)

      if inputs!=None and len(inputs)>0:
        buffer_name=re.sub(r'[^A-Za-z0-9_]+','', re.sub(r' ','_', entry['name']))

        if not assets_exists and not os.path.exists(fuse_filename+'.assets'):
            os.makedirs(fuse_filename+'.assets')
            assets_exists = True

        for input in inputs:

            src=None

            if 'src' in input:
              src=input['src']
            elif 'filepath' in input:
              src=input['filepath']


            ctype=None

            if 'ctype' in input:
              ctype=input['ctype']
            elif 'type' in input:
              ctype=input['type']


            if src!=None and ctype!=None:
              filename, suffix = os.path.splitext(src)
              filename=f"{fuse_filename}.assets/{buffer_name}-Channel{input['channel']}-{ctype}{suffix}"

              if not os.path.exists(filename):
                data = requests.get("https://www.shadertoy.com"+src)

                with open(filename, 'wb') as f:
                    f.write(data.content)



  with open(fuse_filename+".c", 'w') as f:
     f.write(code)




# =====================================================================================================================

if not(os.path.isfile(".env")):
  with open(".env", 'w') as f:
     f.write( "AUTHOR=\"\"\n"
              "APIKEY=\"\"\n"
              "DOWNLOADS=\"\"\n"
            )
  print(".env file created - please enter your credentials to use")

load_dotenv()

parser = argparse.ArgumentParser(description='Fetch fuse source code.')
parser.add_argument('-f','--force',action='store_true',help='overwrite code if it already exists')
parser.add_argument('-i','--id', help='shadertoy id as used in the URL', required=True)
parser.add_argument('-nc','--no-cache',action='store_true',help='re-fetch the .json file (assets are not fetched if they exist localy)')
parser.add_argument('-na','--no-assets',action='store_true',help='do not try to download the assets, even if they are not yet existing')
parser.add_argument('-np','--no-patch',action='store_true',help='do not patch the code for DCTÖL - see normal WebGL in the .c file')
args = parser.parse_args()

try:
  doFetch(args.id,force=args.force,nocache=args.no_cache,noassets=args.no_assets,nopatch=args.no_patch)
except Exception as e:
  print("ERROR: "+str(e))
