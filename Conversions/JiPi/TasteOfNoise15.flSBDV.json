{"Shader":{"ver":"0.1","info":{"id":"flSBDV","date":"1652742462","viewed":172,"name":"Taste of Noise 15","username":"leon","description":"Another diving into the noise abyss","likes":13,"published":3,"flags":0,"usePreview":0,"tags":["abstract"],"hasliked":0},"renderpass":[{"inputs":[{"id":40,"src":"\/media\/a\/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","ctype":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":14854,"src":"\/media\/a\/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\n\/\/ Taste of Noise 15 by Leon Denise 2022\/05\/17\n\/\/ Using code from Inigo Quilez, Antoine Zanuttini and many more\n\n\/\/ Wanted to play again with FBM noise after understanding\n\/\/ I could sample the 3d texture to generate cheap value noise\n\/\/ (well I think it is cheaper?)\n\n\/\/ This is definitively one of my favorite noise pattern\n\/\/ A FBM noise with cyclic absolute value, making it looks\n\/\/ like a Gogotte stone or an abstract drawing from Moebius.\n\n\n\/\/ rotation matrix\nmat2 rot (float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\n\n\/\/ transform linear value into cyclic absolute value\nvec3 bend(vec3 v)\n{\n    return abs(sin(v*2.*6.283+iTime*6.283*.1));\n}\n\n\/\/ fractal brownian motion (layers of multi scale noise)\nvec3 fbm(vec3 p)\n{\n    vec3 result = vec3(0);\n    float falloff = 0.5;\n    for (float index = 0.; index < 3.; ++index)\n    {\n        result += bend(texture(iChannel0, p\/falloff).xyz) * falloff;\n        falloff \/= 2.;\n    }\n    return result;\n}\n\n\/\/ signed distance function\nfloat map(vec3 p)\n{\n    float dist = 100.;\n    \n    \/\/ animated fbm noise\n    vec3 seed = p * .08;\n    seed.z -= iTime*.01;\n    vec3 spicy = fbm(seed) * 2. - 1.;\n    \n    \/\/ sphere with distorted surface\n    dist = length(p)-1.0 - spicy.x*0.2;\n    \n    \/\/ scale down distance because domain is highly distorted\n    return dist * 0.15;\n}\n\n\/\/ Antoine Zanuttini\n\/\/ https:\/\/www.shadertoy.com\/view\/3sBGzV\nvec3 getNormal (vec3 pos)\n{\n    vec2 noff = vec2(0.01,0);\n    return normalize(map(pos)-vec3(map(pos-noff.xyy), map(pos-noff.yxy), map(pos-noff.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ coordinates\n    vec2 uv = (fragCoord.xy - iResolution.xy \/ 2.)\/iResolution.y;\n    vec3 noise = texture(iChannel1, fragCoord.xy\/1024.).rgb;\n    vec3 ray = normalize(vec3(uv, 3.));\n    vec3 pos = vec3(0,0,-3);\n    \n    \/\/ init variables\n    vec3 color, normal, tint;\n    float index, shade, light;\n    const float count = 50.;\n\n    \/\/ ray marching\n    for (index = count; index > 0.; --index)\n    {\n        float dist = map(pos);\n        if (dist < .001) break;\n        dist *= .8+.1*noise.z;\n        pos += ray*dist;\n    }\n    \n    \/\/ coloring\n    shade = index\/count;\n    normal = getNormal(pos);\n    light = pow(dot(reflect(ray, normal), vec3(0,1,0))*.5+.5, 2.);\n    light += pow(dot(normal, ray)*.5+.5, .5);\n    float dt = dot(reflect(normal, ray), -normalize(pos));\n    color = .5+.5*cos(vec3(1,2,3)+pos.y*3.+dt*3.+.5);\n    color = clamp((color + light * .5) * shade, 0., 1.);\n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}}