{"Shader":{"ver":"0.1","info":{"id":"fdVcRR","date":"1654313630","viewed":33,"name":"Creepy Trails","username":"SnoopethDuckDuck","description":"messy code","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["e"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"vec4 cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 );\n} \n\nvec3 pal(float t) {\n    vec3 d = 1. * vec3(0,1,2)\/3.;\n    return 1. + 2. * cos(6.28319 * (0.5 * t + d));\n}\n\n#define thc(a,b) tanh(a*cos(b))\/tanh(a)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) \/ iResolution.y;\n    \n    \/\/ Zoom + distort\n    float mx = 0.5 + 0.5 * thc(2.5, length(uv) * 0.5 - 0.4 * iTime);\n    float zm = mix(0.44, 0.6, mx);\n    zm += 1.5 - 1.5 * tanh(0.04 * iTime * iTime);\n    \n    \/\/zm -= 0.3 * tanh(24. - length(uv) * 50.);\n    \n    \/\/ Pixel + cells etc.\n    vec2 res = 0.5 * floor(iResolution.xy);    \n    ivec2 px = ivec2(zm * fragCoord + (1.-zm) * res);\n    \n    vec4 c = cell(px);\n    vec4 b = cell(px - ivec2(0,1));\n    vec4 t = cell(px + ivec2(0,1));  \n    vec4 l = cell(px - ivec2(1,0));\n    vec4 r = cell(px + ivec2(1,0));    \n    vec4 sum = b + t + l + r;\n      \n    \/\/ Lighten right side\n    float cn = 0.06 * smoothstep(-0.2, 0.2, uv.x); \n    \n    \/\/ Cut colors into lines\n    float fl = clamp(uv.y, -0.125, 0.125);\n    \n    \/\/ Background\n    vec3 col = pal(0.05 * (uv.x + 5. * uv.y) + 0.2 * cn - 0.7);\n    \n    \/\/ Exterior outline\n   \/\/ if (sum.r > 1.)\n        col = c.g * pal(0.2 + uv.x * 0.2 + 0.3 * floor(c.g * 40.) \/40.);  \n    \n    \/\/col -= c.rgb;\n    fragColor.rgb = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"#define pi 3.14159\n\nvec4 cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 );\n} \n\n\/\/ From iq\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)\/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nvoid mainImage( out vec4 col, in vec2 f )\n{\n    ivec2 px = ivec2(f);\n    vec4 test = cell(px);\n    \/\/px = ivec2(1.2 * (f-res));\n    \n    \/\/ Centre coords\n    vec2 res = floor(0.5 * iResolution.xy);\n    f -= res;\n    \n    px = ivec2(1.5 * f + 1. * iTime * vec2(1,0));\n    \n    \/\/ Speed of time\n    float spd = 0.125;\n\n    \/\/ Number of blobs\n    float n = 40.;\n    \n    \/\/ Distance from blobs\n    float d = 1e5;\n    \n    for (float i = 0.; i < n; i++) {\n        \/\/ Offset each blob\n        float io = 2. * pi * i \/ n;\n        \n        \/\/ Time\n        float t = spd * iTime + 2. * pi * cos(0.5 * spd * iTime + io);\n        \n        \/\/ Motion of blobs (idk how this works)\n        float c = 1. + 0.5 * cos(4. * t + io);\n        d = smin(d, c * length(f - 120. * (c-0.5) * vec2(cos(t+io), sin(t+io))), 2.);  \n     }\n     \n     \/\/ Harsh shape\n     float r = step(d, 5.);\n     \n     \/\/ Soft shape (going inwards)\n     float s = smoothstep(0., 5., -d + 5.);\n     \n     vec4 cl = cell(px);\n     cl = mix(cl, cell(ivec2(f)), 0.95);\n     col = vec4(s);\n     \n     col = mix(col + 0.99 * cl, 0.999 * abs(col-cl), 1.);\/\/cl * 0.999;\n\n     col = clamp(col, 0., 1.);\n     \/\/col *= 0.5;\n}","name":"Buffer A","description":"","type":"buffer"}]}}