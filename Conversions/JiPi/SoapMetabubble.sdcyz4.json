{"Shader":{"ver":"0.1","info":{"id":"sdcyz4","date":"1653060201","viewed":44,"name":"Soap MetaBubble","username":"yasuo","description":"It's like the soup bubble with the metaball animation.","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["metaball"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"\/\/ raymarching based from https:\/\/www.shadertoy.com\/view\/wdGGz3\n#define MAX_STEPS 256\n#define MAX_DIST 256.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define antialiasing(n) n\/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define B(p,s) max(abs(p).x-s.x,abs(p).y-s.y)\n#define MATERIAL 0\n\n#define ZERO (min(iFrame,0))\n\nvec3 N33(vec3 p) {\n    vec3 a = fract(p*vec3(123.34,234.34,345.65));\n    a+=dot(a,a+34.45);\n    return fract(vec3(a.x*a.y,a.y*a.z,a.z*a.x));\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)\/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat hash(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat metaball(vec3 p, float i, float t) {\n    vec3 n = N33(vec3(i));\n    vec3 p2 = sin(n*t)*0.2;\n    vec3 spp = p-p2;\n    float sp = length(spp)-0.01;\n    return sp;\n}\n\nvec2 GetDist(vec3 p) {\n\n    float k = 0.7;\n    float d = 10.0;\n    float t = iTime*3.0;\n\n    d = smin(d,metaball(p,0.3, t),k); \n    d = smin(d,metaball(p,0.6, t),k); \n    d = smin(d,metaball(p,0.9, t),k); \n\n    vec2 model = vec2(d,MATERIAL);\n    return model;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n\/\/ thx iq! https:\/\/iquilezles.org\/articles\/distfunctions2d\/\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\nfloat charS(vec2 p){\n    vec2 prevP = p;\n    p.y*=1.5;\n    float d = abs(length(p-vec2(-0.02,0.06))-0.06)-0.02;\n    float d2 = B(p-vec2(0.03,0.02),vec2(0.045,0.04));\n    d = max(-d2,d);\n    \n    d2 = abs(length(p-vec2(-0.02,-0.06))-0.06)-0.02;\n    float d3 = B(p-vec2(-0.06,-0.02),vec2(0.045,0.04));\n    d2 = max(-d3,d2);\n    \n    d = min(d,d2);\n    return d;\n}\n\nfloat charH(vec2 p){\n    vec2 prevP = p;\n    p.y*=1.5;\n    p.x = abs(p.x)-0.06;\n    float d = B(p,vec2(0.02,0.14));\n    p = prevP;\n    float d2 = B(p,vec2(0.08,0.02));\n    d = min(d,d2);\n    return d;\n}\n\nfloat charA(vec2 p){\n    vec2 prevP = p;\n    p.y*=1.5;\n    p.x = abs(p.x)-0.04;\n    p*=Rot(radians(-15.0));\n    float d = B(p,vec2(0.02,0.16));\n    p = prevP;\n    float d2 = B(p-vec2(0.0,-0.03),vec2(0.05,0.02));\n    d = min(d,d2);\n    d = max((abs(p.y)-0.09),d);\n    p = prevP;\n    p*=Rot(radians(22.0));\n    d2 =  B(p-vec2(-0.037,-0.12),vec2(0.019,0.12));\n    return d;\n}\n\nfloat charD(vec2 p){\n    vec2 prevP = p;\n    p.y*=1.5;\n    float d = abs(sdBox(p,vec2(0.02,0.075))-0.04)-0.02;\n    d = max(-p.x-0.03,d);\n    float d2 = B(p-vec2(-0.05,0.0),vec2(0.02,0.135));\n    d = min(d,d2);\n    return d;\n}\n\nfloat charE(vec2 p){\n    vec2 prevP = p;\n    p.y*=1.5;\n    float d = B(p,vec2(0.065,0.13));\n    p.y = abs(p.y)-0.055;\n    float d2 = B(p-vec2(0.03,0.0),vec2(0.065,0.03));\n    d = max(-d2,d);\n    return d;\n}\n\nfloat charR(vec2 p){\n    vec2 prevP = p;\n    p.y*=1.5;\n    float d = abs(sdBox(p-vec2(-0.01,0.05),vec2(0.03,0.022))-0.04)-0.023;\n    d = max(-p.x-0.03,d);\n    float d2 = B(p-vec2(-0.05,0.0),vec2(0.02,0.135));\n    d = min(d,d2);\n    p*=Rot(radians(-20.0));\n    d2 = B(p-vec2(0.02,-0.14),vec2(0.02,0.13));\n    p*=Rot(radians(20.0));\n    d2 = max(-p.y-0.132,d2);\n    \n    d = min(d,d2);\n    return d;\n}\n\nfloat shaderText(vec2 p){\n    vec2 prevP = p;\n    p.y*=0.9;\n    float d = charS(p-vec2(-0.5,0.0));\n    float d2 = charH(p-vec2(-0.34,0.0));\n    d = min(d,d2);\n    d2 = charA(p-vec2(-0.14,0.0));\n    d = min(d,d2);\n    d2 = charD(p-vec2(0.05,0.0));\n    d = min(d,d2);\n    d2 = charE(p-vec2(0.22,0.0));\n    d = min(d,d2);\n    d2 = charR(p-vec2(0.38,0.0));\n    d = min(d,d2);\n    return d;\n}\n\nvec3 drawBg(vec2 p, vec3 col){\n    float d = shaderText(p*1.7);\n    col = mix(col,vec3(0.0),S(d,0.0));\n    return col;\n}\n\nvec3 reflectMaterial(vec3 p, vec3 rd, vec3 n) {\n    vec3 r = reflect(rd,n);\n    \n    vec3 refTex = drawBg(p.xy,vec3(max(0.95,r.y)))+(r*sin(iTime)*0.5);\n\n    return refTex;\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    if(mat == MATERIAL){\n        col = reflectMaterial(p,rd,n);\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)\/iResolution.y;\n    vec2 prevUV = uv;\n    vec2 m =  iMouse.xy\/iResolution.xy;\n    \n    vec3 ro = vec3(0, 0, -1.0);\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0.0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(1.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    } else {\n        col = drawBg(uv,col);\n    }\n    \n    \/\/ gamma correction\n    col = pow( col, vec3(0.9545) );    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}}