{"Shader":{"ver":"0.1","info":{"id":"NlsfDM","date":"1650998557","viewed":80,"name":"nanoKontrol2","username":"byt3_m3chanic","description":"nanoKontrol2 - Created originally for use with KodeLife (and a real nanoKontrol2 using a midi texture). Just was playing around and hooked up the midi to soundcloud for automated fun!\nhttps:\/\/twitter.com\/byt3m3chanic\/status\/1518968742314754049","likes":14,"published":3,"flags":64,"usePreview":0,"tags":["nanokontrol2"],"hasliked":0},"renderpass":[{"inputs":[{"id":28843,"src":"https:\/\/soundcloud.com\/boris-brejcha\/schaltzentrale-boris-brejcha-joker-remake-free","ctype":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":37,"channel":0}],"code":"\/** \n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n   \n    NanoKontrol2 Korg Midi interface\n    04\/26\/22 | byt3_m3chanic\n\n    Made mostly just cause I had a day to play, but also a pretty \n    good demo of how to access the midi texture in KodeLife\n    (though here on Shadertoy I'm just pumping the sound to controll)\n    \n    https:\/\/twitter.com\/byt3m3chanic\/status\/1518968742314754049\n\n    to use in KodeLife - replace the sampleFreq calls with midiCoord \n\n    ivec2 midiCoord(int offset){\n        int x = offset % 32;\n        int y = offset \/ 32;\n        return ivec2(x,y);\n    }\n    \n    float md1 = texelFetch(midi1, midiCoord(3 * 127 + i), 0).x;\n*\/\n\n#define R iResolution\n#define M iMouse\n#define T iTime\n\n#define PI2 6.28318530718\n#define PI  3.14159265359\n\n\/\/ button color\nconst vec3 lcolor = vec3(0.949,0.008,0.290);\n\/\/ power color\nconst vec3 tcolor = vec3(0.855,0.969,0.812);\n\nmat2 rot(float g) {return mat2(cos(g), sin(g),-sin(g), cos(g));}\nfloat hash21( vec2 p ) {return fract(sin(dot(p,vec2(23.43,84.21)))*4832.3234);}\n\nfloat sampleFreq(float freq) {\n    return texture(iChannel0, vec2(freq, 0.1)).x;\n}\n\nfloat box(in vec2 p, in vec2 b){\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat px = 0.;\n\nvoid nanoBody(inout vec3 C, vec2 p) {\n    vec2 uv=p-vec2(0);\n    \n    \/\/body\n    float d = box(uv,vec2(.725,.2))-.015;\n    d=smoothstep(px,-px,d);\n    \n    \/\/inset\n    float i = box(uv,vec2(.715,.1875))-.015;\n    i=smoothstep(px,-px,i);\n    \n    \/\/shadow\n    float sd = box(uv+vec2(0,.01),vec2(.71,.19));\n    sd=smoothstep(.045-px,-px,abs(sd)-.01);\n    float hs = hash21(uv*sin(uv.x));\n    \n    C= mix(C,vec3(.0),sd);\n    C= mix(C,vec3(.015)-(hs*.01),d);\n    C= mix(C,vec3(.035)-(hs*.01),clamp(min(uv.y+.45,i),0.,1.));\n    \n    \/\/ button fame boxes\n    float r = box(uv+vec2(.55,.15),vec2(.13,.0275));\n    r=smoothstep(px,-px,abs(r)-.00075);\n    C= mix(C,vec3(.1),r);\n    \n    r = box(uv+vec2(.55,.05),vec2(.13,.021));\n    r=smoothstep(px,-px,abs(r)-.00075);\n    C= mix(C,vec3(.1),r);\n    \n    \/\/ power light\n    float l = box(uv+vec2(.7,-.175),vec2(.0125,.002))-.0025;\n    float sl=smoothstep(.02-px,-px,l);\n    l=smoothstep(px,-px,l);\n    C= mix(C,tcolor*.2,sl);\n    C= mix(C,tcolor,l);\n}\n\nvoid knob(inout vec3 C, vec2 p, float level) {\n    vec2 uv = p-vec2(0);\n    \/\/base\n    uv*=rot(level*PI2);\n    float k = length(uv)-.037;\n    float dk = length(uv)-.027;\n    dk=smoothstep(px,-px,abs(dk)-.005);\n    k=smoothstep(px,-px,k);\n\n    C= mix(C,vec3(.001),k);\n    C= mix(C,uv.x>0.?vec3(.16):vec3(.05),dk);\n    \n    \/\/line\n    float l = box(uv-vec2(0,.01),vec2(.0015,.01));\n    l=smoothstep(px,-px,l);\n    \n    C= mix(C,vec3(.6),l);\n}\n\nvoid slider(inout vec3 C, vec2 p, float level) {\n    vec2 uv=p-vec2(0);\n    \n    \/\/background\n    float d = box(uv,vec2(.015,.125))-.015;\n    d=smoothstep(px,-px,d);\n    C= mix(C,uv.x<0.?vec3(.1):vec3(.15),d);\n    \n    \/\/lines\n    float l = box(uv,vec2(.015,.0001));\n    l = min(box(vec2(uv.x,abs(abs(uv.y)-.075)-.025),vec2(.015,.0001)),l);\n    l=smoothstep(px,-px,l);\n    C= mix(C,uv.x>0.?vec3(.00):vec3(.5),l);\n    \n    \/\/slider\n    level = (level*.75)-.15;\n    float b = box(uv-vec2(0,level),vec2(.0125,.0175))-.0075;\n    b=smoothstep(px,-px,b);\n    \n    C= mix(C,vec3(.01),b);\n}\n\nvoid button(inout vec3 C, vec2 p, float state, int type) {\n    vec2 uv = p-vec2(0);\n    \/\/base\n    float b = box(uv,vec2(.0125,type==2?.005:.0125))-.005;\n    float sl=smoothstep(.02-px,-px,b);\n    b=smoothstep(px,-px,b);\n    \n    if(state>.001) C= mix(C,lcolor*.2,sl);\n    C= mix(C,state>.001?lcolor:vec3(.05),b);\n}\n\nvoid backdrop( inout vec3 C, vec2 p) {\n    vec2 uv = p-vec2(0);\n    uv*=rot(.78);\n    float d = box(uv,vec2(5.,.4));\n    float dcut=d;\n    float sd=smoothstep(.03-px,-px,d);\n    d=smoothstep(px,-px,d);\n    C=mix(C,vec3(.0001),sd);\n    C=mix(C,vec3(.001),d);\n    C=mix(C,vec3(0.384,0.510,0.227),clamp(min((p.y+.015)*2.865,d),0.,1.));\n\n    \n    float i = .03;\n    vec2 nv=p-vec2(1.-T*.1,-.02);\n    vec2 f = fract(nv*40.)-.5;\n    vec2 fid = floor(nv*40.)+.5;\n    fid.x=mod(fid.x,30.);\n    float ht = sampleFreq(fid.x*.015)*.85; \n    \n    float bd = box(f,vec2(.4))-.01;\n    bd=max(bd,dcut);\n    bd=smoothstep(px,-px,bd);\n\n    float bx = box(f,vec2(.3))-.01;\n    bx=abs(bx)-.12;\n    bx=max(bx,dcut);\n    bx=smoothstep(px,-px,bx);\n    \n    \/\/draw dots\n    if(fid.x<40.&& fid.y>0.) {\n        float avg = (fid.y*.095)-.5; \n        if(ht>avg) C=mix(C,vec3(.0001),bx);\n        if ( ht>avg&&ht<avg+.1) C=mix(C,vec3(.0001),bd);\n    }\n  \n      \n    uv.y=abs(uv.y-.38)-.02;\n    float nd = box(uv,vec2(5.,.0075));\n    nd=smoothstep(px,-px,nd);\n    C=mix(C,tcolor,nd);\n\n}\n\nvoid mainImage( out vec4 O, in vec2 F )\n{\n\n    vec2 uv = (2.* F.xy-R.xy)\/max(R.x,R.y);\n    float hs = hash21(uv*sin(uv.x));\n    vec3 C = vec3(.3-(hs*.05));\n\n    px=2.\/R.x;\n\n    backdrop(C, uv);\n    \n    \/\/ uncomment for fun\n    \/\/uv.x+=T*.3;\n    \/\/uv.x=mod(uv.x+1.,2.)-1.;\n    \n    nanoBody(C, uv+vec2(0,.25));\n    \/\/ to use midi texture you loop over\n    \/\/ the control values based on a 32x32\n    \/\/ texture\n    \/\/ https:\/\/hexler.net\/kodelife\/manual\/parameters-built-in\n\n    \/\/ sliders\n    for(int i = 0; i<8;i++) {\n        \/\/float md1 = (texelFetch(midi1, midiCoord(3 * 127 + i), 0).x);\n        float md1 = sampleFreq(float(i)*.042)*.35; \n        vec2 p = vec2(.25,.29)-vec2(float(i)*.13,0);\n        \n        slider(C, uv+p, md1);\n    }    \n\n    \/\/ knobs\n    float tk = 0.;\n    for(int i = 16; i<24;i++) {\n    \/\/\n        float md1 = sampleFreq(float(i)*.051)*.5; \n        vec2 p = vec2(.25,.0925)-vec2(float(tk)*.13,0);\n        knob(C,uv+p,md1);\n        \n        tk++;\n    }\n    \n    \/\/ solo buttons\n    tk = 0.;\n    for(int i = 32; i<40;i++) {\n        float md1 = sampleFreq(float(tk*1.25)*.02)*.45; \n        if(md1<.2) md1 = 0.;\n        vec2 p = vec2(.3125,.2)-vec2(float(tk)*.13,0);\n        button(C,uv+p, md1, 0);\n        tk++;\n    }  \n\n    \/\/ mute buttons\n    tk = 0.;\n    for(int i = 48; i<56;i++) {\n        float md1 = sampleFreq(float(tk*1.5)*.1)*.45; \n        if(md1<.1) md1 = 0.;\n        vec2 p = vec2(.3125,.25)-vec2(float(tk)*.13,0);\n        button(C,uv+p, md1, 0);\n        tk++;\n    }  \n\n    \/\/ record buttons\n    tk = 0.;\n    for(int i = 64; i<72;i++) {\n        float md1 = sampleFreq(float(i-35)*.1)*.45; \n        if(md1<.1) md1 = 0.;\n        vec2 p = vec2(.3125,.3)-vec2(float(tk)*.13,0);\n        button(C,uv+p, md1, 0);\n        tk++;\n    }  \n    \n    \/\/ track buttons\n    for(int i = 41; i<46;i++) {\n        float md1 = sampleFreq(float(i-41)*.1)*.45; \n        if(md1<.25)md1 = 0.;\n        \/\/ track button midi jumps all over? why Korg?\n        \/\/ fixing my brute force\n        float fk = 0.;\n        if(i==41){\n        fk=10.;\n        }else if(i==42){\n        fk=9.;\n        }else if(i==43){\n        fk=7.;\n        }else if(i==44){\n        fk=8.;\n        }else{\n        fk=11.;\n        }\n\n        vec2 p = vec2(1.,.4)-vec2(float(fk)*.05,0);\n        button(C,uv+p, md1, 0);\n        tk++;\n    }\n    \n    \/\/ cycle button\n    tk = 0.;\n    float md1 = sampleFreq(float(.23434)*.1)*.45; \n    if(md1<.2) md1 = 0.;\n    button(C,uv+vec2(.65,.30), md1, 2);\n    \n    \/\/ marker buttons\n        for(int i = 60; i<63;i++) {\n        float md1 = sampleFreq(float(i-35)*.1)*.45; \n        if(md1<.1) md1 = 0.;\n        vec2 p = vec2(.55,.30)-vec2(float(tk)*.05,0);\n        button(C,uv+p, md1, 2);\n        tk++;\n    }  \n    \n    \/\/ track buttons\n        for(int i = 58; i<60;i++) {\n        float md1 = sampleFreq(float(i-57)*.078)*.45; \n        if(md1<.25) md1 = 0.;\n        vec2 p = vec2(.8,.25)-vec2(float(tk)*.05,0);\n        button(C,uv+p, md1, 2);\n        tk++;\n    }  \n\n    if(hs<.65) C = clamp(C+(hs*.005),C,vec3(1));\n    C = pow(C, vec3(.4545));\n    O = vec4(C,1.);\n}","name":"Image","description":"","type":"image"}]}}