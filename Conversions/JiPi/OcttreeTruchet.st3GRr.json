{"Shader":{"ver":"0.1","info":{"id":"st3GRr","date":"1635594250","viewed":487,"name":"octtree truchet","username":"flockaroo","description":"multiscale octtree truchet","likes":31,"published":3,"flags":0,"usePreview":0,"tags":["truchet","multiscale","octtree"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"\/\/ created by florian berger (flockaroo) - 2021\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\/\/\n\/\/ 3D-generalization of multi-scale-truchets (Octtree truchet)\n\/\/\n\/\/ ...like Shanes 2D version (not sure, but i think he did it first in 2D)\n\/\/ \"Quadtree Truchet\" https:\/\/www.shadertoy.com\/view\/4t3BW4\n\/\/\n\/\/ wasnt sure if it works visually in 3D - kind of crowded, but i like it a lot...\n\/\/ different regions with different truchet-scale can easily be seen.\n\/\/\n\/\/ golfed it down, but i guess there's still potential...\n\/\/\n\/\/ also here a (only single-scale) version on twigl in under 1 tweet:\n\/\/ https:\/\/twitter.com\/flockaroo\/status\/1454405159224754184\n\n\/\/my original version:\n\/\/\n\/\/#define Res iResolution.xy\n\/\/#define ROT(v,x) v=mat2(cos(x),sin(x),-sin(x),cos(x))*v;\n\/\/#define R(p) cos(((p)+(p).zxy*1.1+(p).yzx*1.3)*10.)\n\/\/#define L(n,c) for(int i=0;i<n;i++){c;}\n\/\/#define t iTime\n\/\/\n\/\/#define dd(X,p2) \\\n\/\/{ \\\n\/\/    vec3 p=p2; \\\n\/\/    p+=R(p*.3)*.05; float l,d=1e3,s=2.; \\\n\/\/    vec3 q,r; \\\n\/\/    L(4,s*=.5;q=floor(p\/s)*s;r=R(q);if(r.x<.5) break) \\\n\/\/    p=((p-q)\/s-.5)*sign(r); s*=8.; \\\n\/\/    L(3,l=length(p.xy+.5)*s; d=min(d,length(vec2(l-(min(floor(l),s-1.)+.5),(fract(p.z*s+.5*s)-.5)))\/s); p.zxy=p*vec3(-1,-1,1) ) \\\n\/\/    X+=(d*s\/8.-2e-3)*.6; \\\n\/\/}\n\/\/\n\/\/void mainImage( out vec4 C, in vec2 FC )\n\/\/{\n\/\/    vec3 p,d=vec3((FC-Res*.5)\/Res.x*2.,-.7);\n\/\/    ROT(d.yz,t*.2);\n\/\/    ROT(d.xy,t*.07);\n\/\/    p=vec3(7,2,1)*t\/1e2;\n\/\/    float x=0.;\n\/\/    L(200,dd(x,p+d*x))\n\/\/    C=-C+1.-exp(-x\/3.);\n\/\/    C.w=1.;\n\/\/}\n\n\/\/ wow!! fabrices take with 548 chars:\n\/\/\n\/\/#define R2(a)  mat2(cos( iTime*a +vec4(0,33,11,0)))\n\/\/#define H(p)   cos( p\/.1 +p.zxy*11. + p.yzx*13. )\n\/\/#define L(n)   for( int i=0 ; i++ < n ; )\n\/\/\n\/\/void mainImage( out vec4 C, vec2 U )\n\/\/{\n\/\/    vec3 R = iResolution,\n\/\/         P = vec3(7,2,1) * iTime\/1e2, q,r,p,\n\/\/         D = vec3( ( U+U - R.xy ) \/ R.x, -.7 );\n\/\/    D.yz *= R2(.2);\n\/\/    D.xy *= R2(.07);\n\/\/  \n\/\/    float x=0.,l,d,s;\n\/\/    L( 200 ) { \n\/\/        p = P+D*x;\n\/\/        p += H(.3*p)*.05;\n\/\/        d=1e3; s=2.; r=R\/R;\n\/\/        L( 4 && r.x>.5 ) { s*=.5; q = floor(p\/s)*s; r = H(q); }\n\/\/        p = ( (p-q)\/s - .5 ) * sign(r);\n\/\/        s *= 8.;\n\/\/        L( 3 ) { \n\/\/           l = length(p.xy+.5)*s;\n\/\/           d = min(d, length(vec2( l - min(floor(l),s-1.) , \n\/\/                                   fract(p.z*s+.5*s) ) -.5\n\/\/                            ) \/s);\n\/\/           p.zxy = p * vec3(-1,-1,1) ;\n\/\/        }\n\/\/        x += d*s*.075 -1.2e-3 ;\n\/\/    }\n\/\/    C = 1.-C-exp(-x\/3.);\n\/\/}\n\n\/\/!!!and even smaller Xor with 539 chars:\n\/\/(and i took another 11 off by (sloppily) replacing the exp by a linear fog\n\/\/ and using fabrices loop condition) - so now 526 chars:\n\/\/ ...and a lot of fabrice changes added!\n#define A    mat2( cos(vec4(0,33,11,0)+t*\/\/\n#define R(p) cos( p\/.1+p.zxy*11.+p.yzx*13. )\/\/\n#define L(n) for(int i=0; i++<n;)\n\n\nvoid mainImage(out vec4 C, vec2 F)\n{\n    float t = iTime,l,D,s;C-=C;\n    vec3 R = iResolution,\n    d = vec3((F+F-R.xy)\/R.x,-.7),\n    p = vec3(7,2,1)*t\/1e2,P,q,r;\n    \n    d.yz *= A .2));\n    d.xy *= A .07));\n    \n    L(200)\n    {\n        P = p+d*C.x*3.;\n        P += R(.3*P)*.05;\n        l = D = 1e3, s = 2., r=R;\n        \n        L(4 && r.x>.5)\n            s *= .5,\n            q = floor(P\/s),\n            r = R(s*q);\n        \n        P = (P\/s-q-.5)*sign(r); s*=8.;\n        \n        L(3)\n            D = min(D,length(.5-vec2(min(ceil(l=length(P.xy+.5)*s),s)-l,fract(P.z*s+.5*s)))\/s),\n            P.zxy=P,P.zx*= -1.;\n        \n        C += D*s*.025-4e-4;\n    }\n}\n","name":"Image","description":"","type":"image"}]}}