{
 "ver": "0.1",
 "info": {
  "id": "ssfcDl",
  "date": "0",
  "viewed": 0,
  "name": "Fork Green goo JiPi 226",
  "description": "The bump mapping is a shameless fake taking several brutal shortcuts for this simple 2-D demo, but doing it properly in 3-D would not be a lot more work. A procedural bump function with an analytical derivative makes it quite easy.",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "noise",
   "bump",
   "flownoise"
  ],
  "hasliked": 0,
  "parentid": "NdfyDs",
  "parentname": "Green goo"
 },
 "renderpass": [
  {
   "inputs": [],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/min(iResolution.x, iResolution.y);\n\n    const float nscale = 8.0;\n    vec2 v = nscale*(uv-0.5);\n    const vec2 p = vec2(0.0, 0.0);\n    float alpha = iTime;\n    vec2 g, gsum;\n     \n    float n = 0.5;\n    n += 0.4 * psrdnoise(v, p, alpha, g);\n    gsum = g;\n    n += 0.2 * psrdnoise(v*2.0+0.1*gsum, p*2.0,\n        alpha*2.0, g);\n    gsum += g; // Lower amp, higher freq => same weight\n    vec3 N = normalize(vec3(-gsum, 1.0));\n    vec3 L = normalize(vec3(1.0,1.0,1.0));\n    float s = pow(max(dot(N,L), 0.0), 10.0); // Shiny!\n    vec3 scolor = vec3(1.0,1.0,1.0);\n    vec3 ncolor = n*vec3(0.5, 1.0, 0.2); // Gooey green\n\n    fragColor = vec4(mix(ncolor, scolor, s), 1.0);\n}\n",
   "name": "Image",
   "description": "",
   "type": "image"
  },
  {
   "inputs": [],
   "outputs": [],
   "code": "// psrdnoise (c) Stefan Gustavson and Ian McEwan,\n// ver. 2021-12-02, published under the MIT license:\n// https://github.com/stegu/psrdnoise/\n\nfloat psrdnoise(vec2 x, vec2 period, float alpha, out vec2 gradient)\n{\n\tvec2 uv = vec2(x.x+x.y*0.5, x.y);\n\tvec2 i0 = floor(uv), f0 = fract(uv);\n\tfloat cmp = step(f0.y, f0.x);\n\tvec2 o1 = vec2(cmp, 1.0-cmp);\n\tvec2 i1 = i0 + o1, i2 = i0 + 1.0;\n\tvec2 v0 = vec2(i0.x - i0.y*0.5, i0.y);\n\tvec2 v1 = vec2(v0.x + o1.x - o1.y*0.5, v0.y + o1.y);\n\tvec2 v2 = vec2(v0.x + 0.5, v0.y + 1.0);\n\tvec2 x0 = x - v0, x1 = x - v1, x2 = x - v2;\n\tvec3 iu, iv, xw, yw;\n\tif(any(greaterThan(period, vec2(0.0)))) {\n\t\txw = vec3(v0.x, v1.x, v2.x);\n\t\tyw = vec3(v0.y, v1.y, v2.y);\n\t\tif(period.x > 0.0)\n\t\t\txw = mod(vec3(v0.x, v1.x, v2.x), period.x);\n\t\tif(period.y > 0.0)\n\t\t\tyw = mod(vec3(v0.y, v1.y, v2.y), period.y);\n\t\tiu = floor(xw + 0.5*yw + 0.5); iv = floor(yw + 0.5);\n\t} else {\n\t\tiu = vec3(i0.x, i1.x, i2.x); iv = vec3(i0.y, i1.y, i2.y);\n\t}\n\tvec3 hash = mod(iu, 289.0);\n\thash = mod((hash*51.0 + 2.0)*hash + iv, 289.0);\n\thash = mod((hash*34.0 + 10.0)*hash, 289.0);\n\tvec3 psi = hash*0.07482 + alpha;\n\tvec3 gx = cos(psi); vec3 gy = sin(psi);\n\tvec2 g0 = vec2(gx.x, gy.x);\n\tvec2 g1 = vec2(gx.y, gy.y);\n\tvec2 g2 = vec2(gx.z, gy.z);\n\tvec3 w = 0.8 - vec3(dot(x0, x0), dot(x1, x1), dot(x2, x2));\n\tw = max(w, 0.0); vec3 w2 = w*w; vec3 w4 = w2*w2;\n\tvec3 gdotx = vec3(dot(g0, x0), dot(g1, x1), dot(g2, x2));\n\tfloat n = dot(w4, gdotx);\n\tvec3 w3 = w2*w; vec3 dw = -8.0*w3*gdotx;\n\tvec2 dn0 = w4.x*g0 + dw.x*x0;\n\tvec2 dn1 = w4.y*g1 + dw.y*x1;\n\tvec2 dn2 = w4.z*g2 + dw.z*x2;\n\tgradient = 10.9*(dn0 + dn1 + dn2);\n\treturn 10.9*n;\n}\n",
   "name": "Common",
   "description": "",
   "type": "common"
  }
 ]
}