{"Shader":{"ver":"0.1","info":{"id":"wtlXRH","date":"1562170669","viewed":1009,"name":"Nintendo Switch","username":"jackdavenport","description":"Decided to practice my distance field modelling skills by creating a Nintendo Switch, displaying one of my older shaders on it's screen :D\n\nClick the mouse to look around the console.","likes":25,"published":3,"flags":32,"usePreview":0,"tags":["raymarching","raymarcher","modelling","nintendo","switch"],"hasliked":0},"renderpass":[{"inputs":[{"id":6,"src":"\/media\/a\/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":25,"src":"\/media\/a\/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","ctype":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ Nintendo Switch by jackdavenport\n\/\/ All code is free to use with credit! :)\n\/\/ Created 2019\n\n\/\/------------------------------------------------------------------------------------------------\/\/\n#define MAX_ITER 128\n#define MIN_DIST .001\n#define MAX_DIST 20.\n#define REFL_COUNT 3\n\n\/\/#define DEBUG_NO_LIGHT      \/\/ uncomment to disable shading\n\/\/#define DEBUG_SHOW_NORMALS  \/\/ uncomment to display normals\n\n\/\/------------------------------------------------------------------------------------------------\/\/\nconst vec3 lightPos1 = vec3(3.,1.5,-2.);\nconst vec3 lightPos2 = vec3(-3.,3.5,2.);\nconst float lightIntensity = 1.05;\nconst vec3 ambientLight = vec3(.2,.2,.1);\nconst float consoleRot = .15;\n\n\/\/------------------------------------------------------------------------------------------------\/\/\nfloat dstJoystick(vec3 p) {\n    return min(\n        dstCappedCylinder(p-vec3(0.,.03,0.),.04,.06),\n    \tdstCappedCylinder(p-vec3(0.,.11,0.),.04,.0005)-.02);\n}\nfloat dstButtonGrid(vec3 p) {\n    float d = dstCappedCylinder(p,.03,.005);\n    p.x -= .12; d = min(d, dstCappedCylinder(p,.03,.005));\n    p.x += .06;\n    p.z -= .08; d = min(d, dstCappedCylinder(p,.03,.005));\n    p.z += .15; d = min(d, dstCappedCylinder(p,.03,.005));\n    return d;\n}\nvec2 dstScene(vec3 p) {\n    vec2 dst;\n    \/\/ ground\n    dst = vec2(dstPlane(p, vec4(0.,1.,0.,-.05)), 0.);\n    \/\/ console body\n    p.y -= .04;\n    p.yz = rot2D(p.yz, consoleRot);\n    vec3 baseBox = vec3(.85, .025, .5);\n    if(abs(p.x) <= 1.) {\n    \tfloat base = dstRoundBox(p, baseBox, .025);\n        if(p.z < -.45) {\n    \t\tbase = dstSubtract(base, dstRoundBox(p-vec3(0.,.015,-.5), vec3(.007,.001,.003), .025));\n    \t\tbase = dstSubtract(base, dstRoundBox(p-vec3(-.09,.015,-.5), vec3(.002), .025));\n    \t\tbase = dstSubtract(base, dstRoundBox(p-vec3(.09,.015,-.5), vec3(.002), .025));\n        } else if(p.z > .45) {\n            if(p.x > -.5 && p.x < -.16) {\n                vec3 q = p-vec3(0.,0.,.53);\n                q.x = mod(q.x,.07);\n            \tbase = dstSubtract(base, dstBox(q, vec3(.045,.025,.025)));\n            }\n            base = dstSubtract(base, dstRoundBox(p-vec3(-.74,-.025,.53), vec3(.06,.03,.03), .01));\n            base = min(base, dstRoundBox(p-vec3(-.74,-.02,.505), vec3(.06,.02,.005), .01));\n            base = min(base, dstRoundBox(p-vec3(.65,.0,.52), vec3(.05,.01,.01), .01));\n        }\n    \tdst = dstUnion(dst, base, 1.);\n    }\n    \/\/ joycons\n    if(abs(p.x) > .8) {\n        \/\/ base\n    \tvec3 s = vec3(.93,1.,.55);\n    \tfloat cutout = dstBox(p, baseBox * vec3(1.,3.5,1.2));\n    \tcutout = dstSubtract(dstCappedCylinder(dstElongate(p\/s, vec3(.7,.0005,.47)), .5, .025)-.035, cutout);\n    \tdst = dstUnion(dst, cutout, 2.);\n    \t\/\/ buttons\/joysticks\n        float intShape = dstRoundBox(p-vec3(0.,.07,-.02), baseBox * vec3(1.,1.,.5), .3);\n        if(p.x > .8) { \/\/ left controls\n    \t\tdst = dstUnion(dst, dstJoystick(p-vec3(.98,0.,.25)), 3.);  \/\/ left stick\n        \tdst = dstUnion(dst, dstButtonGrid(p-vec3(.93,.068,0.)), 3.);  \/\/ left buttons\n            dst = dstUnion(dst, dstBox(p-vec3(.94,.043,-.22),vec3(.025)), 3.); \/\/ capture button\n            dst = dstUnion(dst, dstBox(p-vec3(.94,.044,.42),vec3(.025,.025,.005)), 3.); \/\/ - button\n            dst = dstUnion(dst, dstIntersect(dstBox(p-vec3(1.,0.,.44),vec3(.13,.025,.1)), intShape), 3.); \/\/ r button\n        \tvec3 q = p-vec3(.97,-.07,.37);\n            q.xz = rot2D(q.xz, .5);\n            dst = dstUnion(dst, dstIntersect(dstRoundBox(q,vec3(.1,.04,.04),.042), intShape), 3.); \/\/ zl button\n        } else if(p.x < -.8) { \/\/ right controls\n    \t\tdst = dstUnion(dst, dstJoystick(p-vec3(-.99,0.,-.1)), 3.); \/\/ right stick\n        \tdst = dstUnion(dst, dstButtonGrid(p-vec3(-1.05,.065,.2)), 3.);  \/\/ right buttons\n            dst = dstUnion(dst, dstCappedCylinder(p-vec3(-.92,.065,-.22),.03,.005), 4.); \/\/ home button\n            dst = dstUnion(dst, dstBox(p-vec3(-.92,.044,.42),vec3(.025,.025,.005)), 3.); \/\/ + button\n            dst = dstUnion(dst, dstBox(p-vec3(-.92,.044,.42),vec3(.005,.025,.025)), 3.);\n            dst = dstUnion(dst, dstIntersect(dstBox(p-vec3(-1.,0.,.44),vec3(.13,.025,.1)), intShape), 3.); \/\/ r button\n            vec3 q = p-vec3(-.97,-.07,.37);\n            q.xz = rot2D(q.xz, -.5);\n            dst = dstUnion(dst, dstIntersect(dstRoundBox(q,vec3(.1,.04,.04),.042), intShape), 3.); \/\/ zr button\n            q = p-vec3(-.97,.006,-.42);\n            q.xz = rot2D(q.xz, .525);\n            dst = dstUnion(dst, dstIntersect(dstRoundBox(q,vec3(.05,.005,.04),.022), intShape), 4.); \/\/ ir sensor\n        }\n    }\n    \/\/ end scene\n    return dst;\n}\n\nvec2 raymarch(vec3 ro, vec3 rd, in float maxDist) {\n    vec2 t = vec2(0.,-1.);\n    for(int i = 0; i < MAX_ITER; i++) {\n        vec2 d = dstScene(ro+rd*t.x);\n        if(d.x < MIN_DIST || t.x >= maxDist) {\n            t.y = d.y;\n            break;\n        }\n        \/\/ multiplied to reduce visual artefacts\n        \/\/ if anyone knows a way to avoid doing this, let me know :)\n        t.x += d.x * .5;\n    }\n    return t;\n}\n\n\/\/ source: https:\/\/iquilezles.org\/articles\/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    for( float t=mint; t < maxt; )\n    {\n        float h = dstScene(ro + rd*t).x;\n        if( h<0.001 )\n            return 0.0;\n        res = min( res, k*h\/t );\n        t += h;\n    }\n    return res;\n}\n\nvec3 calcNormal(vec3 p, float t) {\n    vec2 e = vec2(MIN_DIST*t,0.);\n    vec3 n = vec3(dstScene(p+e.xyy).x-dstScene(p-e.xyy).x,\n                  dstScene(p+e.yxy).x-dstScene(p-e.yxy).x,\n                  dstScene(p+e.yyx).x-dstScene(p-e.yyx).x);\n    return normalize(n);\n}\n\nvoid calcLighting(vec3 p, vec3 n, vec3 rd, Material mat, out vec3 col) {\n#ifndef DEBUG_NO_LIGHT\n    vec3 diff = vec3(ambientLight);\n    vec3 spec = vec3(0.);\n    \n    for(int i = 0; i < 2; i++) {\n        \/\/ calc light vector and distance\n    \tvec3 lv = (i == 0 ? lightPos1 : lightPos2) - p;\n    \tfloat ld = length(lv);\n    \tlv \/= ld;\n    \n    \t\/\/ calculate shadows\n    \tfloat shadow = softshadow(p, lv, .01, ld, 8.);\n    \n    \t\/\/ calculate lighting\n    \tfloat ndotl = max(dot(n,lv),0.);\n    \tdiff += ndotl * shadow * lightIntensity;\n    \tif(dot(mat.specular,mat.specular) > 0.) {\n        \tvec3 h = normalize(lv - rd);\n        \tfloat ndoth = max(dot(n,h),0.);\n        \tspec += mat.specular * pow(ndoth, mat.shininess) * shadow * lightIntensity;\n    \t}\n    }\n        \n    \/\/ output final colour\n    col = mat.albedo * diff + spec + mat.emission;\n#else\n    col = mat.albedo + mat.emission;\n#endif\n}\n\nvec3 shade(vec3 ro, vec3 rd) {\n    vec3 col = vec3(0.);\n    float coeff = 1.;\n    \n    for(int i = 0; i < REFL_COUNT; i++) {\n    \tvec2 scn = raymarch(ro, rd, MAX_DIST);\n    \n    \tif(scn.y > -1. && scn.x < MAX_DIST) {\n        \tvec3 p = ro + rd * scn.x;\n        \tvec3 n = calcNormal(p, scn.x);\n            \n#ifndef DEBUG_SHOW_NORMALS\n            vec3 a = vec3(0.);\n            \n        \tMaterial mat;\n        \tgetMaterial(mat, p, n, scn);\n        \tcalcLighting(p, n, rd, mat, a);\n        \n            if(i == 0) {\n                coeff *= 1.-saturate((scn.x-5.) \/ 7.5);\n            }\n            \n        \tif(mat.reflectivity > 0.) {\n            \tfloat fres = 1.-clamp(pow(max(-dot(rd,n),0.),.4),0.,1.);\n            \tfres *= mat.reflectivity;\n                \n                col += a * coeff * (1. - fres);\n                coeff *= fres;\n                \n                vec3 r = normalize(reflect(rd,n));\n                ro = p + r * .01;\n                rd = r;\n            } else {\n                col += a * coeff;\n                break;\n            }\n#else\n        \tcol = n * .5 + .5;\n        \tbreak;\n#endif\n        } else if(i > 0) {\n            col += texture(iChannel2, rd).xyz * coeff;\n            break;\n        } else {\n            break;\n        }\n    }\n    \n    \n    \/\/ post processing\n    \/\/col = pow(col, vec3(1.));\n    col = ACESFilm(col);\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - iResolution.xy * .5) \/ iResolution.y;\n    vec3 ro = vec3(0.,1.2,0.);\n    vec3 rd = vec3(uv, 1.);\n  \n    cameraPos(ro, iTime * .06, iMouse, iResolution.xy);\n    lookAt(vec3(0.,0.,0.), ro, vec3(0.,1.,0.), rd);\n    \n    fragColor.xyz = shade(ro, normalize(rd));\n    fragColor.w   = 1.;\n}\n\n\/\/------------------------------------------------------------------------------------------------\/\/\n\nvoid getMaterial(inout Material mat, in vec3 p, in vec3 n, in vec2 t) {\n    if(t.y == 0.) { \/\/ ground material\n        vec4 tex = texture(iChannel0, p.xz \/ 3.5);\n        mat.albedo = tex.xyz;\n        mat.specular = vec3(.2 + .7 * tex.x);\n        mat.shininess = 10. + 50. * tex.y;\n        mat.reflectivity = .8;\n    } else if(t.y == 1.) { \/\/ switch body\n        p.yz = rot2D(p.yz, consoleRot);\n        float screen = step(0.,dstBox2D(p.xz, vec2(.73,.43))-.03);\n        if(screen < .5 && p.y > .05) {\n        \tfloat innerScreen = step(0.,dstBox2D(p.xz, vec2(.67,.38)));\n            mat.albedo   = mix(vec3(0.), vec3(.1), innerScreen);\n        \tmat.emission = mix(texture(iChannel1,(p.xz*vec2(.7,1.3))+vec2(.5,.5)).xyz, vec3(0.), innerScreen);\n        } else {\n            mat.albedo = rgb(38,38,38);\n        }\n        mat.specular = vec3(mix(1.,.4,screen));\n        mat.shininess = mix(60.,30.,screen);\n        mat.reflectivity = 1. - .9 * screen;\n    } else if(t.y == 2.) { \/\/ joycons base\n        mat.albedo = mix(rgb(247, 57, 47), rgb(46, 182, 255), step(0., p.x));\n        mat.specular = vec3(.2);\n        mat.shininess = 20.;\n        mat.reflectivity = .2;\n    } else if(t.y == 3.) { \/\/ joysticks\/buttons\n        mat.albedo = rgb(38,38,38);\n        mat.specular = vec3(.5);\n        mat.shininess = 8.;\n        mat.reflectivity = .1;\n    } else if(t.y == 4.) { \/\/ home button\n        mat.albedo = rgb(54, 53, 52);\n        mat.specular = vec3(.5);\n        mat.shininess = 8.;\n        mat.reflectivity = .1;\n    } else if(t.y == 5.) { \/\/ ir sensor\n        mat.albedo = vec3(.05);\n        mat.specular = vec3(1.);\n        mat.shininess = 80.;\n        mat.reflectivity = 1.;\n    } else { \/\/ default material\n        mat.albedo = vec3(1.,0.,1.);\n        mat.specular = vec3(0.);\n        mat.shininess = 0.;\n        mat.reflectivity = 0.;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\/\/ Nintendo Switch by jackdavenport\n\/\/ All code is free to use with credit! :)\n\/\/ Created 2019\n\n\/\/------------------------------------------------------------------------------------------------\/\/\n\/\/ Signed Distance Fields\n\/\/ Source: https:\/\/iquilezles.org\/articles\/distfunctions\nfloat dstPlane(vec3 p, vec4 plane) {\n    return dot(p,plane.xyz) - plane.w;\n}\nfloat dstBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q,0.)) + min(max(q.x,max(q.y,q.z)),0.);\n}\nfloat dstRoundBox(vec3 p, vec3 b, float r) {\n    return dstBox(p, b) - r;\n}\nfloat dstCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat dstBox2D(vec2 p, vec2 b) {\n    vec2 q = abs(p) - b;\n    return length(max(q,0.)) + min(max(q.x,q.y),0.);\n}\n\n\/\/------------------------------------------------------------------------------------------------\/\/\n\/\/ Helpful directive functions\n#define rgb(r,g,b) (vec3(r,g,b)*0.00392156862) \/* the number is 1\/255 *\/\n#define saturate(x) clamp(x,0.,1.)\n\n\/\/------------------------------------------------------------------------------------------------\/\/\n\/\/ Distance Functions\/Booleans\n\/\/ Some of these are from iq's website\n\/\/ Source: https:\/\/iquilezles.org\/articles\/distfunctions\nvec2 dstUnion(vec2 a, float bt, float bid) {\n    if(a.x < bt) return a;\n    return vec2(bt,bid);\n}\nfloat dstSubtract(float a, float b) {\n    return max(a,-b);\n}\nfloat dstIntersect(float a, float b) {\n    return max(a,b);\n}\nvec3 dstElongate(vec3 p, vec3 h) {\n    return p - clamp(p, -h, h);\n}\n\n\/\/------------------------------------------------------------------------------------------------\/\/\n\/\/ Materials\/Lighting\nstruct Material {\n    vec3 albedo;\n    vec3 specular;\n    vec3 emission;\n    float shininess;\n    float reflectivity;\n};\nvoid getMaterial(inout Material mat, in vec3 p, in vec3 n, in vec2 t);\n\n\/\/ Thanks knarkowicz!\n\/\/ Source: https:\/\/knarkowicz.wordpress.com\/2016\/01\/06\/aces-filmic-tone-mapping-curve\/\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51f;\n    float b = 0.03f;\n    float c = 2.43f;\n    float d = 0.59f;\n    float e = 0.14f;\n    return saturate((x*(a*x+b))\/(x*(c*x+d)+e));\n}\n\n\/\/------------------------------------------------------------------------------------------------\/\/\n\/\/ Math Functions\nvec2 rot2D(vec2 p, float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c,s,-s,c) * p;\n}\nfloat expFog(float dist, float density) {\n    return 1. - exp(-dist*density);\n}\n\n\/\/------------------------------------------------------------------------------------------------\/\/\n\/\/ Camera Functions\nvoid cameraPos(inout vec3 ro, in float time, in vec4 mouse, in vec2 res) {\n    if(mouse.z < .5) {\n    \tfloat theta = 3.14159 * time;\n    \tfloat s = sin(theta), c = cos(theta);\n    \tro.x = s * 2.;\n    \tro.z = -c * 2.;\n    } else {\n        float yaw = 3.14159 * 2. * (mouse.x \/ res.x);\n        float pitch = max(3.14159 * .5 * (mouse.y \/ res.y), .4);\n        \n        float sy = sin(yaw), cy = cos(yaw);\n        float sp = sin(pitch), cp = cos(pitch);\n        \n        ro.x = sy * cp * 2.;\n        ro.y = sp * 2.;\n        ro.z = -cy * cp * 2.;\n    }\n}\nvoid lookAt(in vec3 focalPoint, in vec3 eyePos, in vec3 upDir, inout vec3 rd) {\n    vec3 f = normalize(focalPoint - eyePos);\n    vec3 u = normalize(cross(f, upDir));\n    vec3 v = normalize(cross(u, f));\n    rd = mat3(u, v, f) * rd;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":6,"src":"\/media\/a\/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":24,"src":"\/media\/a\/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","ctype":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ Twisting Pylon by jackdavenport\n\/\/ All code is free to use with credit! :)\n\/\/ Created 2016\n\/\/ Link to original: https:\/\/www.shadertoy.com\/view\/XstXW7\n\n#define MAX_ITERATIONS 256\n#define MIN_DISTANCE .001\n\n#define LIGHT_COL vec3(1.)\n#define LIGHT_DIR normalize(vec3(90.,80.,-45.))\n\nstruct Ray { vec3 ori;  vec3 dir; };\nstruct Dst { float dst; int id;   };\nstruct Hit { vec3 p;    int id;   };\n    \n    \nDst dstPillar(vec3 p, vec3 pos, vec3 box) {\n        \n    p.xz = rot2D(p.xz, (iTime + p.y) * 0.785398163);\n    \n    vec3    d = abs(pos - p) - box;\n    float dst = min(max(d.x,max(d.y,d.z)), 0.) + length(max(d, 0.));\n    \n    return Dst(dst, 0);\n    \n}\n\nDst dstFloor(vec3 p, float y) {\n \n    return Dst(p.y - y, 1);\n    \n}\n\nDst dstMin(Dst a, Dst b) {\n \n    if(b.dst < a.dst) return b;\n    return a;\n    \n}\n\nDst dstScene(vec3 p) {\n \n    Dst dst = dstPillar(p, vec3(0.), vec3(.5,2.,.5));\n    dst = dstMin(dst, dstFloor(p, -2.));\n    \n    return dst;\n    \n}\n\nHit raymarch(Ray ray) {\n \n    vec3 p = ray.ori;\n    int id = -1;\n    \n    for(int i = 0; i < MAX_ITERATIONS; i++) {\n     \n        Dst scn = dstScene(p);\n        p += ray.dir * scn.dst * .75;\n        \n        if(scn.dst < MIN_DISTANCE) {\n         \n            id = scn.id;\n            break;\n            \n        }\n        \n    }\n    \n    return Hit(p,id);\n    \n}\n  \n\/\/ Shadow code from the incredible iq\n\/\/ Source: https:\/\/www.shadertoy.com\/view\/Xds3zN\nfloat softShadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<24; i++ )\n    {\n\t\tfloat h = dstScene( ro + rd*t ).dst;\n        res = min( res,32.0*h\/t );\n        t += clamp( h, 0.05, 0.50 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal(vec3 p) {\n \n    vec2 eps = vec2(.001,0.);\n    vec3   n = vec3(dstScene(p + eps.xyy).dst - dstScene(p - eps.xyy).dst,\n                   \tdstScene(p + eps.yxy).dst - dstScene(p - eps.yxy).dst,\n                   \tdstScene(p + eps.yyx).dst - dstScene(p - eps.yyx).dst);\n    return normalize(n);\n    \n}\n\nvec3 calcLighting(vec3 n, float s, Hit scn) {\n \n    float d = max(dot(LIGHT_DIR,n), 0.);\n\td *= s;\n    \n    return LIGHT_COL * d;\n    \n}\n\nvec3 getPylonDiffuse(vec3 n, float s, Hit scn) {\n \n    return calcLighting(n, s, scn);\n    \n}\n\nvec3 getFloorDiffuse(Hit scn) {\n \n    vec2 uv = mod(scn.p.xz \/ 3.5, 1.);\n    float s = softShadow(scn.p, LIGHT_DIR, .0015, 10.);\n    \n    return texture(iChannel1, uv).xyz * calcLighting(vec3(0., 1., 0.), s, scn);\n    \n}\n\nvec3 shade(Ray ray) {\n \n    Hit scn  = raymarch(ray);\n    vec3 col = texture(iChannel0, ray.dir).xyz;\n    \n    if(scn.id == 0) {\n     \n        vec3 n = calcNormal(scn.p);\n        vec3 r = reflect(ray.dir, n);\n        \n        Ray rr = Ray(scn.p + r * .001, r);\n        Hit rh = raymarch(rr);\n        \n        float sh = softShadow(scn.p, LIGHT_DIR, .0015, 10.);\n        vec3  dc = getPylonDiffuse(n, sh, scn);\n        vec3 rc  = \n            rh.id == 0 ? getPylonDiffuse(calcNormal(rh.p),softShadow(scn.p, LIGHT_DIR, .0015, 10.),rh) : \n            rh.id == 1 ? getFloorDiffuse(rh) :\n            texture(iChannel0, rr.dir).xyz;\n        \n        vec3 s = LIGHT_COL * pow(max(dot(LIGHT_DIR,r),0.), 30.) * softShadow(scn.p, LIGHT_DIR, .0015, 10.);\n        float f = mix(.1, .9, 1. - max(pow(-dot(ray.dir,n), .1), 0.));\n        return mix(dc, rc, f) + s;\n        \n        \n    } else if(scn.id == 1) {\n    \n        col = getFloorDiffuse(scn);\n    \n    }\n    \n    col = clamp(col,0.,1.); \/\/ make sure colours are clamped for texturing\n    return col;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord - iResolution.xy * .5) \/ iResolution.y;\n    \n    vec3 ori = vec3(0.,0.,-5.5);\n    vec3 dir = vec3(uv, 1.);\n    \n    vec3 col = shade(Ray(ori,dir));\n\tfragColor = vec4(col,1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}}