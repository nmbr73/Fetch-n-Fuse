{"Shader":{"ver":"0.1","info":{"id":"fdXcR4","date":"1641763743","viewed":218,"name":"Spline Idea e 2","username":"SnoopethDuckDuck","description":"e","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["e"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) \/ iResolution.y;\n\n    float x = texelFetch( iChannel0, ivec2(fragCoord), 0 ).x;\n    x = 4. * x * (1.-x);\n    x = x * x;\n    vec3 e = vec3(1.);\n    vec3 col2 = 2. * x * pal(mix(0.3, 0.35, 0.5 + 0.5 * thc(2., iTime)), e, e, e, vec3(0., 0.33, 0.66));\n    fragColor = vec4(0.06 + col2, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"vec2 P(float time) {\n    \n    \/\/ Offset y values from x values (so it doesnt just move diagonally)\n    float o = 0.01;\n    \/\/ Scale point locations to fit to screen\n    float sc = 0.8;\n    \n    \/\/ Next 4 points in sequence\n    \/\/ (bad approach - has a bottom-left bias) (does it tho?)\n    vec2 p0 = -sc * 0.5 + sc * vec2( h21(vec2(floor(time))),      h21(vec2(o + floor(time))) );\n    vec2 p1 = -sc * 0.5 + sc * vec2( h21(vec2(floor(time + 1.))), h21(vec2(o + floor(time + 1.))) );\n    vec2 p2 = -sc * 0.5 + sc * vec2( h21(vec2(floor(time + 2.))), h21(vec2(o + floor(time + 2.))) );\n    vec2 p3 = -sc * 0.5 + sc * vec2( h21(vec2(floor(time + 3.))), h21(vec2(o + floor(time + 3.))) );\n\n    float f = fract(time);\n\n    float t = 0.8;\n    mat4 M = mat4(   0,  1,     0,        0,\n                    -t,  0,     t,        0,\n                  2.*t,  t-3.,  3.-2.*t,  -t,\n                    -t,  2.-t,  t-2.,     t);\n    vec4 U = vec4(1., f, f*f, f*f*f);\n    vec4 Px = vec4(p0.x, p1.x, p2.x, p3.x);\n    vec4 Py = vec4(p0.y, p1.y, p2.y, p3.y);\n    return vec2(dot(Px, M * U), dot(Py, M * U));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) \/ iResolution.y;    \n    \n    vec2 uv2 = uv;\n   float time = 0.005 * h21(uv) + 1.8 * cos(3.5 * length(uv) + 0.5 * iTime) + 0.25 * iTime;\n    vec2 p = P(time);\n   \/\/ vec2 p2 = P(time - 0.5 * 0.1);\n    uv2 += p;\n    \n\n   \/\/ float th = pi\/4. + atan(p.y - p2.y, p.x - p2.x);\n    float th = 1. * iTime;\n    mat2 R = mat2(cos(th), sin(th), -sin(th), cos(th));\n    uv2 *= R;\n    uv2 = abs(uv2);\n\n    vec2 pt = 0.15 * (0.5 + 0.5 * ths(2., iTime)) \/ sqrt(2.) * vec2(1);\n    \/\/pt += 0.05 * vec2(cos(24. * uv.x + 4. * iTime), sin(24. * uv.y + 4. * iTime));\n    float d = length(uv2 - pt);\n    \n    float k = 2. \/ iResolution.y;\n    float s = smoothstep(-k, k, -d + 0.025);\n    float x = texelFetch( iChannel0, ivec2(fragCoord), 0 ).x;\n    x = 0.985 * clamp(x, 0., 1.);\n    s = max(x, s);\n    \/*\n    float d = length(uv - p);\n    float k = 1. \/ iResolution.y;\n    float s = smoothstep(-k, k, -d + 0.025);\n    float x = texelFetch( iChannel0, ivec2(fragCoord), 0 ).x;\n    x = 0.98 * clamp(x, 0., 1.);\n    s = max(x, s);\n    *\/\n    \n    \/\/s = max(s, f * smoothstep(-k, k, -length(uv - p2) + 0.025));\n\n    fragColor = vec4(s);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\/\/ Collection of functions I use a lot:\n\n#define pi 3.14159\n\nfloat thc(float a, float b) {\n    return tanh(a * cos(b)) \/ tanh(a);\n}\n\nfloat ths(float a, float b) {\n    return tanh(a * sin(b)) \/ tanh(a);\n}\n\nvec2 thc(float a, vec2 b) {\n    return tanh(a * cos(b)) \/ tanh(a);\n}\n\nvec2 ths(float a, vec2 b) {\n    return tanh(a * sin(b)) \/ tanh(a);\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nfloat mlength(vec2 uv) {\n    return max(abs(uv.x), abs(uv.y));\n}\n\n\n","name":"Common","description":"","type":"common"}]}}