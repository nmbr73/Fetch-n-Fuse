--- Serves as an input for shader toys that need a shadertoy texture
--


-- ----------------------------------------------------------------------------------------------------------------------------------------

FuRegisterClass("ST_Texture_nmbr73", CT_SourceTool, {
    REGS_Name = "Toy Texture",
	  REGS_Category = "Fuses",
    REGS_OpDescription = "A texture input for Shadertoy fuses",
	  REGS_OpIconString = "toytex",
    REG_Source_GlobalCtrls = true,
    REG_Source_SizeCtrls = true,
    REG_Source_AspectCtrls = true,
	  REG_TimeVariant = true,
	  REGS_Company = "nmbr73",
	  REGS_URL = "https://nmbr73.github.io/",
	  REG_Version	= 000001,
    REG_Fuse_NoEdit = true,
    REG_Fuse_NoReload = true,
    })


TEXTURES = {}
CURRENT = 0
MEDIAFOLDER = [[/Users/nmbr73/Projects/Fetch-n-Fuse/Assets/Textures/]]
DUMMYTHUMB  = ''
ERRORTHUMB  = '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'
TEXTUREIMG  = nil



function getInfo(index)

  if index==0 then
    return '<p align="right">Make sure to have downloaded and transformed all the files needed (good luck) and set the path in this Fuse\'s source code accordingly. Then you should be able to use the different textures by just coosing one them from the select box above.</p>'
  end

  local info = TEXTURES[index]


  return
       -- '<p align="right">'..info['name']..'<br />by <font color="#ffffff">shadertoy</font></p>' ..
          '<p align="right">'..info['width']..' x '..info['height']..'<br />'..
          info['channels']..' channels, uint8<br />'..(info['suffix']=='jpg' and 'jpeg' or info['suffix'])..' image</p>'

end

function getPreview(index)

  local dat = ''

  if index==0 then
    dat = DUMMYTHUMB
  else
    local file = io.open(MEDIAFOLDER..TEXTURES[index]['name']..'.base64', "rb")
    if not file then
      dat = ERRORTHUMB
    else
      dat = file:read "*a"
      file:close()
    end
  end

  return '<p align="left"><img width="96" height="96" src="data:image/png;base64,'..dat..'" /></p>'

end


-------------------------------------------------------------------------------------------------------------------------------------------
-- Callback to initialize the tool.
--
function Create()

  TEXTURES = {  [0] =
    { suffix = "",    name = "",                  channels = 4, width = 73,   height = 73, },
    { suffix = "jpg", name = "Abstract 1",        channels = 3, width = 1024, height = 1024,  },
    { suffix = "jpg", name = "Abstract 2",        channels = 3, width = 512,  height = 512,   },
    { suffix = "jpg", name = "Abstract 3",        channels = 3, width = 1024, height = 1024,  },
    { suffix = "png", name = "Bayer",             channels = 1, width = 8,    height = 8,     },
    { suffix = "png", name = "Blue Noise",        channels = 4, width = 1024, height = 1024,  },
    { suffix = "png", name = "Font 1",            channels = 4, width = 1024, height = 1024,  },
    { suffix = "png", name = "Gray Noise Medium", channels = 1, width = 256,  height = 256,   },
    { suffix = "png", name = "Gray Noise Small",  channels = 1, width = 64,   height = 64,    },
    { suffix = "jpg", name = "Lichen",            channels = 3, width = 1024, height = 1024,  },
    { suffix = "jpg", name = "London",            channels = 3, width = 512,  height = 512,   },
    { suffix = "png", name = "Nyancat",           channels = 4, width = 256,  height = 32,    },
    { suffix = "jpg", name = "Organic 1",         channels = 3, width = 1024, height = 1024,  },
    { suffix = "jpg", name = "Organic 2",         channels = 3, width = 1024, height = 1024,  },
    { suffix = "jpg", name = "Organic 3",         channels = 3, width = 1024, height = 1024,  },
    { suffix = "jpg", name = "Organic 4",         channels = 3, width = 1024, height = 1024,  },
    { suffix = "png", name = "Pebbles",           channels = 1, width = 512,  height = 512,   },
    { suffix = "png", name = "RGBA Noise Medium", channels = 4, width = 256,  height = 256,   },
    { suffix = "png", name = "RGBA Noise Small",  channels = 4, width = 64,   height = 64,    },
    { suffix = "jpg", name = "Rock Tiles",        channels = 3, width = 512,  height = 512,   },
    { suffix = "jpg", name = "Rusty Metal",       channels = 3, width = 512,  height = 512,   },
    { suffix = "jpg", name = "Stars",             channels = 3, width = 512,  height = 512,   },
    { suffix = "jpg", name = "Wood",              channels = 3, width = 1024, height = 1024,  },
  }

  local options = {}

  for i,item in pairs(TEXTURES) do
    -- print("insert no "..i.." = "..item['name'])
    table.insert(options,{ CCS_AddString = item['name'] })
  end


  InTextureCombo = self:AddInput( "Texture", "texture", {
      LINKID_DataType = "Number",
      INPID_InputControl = "ComboControl",
      INP_DoNotifyChanged = false,
      INP_Default = 0,
      INP_Integer = true,
      options
      })

  InTextureInfo = self:AddInput( getInfo(0),"info", {
      LINKID_DataType = "Text",
      INPID_InputControl = "LabelControl",
      LBLC_MultiLine = true,
      IC_NoReset = true,
      INP_External = false,
      INP_Passive = true,
      IC_NoLabel = true,
      ICD_Width =0.6,

  })

  InTexturePreview = self:AddInput( getPreview(0), "preview", {
      LINKID_DataType = "Text",
      INPID_InputControl = "LabelControl",
      LBLC_MultiLine = true,
      IC_NoReset = true,
      INP_External = false,
      INP_Passive = true,
      IC_NoLabel = true,
      ICD_Width =0.4,
  })

  OutImage   = self:AddOutput( "Output", "Output", {
    LINKID_DataType = "Image",
    LINK_Main = 1
  })

end



-------------------------------------------------------------------------------------------------------------------------------------------
-- Callback to render the node.
--
function Process(req)

  local selected  = InTextureCombo:GetValue(req).Value


  if CURRENT~=selected then

    CURRENT=selected

    -- print("current="..CURRENT..", selected="..selected)

    InTextureInfo:SetAttrs({LINKS_Name = getInfo(CURRENT)})
    InTexturePreview:SetAttrs({LINKS_Name = getPreview(CURRENT)})

    TEXTUREIMG = nil

    if CURRENT > 0 then

      --local fname = MEDIAFOLDER..'a/'..TEXTURES[CURRENT]['name']..'.'..TEXTURES[CURRENT]['suffix']
      local fname = MEDIAFOLDER..TEXTURES[CURRENT]['name']..'.'..TEXTURES[CURRENT]['suffix']

      if not bmd.fileexists(fname) then
        print("no such file '"..fname.."'")
      else
        local clip = Clip(fname,false)
        TEXTUREIMG = clip:GetFrame(0)
      end

    end
  end


  if TEXTUREIMG~=nil then
    OutImage:Set(req,TEXTUREIMG)
    return
  end


  local width  = 73
  local height = 73
  local depth  = nil



  local dst = Image({
    IMG_Document = self.Comp,
    { IMG_Channel = "Red",    },
    { IMG_Channel = "Green",  },
    { IMG_Channel = "Blue",   },
    { IMG_Channel = "Alpha",  },
    IMG_Width   = width,
    IMG_Height  = height,
    IMG_XScale  = 1.0,
    IMG_YScale  = 1.0,
    -- IMAT_OriginalWidth =  width,
    -- IMAT_OriginalHeight = height,
    -- IMG_Quality = not req:IsQuick(),
    -- IMG_MotionBlurQuality = not req:IsNoMotionBlur(),
    -- IMG_DeferAlloc = true,
    -- IMG_ProxyScale = ( (not req:IsStampOnly()) and 1 or nil),
    -- IMG_Depth = ( (SourceDepth~=0) and SourceDepth or nil   )
  })


  local black  = Pixel({R=0,G=0,B=0,A=0})

  dst:Fill(black)

  if req:IsPreCalc() then
    local out = Image({IMG_Like = dst, IMG_NoData = true})
    OutImage:Set(req, out)
    return
  end

  -- Output our result
  OutImage:Set(req,dst)

end



-------------------------------------------------------------------------------------------------------------------------------------------
-- Callback to handle UI control events.
--

-- function NotifyChanged(inp, param, time)
-- 	if inp ~= nil and param ~= nil then
-- 		if (inp == InTextureCombo) then
--       -- print("selected: "..param.Value)
--     end
-- 	end
-- end
