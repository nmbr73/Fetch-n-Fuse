{"Shader":{"ver":"0.1","info":{"id":"7sVBRd","date":"1658750701","viewed":103,"name":"Cloudy Could Call","username":"leon","description":"atmospherically unbreathable ","likes":8,"published":3,"flags":32,"usePreview":0,"tags":["noise","tunnel","cloud"],"hasliked":0},"renderpass":[{"inputs":[{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\n\/\/ Cloudy Could Call\n\/\/\n\/\/ - inadequat volumetric rendering\n\/\/ - incorrect ambient occlusion\n\/\/ - blue noise cache-mis\u00e8re\n\/\/ - chiaroscuro simulacrum\n\/\/ - nimitz protean clouds wannabe\n\/\/\n\/\/ \"Atmosph\u00e8re ! Atmosph\u00e8re ! Est-ce que j'ai une gueule d'atmosph\u00e8re ?\"\n\/\/ - Arletty (1938)\n\n\/\/ Buffer A : cloud rendering\n\/\/ Buffer B : temporal anti aliasing\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord\/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":14854,"src":"\/media\/a\/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\n\/\/ global\nfloat noise;\n\n\/\/ spicy fbm gyroid noise\nfloat gyroid (vec3 seed) { return dot(sin(seed),cos(seed.yzx)); }\nfloat fbm (vec3 seed) {\n    float result = 0.;\n    float a = .5;\n    for (int i = 0; i < 6; ++i) {\n        seed.z -= iTime*.1+result*.1;\n        result += abs(gyroid(seed\/a))*a;\n        a \/= 2.;\n    }\n    return result;\n}\n\n\/\/ signed distance function\nfloat map(vec3 p)\n{\n    noise = fbm(p*.5);\n    float dist = -length(p.xy)+2. - noise*noise;\n    return dist*.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec3 color = vec3(0);\n    \n    \/\/ coordinates\n    vec2 uv = (fragCoord-iResolution.xy\/2.)\/iResolution.y;\n    vec3 pos = vec3(0,0,5);\n    vec3 ray = normalize(vec3(uv,-1));\n    \n    \/\/ animated blue noise by Alan Wolfe\n    \/\/ https:\/\/www.shadertoy.com\/view\/XsVBDR\n    const float c_goldenRatioConjugate = 0.61803398875;\n    vec4 rng = texture(iChannel0, fragCoord \/ vec2(1024.0));\n    rng = fract(rng + float(iFrame%256) * c_goldenRatioConjugate);\n    \n    \/\/ raymarch\n    float maxDist = 10.;\n    const float count = 20.;\n    float total = 0.;\n    float dense = 0.;\n    for (float steps = count; steps > 0.; --steps) {\n        float dist = map(pos);\n        dist *= 0.7+0.3*rng.x;\n        \/\/ sort of volumetric march\n        if (dist < .1*rng.z) {\n            dense += .2;\n            dist = .02;\n        }\n        total += dist;\n        if (dense >= 1. || total > maxDist) break;\n        pos += ray * dist;\n    }\n    \n    \/\/ cloud color\n    float n = noise;\n    #define getAO(dir,k) smoothstep(-k,k,map(pos+dir*k)-map(pos-dir*k))\n    float ao = getAO(vec3(0,0,1),(.1*rng.x+.1));\n    color = .5+.5*cos(vec3(1,2,3)*.5+ao+pos.z*.3-uv.y);\n    color *= .2+.8*n;\n    \n    fragColor = vec4(color, 1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/ Temporal Anti Aliasing from:\n\/\/ https:\/\/www.elopezr.com\/temporal-aa-and-the-quest-for-the-holy-trail\/\n\n\/\/ but only the color clamping...\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec3 color = texture(iChannel0, uv).rgb;\n    vec3 temporal = texture(iChannel1, uv).rgb;\n    vec3 minColor = vec3(9999.), maxColor = vec3(-9999.);\n    for(int x = -1; x <= 1; ++x){\n        for(int y = -1; y <= 1; ++y){\n            vec3 c = texture(iChannel0, uv + vec2(x, y) \/ iResolution.xy).rgb;\n            minColor = min(minColor, c);\n            maxColor = max(maxColor, c);\n        }\n    }\n    temporal = clamp(temporal, minColor, maxColor);\n    fragColor.rgb = mix(color, temporal, 0.9);\n    fragColor.a = 1.0;\n}","name":"Buffer B","description":"","type":"buffer"}]}}