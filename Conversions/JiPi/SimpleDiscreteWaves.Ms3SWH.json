{"Shader":{"ver":"0.1","info":{"id":"Ms3SWH","date":"1459029486","viewed":1502,"name":"Simple discrete waves","username":"sibaku","description":"Just some very basic waves for testing and to play around with. Click to add some splashes. You can also create obstacles. More instructions at the top of the shader","likes":13,"published":3,"flags":48,"usePreview":0,"tags":["2d","waves","relaxation"],"hasliked":0},"renderpass":[{"inputs":[{"id":8,"src":"\/media\/a\/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","ctype":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ **************************** INFO ***************************************\n\/\/\n\/\/\n\/\/ Click (Hold) the left mouse button to create waves (perform some action)\n\/\/ \n\/\/ Pressing 'c' on your keyboard will change your action. \n\/\/ The actions are as follows:\n\/\/\n\/\/ 1. Waves\n\/\/\t\t- Creates waves in free regions\n\/\/ 2. Block\n\/\/\t\t- Blocks a small area -> Waves will splash against it\n\/\/ 3. Clear\n\/\/\t\t- Clears both blocks and waves in a small area\n\/\/ \n\/\/ The default action is 'Waves'\n\/\/\n\/\/\n\/\/ Holding down 'a' on your keyboard increases the area affected by your mouse\n\/\/ \n\/\/ Pressing 'r' on your keyboard resets everything\n\/\/\n\/\/\n\/\/\n\/\/ *************************************************************************\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n  \n        vec2 uv = fragCoord.xy \/ iResolution.xy;\n    \tvec4 vals = texture(iChannel1,uv);\n    \n    \t\n        vec2 delta = vec2(1.,1.)\/ iChannelResolution[1].xy;\n        \n        vec3 offset = vec3(delta.x,delta.y,0.);\n        \n    \n   \n    \tvec4 fxp = texture(iChannel1,uv + offset.xz);\n        vec4 fxm = texture(iChannel1,uv - offset.xz);\n        \n        vec4 fyp = texture(iChannel1,uv + offset.zy);\n        vec4 fym = texture(iChannel1,uv - offset.zy);\n        \n    \t\/\/ partial derivatives d\/dx, d\/dy\n    \tfloat dx = fxp.y - fxm.y;\n    \tfloat dy = fyp.y - fym.y;\n\t\t\n    \t\/\/ partials in 3d space\n    \t\n    \tvec3 fx = vec3(2.,0.,dx);\n    \tvec3 fy = vec3(0.,2.,dy);\n    \t\n    \n    \tvec3 n = normalize(cross(fx,fy));\n    \n    \tvec3 campos = vec3(0.5,0.5,200.);\n    \tvec3 p = vec3(uv,0.);\n    \n    \tvec3 v = campos - p;\n    \n        vec3 l = normalize(vec3(10.,70.,400.));\n    \n    \tvec3 h = normalize(l + v);\n    \n    \tfloat specular = pow(max(0.,dot(h,n)),16.);\n    \n    \tvec3 r = refract(-v,n,1.\/1.35);\n    \t\/\/ very simple hacky refraction\n    \tvec2 roffset = 10.* vals.y*normalize(r.xy - n.xy)\/iChannelResolution[2].xy;\n    \n    \tvec3 color = texture(iChannel2,uv + roffset).xyz;\n    \n    \tfloat block = 1. - vals.w;\n    \t\n    \tcolor*= block;\n   \n    \tfloat factor = clamp(max(dot(n,l),0.) + specular + 0.2,0.,1.);\n    \tfragColor = vec4(color*factor,1.);\n \n\t\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":15,"src":"\/media\/a\/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","ctype":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ **************************** INFO ***************************************\n\/\/\n\/\/\n\/\/ Click (Hold) the left mouse button to create waves (perform some action)\n\/\/ \n\/\/ Pressing 'c' on your keyboard will change your action. \n\/\/ The actions are as follows:\n\/\/\n\/\/ 1. Waves\n\/\/\t\t- Creates waves in free regions\n\/\/ 2. Block\n\/\/\t\t- Blocks a small area -> Waves will splash against it\n\/\/ 3. Clear\n\/\/\t\t- Clears both blocks and waves in a small area\n\/\/ \n\/\/ The default action is 'Waves'\n\/\/\n\/\/\n\/\/ Holding down 'a' on your keyboard increases the area affected by your mouse\n\/\/ \n\/\/ Pressing 'r' on your keyboard resets everything\n\/\/\n\/\/\n\/\/\n\/\/ *************************************************************************\n\nconst float c = 0.5;\nconst int STATE_WAVES = 0;\nconst int STATE_BLOCK = 10;\nconst int STATE_CLEAR = 20;\n\nbool isPressed(int key)\n{\n    float val = texture( iChannel2, vec2( (float(key)+0.5)\/256.0, 0.25 ) ).x;\n\treturn val > 0.5;\n}\n\nbool isToggled(int key)\n{\n    float val = texture( iChannel2, vec2( (float(key)+0.5)\/256.0, 0.75 ) ).x;\n\treturn val > 0.5;\n}\n\n\n\/\/ Not the greatest way, I guess, but works... not sure yet how to use the keyboard\n\/\/ more nicely\nint getState(float state)\n{\n    bool change = isToggled(67);\n    \n    int iState = int(state);\n    bool lastToggle = iState -100 >= 0;\n    \n    iState = iState - int(lastToggle)*100;\n    \n    \n    change = change != lastToggle;\n    if(!change)\n    {\n    \treturn iState;\n    }\n    else if(iState == STATE_WAVES)\n    {\n        return STATE_BLOCK;\n    }\n    else if(iState == STATE_BLOCK)\n    {\n     \treturn STATE_CLEAR;   \n    }\n    else\n    {\n     \treturn STATE_WAVES;   \n    }\n}\n\nfloat setState(int state)\n{\n \treturn float(state) + 100.*float(isToggled(67));    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 delta = vec2(1.,1.)\/ iResolution.xy;\n        \n    vec3 offset = vec3(delta.x,delta.y,0.);\n    \n    vec2 uv = fragCoord.xy * delta;\n    \n    vec4 f = texture(iChannel0,uv);\n    \n    float state = f.z;\n    \n    int iState = getState(state);\n    \n    float mouseRadius = 10. + float(isPressed(65))*10.;\n    \/\/ Initial conditions\n    if(iTime < 0.5)\n    {\n        \n      \/\/ Some seed drops\n      float rand = texture(iChannel1,uv\/4.).x;\n   \n      if(rand > 0.9 ||rand < 0.05 )\n         fragColor = vec4(0.0,5.,setState(STATE_WAVES),0.0);  \n      else\n          fragColor = vec4(0.0,0.,setState(STATE_WAVES),0.0);\n    \n     \t   \n    }\n    else if(isPressed(82))\n    {\n        fragColor = vec4(0.0,0.,setState(STATE_WAVES),0.0);\n    }\n    else if(fragCoord.x == 0. || fragCoord.y == 0. || \n            fragCoord.x == iResolution.x-1. || fragCoord.y == iResolution.y -1.)\n    {\n        \/\/ Boundary conditions\n        fragColor = vec4(0.,0.,setState(iState),1.0);  \n    }\n     else if(iState == STATE_CLEAR && iMouse.w > 0. && length(fragCoord.xy - iMouse.xy) < mouseRadius)\n     {\t\n           fragColor = vec4(0.,0.,setState(iState),0.0);  \n     }\n    else if(f.w > 0.0)\n    {\n        fragColor = vec4(0.,0.,setState(iState),1.0);  \n    }\n    else if(iState == STATE_BLOCK && iMouse.w > 0. && length(fragCoord.xy - iMouse.xy) < mouseRadius)\n     {\t\n           fragColor = vec4(0.,0.,setState(iState),1.0);  \n     }\n      else if(iState == STATE_WAVES && iMouse.w > 0. && length(fragCoord.xy - iMouse.xy) < mouseRadius)\n     {\t\n         \tfloat dist = length(fragCoord.xy - iMouse.xy);\n           fragColor = vec4(f.y,40.*exp(-0.001*dist*dist),setState(iState),0.0);  \n     }\n    else\n    {\n        \n        \n        vec2 mouse = iMouse.xy *delta;\n\n       \n        \/\/ Sample stuff for derivatives\n        vec4 fxp = texture(iChannel0,uv + offset.xz);\n        vec4 fxm = texture(iChannel0,uv - offset.xz);\n        \n        vec4 fyp = texture(iChannel0,uv + offset.zy);\n        vec4 fym = texture(iChannel0,uv - offset.zy);\n        \n        \/\/ Discrete wave pde\n        \/\/ Taken from http:\/\/www.mtnmath.com\/whatrh\/node66.html\n        float ft = c*c*(fxp.y + fxm.y + fyp.y + fym.y - 4.0*f.y) - f.x + 2.0*f.y;\n        \n        \/\/ x = value at t-1, y = value at t, z = state, w = blocked\n        \/\/ Little bit of damping so everything settles down\n\t\tfragColor = vec4(vec2(f.y,ft)*0.995,setState(iState),0.0);\n    }\n        \n        \n\t\n    \n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/ **************************** INFO ***************************************\n\/\/\n\/\/\n\/\/ Click (Hold) the left mouse button to create waves (perform some action)\n\/\/ \n\/\/ Pressing 'c' on your keyboard will change your action. \n\/\/ The actions are as follows:\n\/\/\n\/\/ 1. Waves\n\/\/\t\t- Creates waves in free regions\n\/\/ 2. Block\n\/\/\t\t- Blocks a small area -> Waves will splash against it\n\/\/ 3. Clear\n\/\/\t\t- Clears both blocks and waves in a small area\n\/\/ \n\/\/ The default action is 'Waves'\n\/\/\n\/\/\n\/\/ Holding down 'a' on your keyboard increases the area affected by your mouse\n\/\/ \n\/\/ Pressing 'r' on your keyboard resets everything\n\/\/\n\/\/\n\/\/\n\/\/ *************************************************************************\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ Binomial filter\n    \n    vec2 delta = vec2(1.,1.)\/ iChannelResolution[0].xy;\n        \n    vec3 offset = vec3(delta.x,delta.y,0.);\n    \n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    vec4 col = vec4(0.);\n    \n    \n    col += texture(iChannel0,uv + vec2(-delta.x,delta.y));\n    col += 2.*texture(iChannel0,uv + vec2(0.,delta.y));\n    col += texture(iChannel0,uv + vec2(delta.x,delta.y));\n    \n    col += 2.*texture(iChannel0,uv + vec2(-delta.x,0.));\n    col += 4.*texture(iChannel0,uv);\n    col += 2.*texture(iChannel0,uv + vec2(delta.x,0.));\n    \n    col += texture(iChannel0,uv + vec2(-delta.x,-delta.y));\n    col += 2.*texture(iChannel0,uv + vec2(0.,-delta.y));\n    col += texture(iChannel0,uv + vec2(delta.x,-delta.y));\n    \n    fragColor = col\/16.;\n}","name":"Buf B","description":"","type":"buffer"}]}}