{
 "ver": "0.1",
 "info": {
  "id": "md33WB",
  "date": "0",
  "viewed": 0,
  "name": "GreenFieldDiorama JiPi",
  "description": "Raymarched Green Field diorama with stylized shading and \"clay-like\" deformations.",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "raymarching",
   "stylized",
   "corner",
   "diorama",
   "clay"
  ],
  "hasliked": 0,
  "parentid": "7dSGW1",
  "parentname": "Green Field Diorama"
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "XsXGR8",
     "filepath": "/media/previz/buffer01.png",
     "type": "buffer",
     "channel": 1,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "\n\n\nvec3 aces_tonemap(vec3 color){\t\n\tmat3 m1 = mat3(\n        0.59719, 0.07600, 0.02840,\n        0.35458, 0.90834, 0.13383,\n        0.04823, 0.01566, 0.83777\n\t);\n\tmat3 m2 = mat3(\n        1.60475, -0.10208, -0.00327,\n        -0.53108,  1.10813, -0.07276,\n        -0.07367, -0.00605,  1.07602\n\t);\n\tvec3 v = m1 * color;    \n\tvec3 a = v * (v + 0.0245786) - 0.000090537;\n\tvec3 b = v * (0.983729 * v + 0.4329510) + 0.238081;\n\treturn pow(clamp(m2 * (a / b), 0.0, 1.0), vec3(1.0 / 2.2));\t\n}\n\nvec3 bloomTile(float lod, vec2 offset, vec2 uv)\n{\n    return textureLod(iChannel1, uv * exp2(-lod) + offset, 0.0).rgb;\n}\n\nvec3 getBloom(vec2 uv)\n{\n    vec3 blur = vec3(0.0);\n    vec2 lOffsetFix = vec2(0.00025, 0.0005);\n    blur = pow(bloomTile(2., vec2(0.0, 0.0) + lOffsetFix, uv),vec3(2.2))       \t   \t+ blur;\n    blur = pow(bloomTile(3., vec2(0.3, 0.0) + lOffsetFix, uv),vec3(2.2)) * 1.3        + blur;\n    blur = pow(bloomTile(4., vec2(0.0, 0.3) + lOffsetFix, uv),vec3(2.2)) * 1.6        + blur;\n    blur = pow(bloomTile(5., vec2(0.1, 0.3) + lOffsetFix, uv),vec3(2.2)) * 1.9 \t   \t+ blur;\n    blur = pow(bloomTile(6., vec2(0.2, 0.3) + lOffsetFix, uv),vec3(2.2)) * 2.2 \t   \t+ blur;\n\n    return blur * BLOOM_RANGE;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n\t\n    vec4 col = texture(iChannel0, uv);\n    //col.rgb += pow(getBloom(uv), vec3(2.2));\n    col.rgb += getBloom(uv);\n    col.rgb = aces_tonemap(col.rgb);\n    \n    fragColor = vec4(col.rgb, 1.0);\n    //fragColor = vec4(pow(col.aaa  * 0.1, vec3(2.0)), 1.0);\n}",
   "name": "Image",
   "description": "",
   "type": "image"
  },
  {
   "inputs": [],
   "outputs": [],
   "code": "//--------------------------------------\n// CONFIG\n//--------------------------------------\n\n#define ANIMATE_WATER 1\n\n//Bloom\n#define BLOOM_SIZE (0.5)\n#define BLOOM_THRESHOLD (1.01)\n#define BLOOM_RANGE (0.3)\n#define BLOOM_FRAME_BLEND (0.2)\n\n//--------------------------------------\n// DEFINES & CONSTANTS\n//--------------------------------------\n\n//utility defines\n#define ZERO   (min(1,0))\n#define X_AXIS vec3(1,0,0)\n#define Y_AXIS vec3(0,1,0)\n#define Z_AXIS vec3(0,0,1)\n\n#define PI 3.14159265\n#define TAU (2*PI)\n#define PHI (sqrt(5)*0.5 + 0.5)\n\n// Materials\n#define MAT_WOOD  101\n#define MAT_LEAFS 102\n#define MAT_GROUND 201\n#define MAT_GRASS 202\n#define MAT_UNDERWATER 301\n#define MAT_BONE 401\n#define MAT_FRUIT 501\n#define MAT_PLANT 701\n#define MAT_STONE 801\n\n//--------------------------------------\n// TYPES\n//--------------------------------------\n\n\n//--------------------------------------\n// UTILITY FUNCTIONS\n//--------------------------------------\nmat3 rotation(vec3 axis, float angle)\n{\n    //axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return inverse(mat3(oc * axis.x * axis.x + c, \n                        oc * axis.x * axis.y - axis.z * s,  \n                        oc * axis.z * axis.x + axis.y * s, \n                        oc * axis.x * axis.y + axis.z * s,  \n                        oc * axis.y * axis.y + c,           \n                        oc * axis.y * axis.z - axis.x * s,  \n                        oc * axis.z * axis.x - axis.y * s,  \n                        oc * axis.y * axis.z + axis.x * s,  \n                        oc * axis.z * axis.z + c));\n}\n\n//--------------------------------------\n// BASIC SDFs SHAPES\n// https://iquilezles.org/articles/distfunctions\n//--------------------------------------\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdCone(vec3 p, vec3 a, vec3 b, float ra, float rb)\n{\n    float rba  = rb-ra;\n    float baba = dot(b-a,b-a);\n    float papa = dot(p-a,p-a);\n    float paba = dot(p-a,b-a)/baba;\n    float x = sqrt( papa - paba*paba*baba );\n    float cax = max(0.0,x-((paba<0.5)?ra:rb));\n    float cay = abs(paba-0.5)-0.5;\n    float k = rba*rba + baba;\n    float f = clamp( (rba*(x-ra)+paba*baba)/k, 0.0, 1.0 );\n    float cbx = x-ra - f*rba;\n    float cby = paba - f;\n    float s = (cbx < 0.0 && cay < 0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(cax*cax + cay*cay*baba,\n                       cbx*cbx + cby*cby*baba) );\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r ) // approximated\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat udTriangle( vec3 p, vec3 a, vec3 b, vec3 c )\n{\n  vec3 ba = b - a; vec3 pa = p - a;\n  vec3 cb = c - b; vec3 pb = p - b;\n  vec3 ac = a - c; vec3 pc = p - c;\n  vec3 nor = cross( ba, ac );\n\n  return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(ac,nor),pc))<2.0)\n     ?\n     min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\n//--------------------------------------\n// SDF BLEND & DOMAIN REPETITION\n// https://mercury.sexy/hg_sdf/\n//--------------------------------------\n\n//HG\nfloat fOpUnionRound(float a, float b, float r) \n{\n\tvec2 u = max(vec2(r - a,r - b), vec2(0));\n\treturn max(r, min (a, b)) - length(u);\n}\n\nfloat pModPolar(inout vec2 p, float repetitions) \n{\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a/angle);\n\ta = mod(a,angle) - angle/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\t// For an odd number of repetitions, fix cell index of the cell in -x direction\n\t// (cell index would be e.g. -5 and 5 in the two halves of the cell):\n\tif (abs(c) >= (repetitions/2.)) c = abs(c);\n\treturn c;\n}\n\n// Repeat in two dimensions\nvec2 pMod2(inout vec2 p, vec2 size) {\n\tvec2 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5,size) - size*0.5;\n\treturn c;\n}\n\n// Same, but mirror every second cell so all boundaries match\nvec2 pModMirror2(inout vec2 p, vec2 size) {\n\tvec2 halfsize = size*0.5;\n\tvec2 c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\tp *= mod(c,vec2(2))*2.0 - vec2(1.0);\n\treturn c;\n}\n\nfloat fOpIntersectionRound(float a, float b, float r)\n{\n\tvec2 u = max(vec2(r + a,r + b), vec2(0));\n\treturn min(-r, max (a, b)) + length(u);\n}\n\nfloat fOpDifferenceRound (float a, float b, float r)\n{\n\treturn fOpIntersectionRound(a, -b, r);\n}\n\n//IQ\nfloat opSmoothUnion( float d1, float d2, float k ) \n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\n\n//--------------------------------------\n// SDF FIGURES\n//--------------------------------------\nfloat treeTrunk(vec3 pos)\n{\n    float r = 1e10;\n    \n    //trunk stem\n    r =  sdCone(pos, vec3(0.0), vec3(0.0,0.35,0.0), 0.12, 0.1 );\n    \n    // repeat ellpisoids for roots\n    vec3 rootsDomain = pos;\n    pModPolar(rootsDomain.xz, 5.);\n    r = fOpUnionRound(r, sdEllipsoid(rootsDomain - vec3(0.1, 0.01, 0.0), vec3(0.09, 0.04, 0.04)), 0.04);\n   \n    //displacement\n    r += sin(30.*pos.x)*sin(30.*pos.y)*sin(30.*pos.z) * 0.01;   \n   \n    return r;\n}\n\nfloat treeLeafs(vec3 pos)\n{\n    float r = 1e10;\n    \n    //pos += (noise(pos * 200.0) - 0.5) * 2.0 * 0.001;\n    \n    //sphere piramid\n    vec3 leafsDomain = pos - vec3(0., 0.42, 0.);\n\n    float blend = 0.12;\n    pModPolar(leafsDomain.xz, 3.);\n    r = min(r, sdSphere(leafsDomain - vec3(0.16, 0.0, 0.0), 0.22));\n    //r = opSmoothUnion(r, sdSphere(leafsDomain - vec3(-0.08, 0.00, 0.14), 0.22), blend);\n    //r = opSmoothUnion(r, sdSphere(leafsDomain - vec3(-0.09, 0.00, -0.14), 0.22), blend);\n    \n    r = min(r, sdSphere(pos - vec3(0.0, 0.62, 0.0), 0.22));\n    //r = opSmoothUnion(r, sdSphere(pos - vec3(0.0, 0.50, 0.0), 0.36), blend);\n    \n    //leaf displacement\n    r += sin(20.*pos.x)*sin(20.*pos.y)*sin(20.*pos.z) * 0.01;\n        \n    return r + 0.02;\n}\n\nfloat grassStems(vec3 pos, float grassMask)\n{\n    float r = 1e10;\n    //noise pattern approach, (DISCARDED)\n    //float noisePattern = noise(vec3(pos.xz, 0.0) * 300.0);\n    //r = sdBox( pos - vec3( 0.0, 0.02, 0.0), vec3(0.6,0.05,0.6) );\n    //r += step(0.5, noisePattern) * 0.001;\n    \n    float distortion = (sin(20.*pos.x)*sin(30.*pos.y)*sin(20.*pos.z)+cos(30.*pos.x)*cos(35.*pos.z)) * 0.012;\n    grassMask += distortion * 0.8;\n    float area = fOpDifferenceRound(sdBox( pos - vec3( 0.0, -0.03, 0.0), vec3(0.58,0.02,0.58) ), grassMask - 0.03, 0.03) -0.04;\n    \n    //pos.y += 0.01;\n    \n    //grass stem CONE (DISCARDED)\n    //vec2 id = pMod2(pos.xz, vec2(0.02, 0.02));\n    //r =  sdCone(pos, vec3(sin(id.y * 12.34)*cos(id.x*23.0)*0.007, 0., sin(id.x * 12.34)*0.008), \n    //                 vec3(sin(id.y * 30.54)*0.008, 0.04 + 0.02*((sin(id.x* 1.23)*cos(id.y*20.0) + 0.5) * 2.0),0.0), 0.003, 0.001 );\n    \n    //triangle stem alternative (DISCARDED)\n    //r = udTriangle( pos - vec3(sin(id.y * 12.34)*0.015, 0., sin(id.x * 12.34)*0.012),\n    //                      vec3(-0.005, 0., sin(id.x * 2.34)*0.005), \n    //                      vec3(0.005, 0.,  sin(id.y * 1.34)*0.005), \n    //                      vec3(sin(id.y * 52.34)*0.002, 0.05, sin(id.x * 32.34)*0.002) );\n    //r = opSmoothUnion(r, sdBox( pos - vec3( 0.0, -0.05, 0.0), vec3(0.6,0.035,0.6)) - 0.02, 0.01);\n    \n    \n    r = min(r, sdBox( pos - vec3( 0.0, -0.07, 0.0), vec3(0.6,0.04,0.6) - 0.04) - 0.02) ;\n    r = max(r, (area - distortion))- 0.04;\n    \n    float remover = sdBox( pos - vec3( 0.0, -0.12, 0.0), vec3(0.7,0.1,0.7) - 0.02);\n    //remover = max(remover, grassMask - distortion);\n    remover -= distortion;\n    \n    r = fOpDifferenceRound(area, remover, 0.02);\n    \n    return r;\n    //return grassMask + 0.03;\n}\n\nfloat treeFruits(vec3 pos)\n{\n    float r = 1e10;\n    //vec3 fruitPos = pos - vec3(-0.32, 0.45, -0.31);\n    //fruitPos = rotation(Y_AXIS, PI*0.25) * fruitPos;\n    //pModPolar(fruitPos.xy, 3.);\n    //fruitPos -= vec3(0.15, 0.0, 0.01);\n    //pModPolar(fruitPos.zy, 2.);\n    //fruitPos -= vec3(0.1, 0.0, 0.15);\n    \n    //pModPolar(fruitPos.xy, 2.);\n    //fruitPos -= vec3(0.02, 0.0, -0.1);\n    //r = sdSphere(fruitPos , 0.04);\n    \n    \n    //fruit that... works...\n    //r =        sdSphere(pos - vec3(-0.25, 0.45, -0.0),  0.04);\n    //r = min(r, sdSphere(pos - vec3(-0.46, 0.4,   0.02), 0.04));\n    //r = min(r, sdSphere(pos - vec3(-0.46, 0.8,  -0.28), 0.04));\n    //r = min(r, sdSphere(pos - vec3(-0.3,  0.4,  -0.62), 0.04));\n    //r = min(r, sdSphere(pos - vec3(-0.55, 0.4,  -0.55), 0.04));\n    //r = min(r, sdSphere(pos - vec3(0.04,  0.34, -0.28), 0.04));\n    \n    //new fruit ?\n    //r =        sdSphere(pos - vec3(-0.26, 0.45, -0.03),  0.08);\n    \n    return r;\n}\n\n//--------------------------------------\n// MAIN SDF \n//--------------------------------------\nvec2 map(in vec3 pos)\n{\n    vec2 res = vec2( 1e10, 0.0 );\n#   define opMin(_v, _m)    res = (_v < res.x) ? vec2(_v, _m) : res\n\n    float substrate = sdBox( pos - vec3( 0.0, -0.15, 0.0), vec3(0.6,0.15,0.6) );\n    float waterCavity = sdEllipsoid(pos - vec3(0.65, -0.02, 0.35), vec3(0.5, 0.2, 0.6));\n          waterCavity = opSmoothUnion(waterCavity, sdEllipsoid(pos - vec3(0.28, -0.02, 0.65), vec3(0.4, 0.2, 0.4)), 0.08);\n          waterCavity -= sin(20.*pos.x)*sin(30.*pos.y)*sin(20.*pos.z) * 0.012;\n    substrate = fOpDifferenceRound(substrate, waterCavity, 0.07);\n    //substrate = max(substrate, -waterCavity);\n    \n    opMin(substrate, MAT_GROUND);\n    \n    \n    float underWater = max(res.x , waterCavity - 0.03 );\n    //res.x += 0.001;\n    res = (underWater < (res.x + 0.0001)) ? vec2(underWater, MAT_UNDERWATER) : res;\n    //opMin(underWater, MAT_UNDERWATER);\n    \n    opMin(grassStems(pos, waterCavity), MAT_GRASS);\n    \n    vec3 treePos = pos - vec3( -0.3, 0.028, -0.3);\n    float treeTrunkDist = treeTrunk( treePos );\n    opMin(treeTrunkDist, MAT_WOOD);\n    float fruitsDist = treeFruits(pos);\n    float leafsDist = treeLeafs( treePos );\n    opMin(leafsDist, MAT_LEAFS);\n    opMin(fruitsDist, MAT_FRUIT);\n    \n    //Rocks\n    float rock = sdEllipsoid(pos - vec3(0.3, 0.06, -0.3), vec3(0.09, 0.09, 0.07));\n          rock = min(rock, sdEllipsoid(pos - vec3(0.26, 0.06, -0.38), vec3(0.04, 0.055, 0.04)));\n          rock = min(rock, sdEllipsoid(pos - vec3(-0.28, 0.04, 0.38), vec3(0.06, 0.055, 0.055)));\n    rock += sin(30.*pos.x)*sin(30.*pos.y + 5.5)*sin(28.*pos.z) * 0.02;\n    opMin(rock, MAT_STONE);\n    \n    //Bone\n    //float bone = 0;\n    \n    //water test\n    //opMin(sdBox( pos - vec3( 0.25, -0.16, 0.15), vec3(0.35,0.13,0.45) ), 0);\n    \n    //res.x -= 0.005;\n    return res;\n}\n\nfloat gTime = 0.0;\nfloat mapWaterVolume(vec3 pos)\n{   \n    float baseBox = sdBox( pos - vec3( 0.18, -0.17, 0.15), vec3(0.4,0.11,0.43) );\n    float wv = baseBox;\n    //animate water\n#if defined(ANIMATE_WATER) && ANIMATE_WATER\n    vec3 offset = vec3(-gTime * 0.04 - 0.02, 0.0, gTime * 0.06 + 0.1);\n#else\n    vec3 offset = vec3(0.1);\n#endif\n    wv += (1.0 - clamp((pos.y / -0.15), 0.0, 1.0)) // affect mostly on top of the water surface\n        *( 1.0\n         * sin(-22.*(pos.x+offset.x))\n         * sin(23.*(pos.z + offset.z))\n         + sin(20.*(pos.z + offset.z + 12.5)) * 0.3\n         + cos(15.*(pos.z + 2.1 +offset.x)) * 0.2\n         + cos(-21.*(pos.x+offset.z)) *0.5\n         )* 0.015; //*sin(30.*pos.y)\n    wv -= 0.004;\n    wv = max(wv, sdBox( pos - vec3( 0.18, -0.17, 0.15), vec3(0.4,0.14,0.43) ));\n    wv -= 0.004;\n    return wv;\n}\n\n//--------------------------------------\n// RAYMARCHING \n// https://iquilezles.org/articles/rmshadows\n//--------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float tmin, in float tmax )\n{\n    // bounding volume\n    //float tp = (maxHei-ro.y)/rd.y; if( tp>0.0 ) tmax = min( tmax, tp );\n\n    float res = 1.0;\n    float t = tmin;\n    for( int i=ZERO; i<22; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        float s = clamp(8.0*h/t,0.0,1.0);\n        res = min( res, s*s*(3.0-2.0*s) );\n        t += clamp( h, 0.02, 0.10 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n#if 0\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n#else\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.0005*e).x;\n    }\n    return normalize(n);\n#endif    \n}\n\nvec3 calcNormalWater( in vec3 pos )\n{\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*mapWaterVolume(pos+0.0005*e);\n    }\n    return normalize(n); \n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.00;\n    for( int i=ZERO; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) * (0.5+0.5*nor.y);\n}\n\nvec3 calcSkyColor(vec3 aDirection)\n{\n    float t = smoothstep(0.1, 0.6, 0.5f*(aDirection.y + 1.0f));\n    return mix(vec3(0.4f, 0.4f, 0.2f), vec3(0.4f, 0.6f, 1.0f), t);\n}\n\nvec4 calcColor(int matId, vec3 pos, vec3 normal, float diffuse, float fresnel)\n{\n    vec4 FinalColor = vec4(0.1, 0.1, 0.1, 1) * diffuse;\n    if(matId == MAT_WOOD)\n    {\n        vec3 WoodBrown = vec3(0.287, 0.11882, 0.04) * 1.5;\n        vec3 WoodBrownShadow = vec3(0.1847, 0.0482, 0.016) * 1.2;\n        FinalColor.rgb = mix(WoodBrownShadow, WoodBrown, diffuse);\n        FinalColor.rgb += WoodBrown * fresnel * 2.0;\n    }\n    else if(matId == MAT_LEAFS)\n    {\n        vec3 Leafs = vec3(0.0882, 0.447, 0.04);\n        vec3 LeafsShadow = vec3(0.00582, 0.247, 0.02);\n        FinalColor.rgb = mix(LeafsShadow, Leafs, diffuse) * 0.7;\n        FinalColor.rgb += Leafs * fresnel * 2.5;\n    }\n    else if(matId == MAT_GRASS)\n    {                \n        vec3 Grass = vec3(0.0882, 0.247, 0.04);\n        vec3 GrassShadow = vec3(0.00582, 0.147, 0.02);\n        FinalColor.rgb = mix(GrassShadow, Grass, diffuse);\n        FinalColor.rgb += Grass * fresnel * 1.5;\n    }\n    else if(matId == MAT_STONE)\n    {\n        vec3 Stone = vec3(0.4, 0.4, 0.4);\n        vec3 StoneShadow = vec3(0.2, 0.2, 0.3);\n        FinalColor.rgb = mix(StoneShadow, Stone, diffuse);\n        FinalColor.rgb += Stone * fresnel * 0.5;\n    }\n    else if(matId == MAT_FRUIT)\n    {\n        vec3 Fruit = vec3(0.8, 0.1, 0.01);\n        vec3 FruitShadow = vec3(0.75, 0.1, 0.01);\n        FinalColor.rgb = mix(FruitShadow, Fruit, diffuse);\n        FinalColor.rgb += vec3(0.8, 0.5, 0.5) * fresnel * 2.5;\n    }\n    else if(matId == MAT_GROUND)\n    {\n        if(abs(dot(normal, Y_AXIS)) > 0.5)\n        {\n            vec3 Sand = vec3(0.447, 0.447, 0.04);\n            vec3 SandShadow = vec3(0.347, 0.247, 0.02);\n            FinalColor.rgb = mix(SandShadow, Sand, diffuse);\n        }\n        else \n        {\n            float axis = dot(normal, X_AXIS);\n            vec2 basePos = (abs(axis) > 0.5) ? pos.zy : pos.xy;\n            \n            //0-1 UVs based on ground block size\n            vec2 uv = basePos.xy / vec2(0.6, 0.15); \n            \n            //Adjust position\n            uv += vec2(0.0, 0.6);\n            uv += (axis > 0.5) ? vec2(-0.12, 0.0) : vec2(0.32, 0.0);\n        \t\n            //Sine\n            vec2 p = uv*2.0 - 1.0;\n            p *= 15.0;\n            float sfunc = p.y + 5.0*sin(uv.x*5.0 ) + 4.0*cos(uv.x*3.0 );\n            sfunc *= 0.01;\n            sfunc = abs(sfunc);\n            sfunc = smoothstep(0.25, 0.251, sfunc);\n            \n            //Brown mix\n            vec3 GroundBrown = mix(vec3(0.4, 0.25, 0.08), vec3(0.28, 0.15, 0.05), sfunc); // vec3(0.35, 0.18, 0.1)\n            vec3 GroundBrownShadow = GroundBrown * 0.5; // mix(vec3(0.20, 0.08, 0.04), vec3(0.12, 0.06, 0.025), sfunc); // vec3(0.35, 0.18, 0.1)\n            FinalColor.rgb = mix(GroundBrownShadow, GroundBrown, mix(0.3, 1.0, diffuse));\n            FinalColor.rgb += GroundBrown * fresnel * 0.8;\n        }\n    }\n    else if(matId == MAT_UNDERWATER)\n    {\n        vec3 Sand = vec3(0.447, 0.447, 0.04);\n        vec3 SandShadow = vec3(0.347, 0.247, 0.02);\n        FinalColor.rgb = mix(SandShadow, Sand, diffuse);\n    }\n    \n    return FinalColor;\n}\n\nvec3 castRay(vec3 ro, vec3 rd)\n{\n    vec3 res = vec3(0.0, 1e10, 0.0);\n    float tmin = 1.0;\n    float tmax = 20.0;\n    float t = tmin;\n    for( int i=0; i<70 && t<tmax; i++ )\n    {\n        vec2 h = map( ro+rd*t );\n        if( abs(h.x)<(0.0001*t) )\n        { \n            res = vec3(t, h.x, h.y); \n            break;\n        }\n        t += h.x;\n    }\n    \n    return res;\n}\n\nvec4 applyWaterVolume(vec3 ro, vec3 rd, float depth, vec4 color)\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n    float t = tmin;\n    float hit = 0.0;\n    float h = 0.0;\n    float distInsideWater = 0.0;\n    for( int i=0; i<70 && t<tmax; i++ )\n    {\n        h = mapWaterVolume( ro+rd*t );\n        if( abs(h)<(0.0001*t) )\n        { \n            distInsideWater += h;\n            hit = 1.0;\n            break;\n        }\n        else if(hit > 0.0)\n        {\n            break;\n        }\n        t += h;\n        if(depth > 0.0 && ((t + 0.0011) > depth))\n        {\n            break;\n        }\n    }\n    \n    depth = (depth > 0.0) ? depth : t*2.5;\n    \n    vec4 WaterBlue = vec4(0.1, 0.4, 1.0, color.a);\n    \n    vec3 pos = ro + rd * t;\n    vec3 lightDir = normalize( vec3(-0.5, 1.1, -0.6) );\n    float shadow = calcSoftshadow( pos, lightDir, 0.02, 2.5 );\n    vec3 normal = calcNormalWater(pos);\n    float NdL = clamp( dot( normal, lightDir ), 0.0, 1.0 );\n    vec3  hal = normalize( lightDir-rd );\n    float spe = pow( clamp( dot( normal, hal ), 0.0, 1.0),40.0)\n                    //*mix(0.5, 1.0, NdL* shadow)  //shadow\n                    //*(0.04 + 2.5*pow( clamp(1.0+dot(hal, rd),0.0,1.0), 1.0 ));\n                    ;\n    spe = smoothstep(0.5, 0.9, spe);\n    //light affecting water\n    WaterBlue = mix(WaterBlue * 0.5, WaterBlue, NdL * shadow);\n    \n    //all inside water is bluiedish\n    color = mix(color, WaterBlue * 0.8 + color * WaterBlue * 0.5, hit * 0.3);\n    \n    //distance to closest point\n    float nearest = clamp(map(pos).x, 0.0, 1.0);\n    color = mix(color, WaterBlue, clamp(pow(nearest * hit, 1.3) * 5.0, 0.0, 1.0));\n    \n    //distance to center of the diorama hack\n    color = mix(color, WaterBlue , clamp(pow(length(pos) * hit, 2.0) * 1.2, 0.0, 1.0));\n    //color = mix(color, WaterBlue * 0.5, ((t / depth)) * hit * 0.7);\n    //return vec4(mix(color.rgb, normal * 0.5 + 0.5, hit), 1.0);\n\n#define WATER_OPACITY_INIT 0.3\n#define WATER_OPACITY_COEFF 2.5\n\n    float fresnel = pow( clamp(1.0+dot(normal,rd),0.0,1.0), 2.4 );\n    color.rgb += hit*2.00*spe*vec3(1.);\n    //color = mix(color, color * exp(-(1.-WaterBlue)*(WATER_OPACITY_INIT + WATER_OPACITY_COEFF*distInsideWater)), hit);\n    color += mix(vec4(0.0), fresnel*color*2.0, hit * mix(0.2, 1.0, shadow));\n    return color;\n}\n\nvec4 render( vec2 uv, in vec3 ro, in vec3 rd, in vec3 rdx, in vec3 rdy )\n{ \n    //vec4 finalColor = vec4(0.042); //vec4(calcSkyColor(rd), 0.0);\n    vec4 finalColor = vec4(calcSkyColor(rd), 0.0);\n    vec3 res = castRay(ro,rd);\n    \n    if(res.y < 0.002)\n    {\n        vec3 lightDir = normalize( vec3(-0.5, 1.1, -0.6) );\n        vec3 pos = ro + rd * res.x;\n        vec3 normal = calcNormal(pos);\n        \n        float ao = calcAO(pos, normal);\n        float shadow = calcSoftshadow( pos, lightDir, 0.02, 2.5 );\n        float NdL = clamp( dot( normal, lightDir ), 0.0, 1.0 );\n        float fresnel = pow( clamp(1.0+dot(normal,rd),0.0,1.0), 2.4 );\n        \n        float diffuse  = shadow * NdL * 12.0;\n\n        vec4 color = calcColor(int(res.z), pos, normal, diffuse, fresnel) * mix(0.22, 1.0, ao);\n\n        finalColor = vec4(color.rgb, res.x);\n      \n        finalColor.rgb = finalColor.rgb * 0.4 + 0.6 * finalColor.rgb * calcSkyColor(normal);\n        \n        //finalColor = vec4(normal * 0.5 + 0.5, res.x);\n    }\n    \n    finalColor = applyWaterVolume(ro, rd, res.x, finalColor);\n    \n    return finalColor;\n}\n",
   "name": "Common",
   "description": "",
   "type": "common"
  },
  {
   "inputs": [],
   "outputs": [
    {
     "id": "4dXGR8",
     "channel": 0
    }
   ],
   "code": "\n//main raymarching\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    gTime = float(iTime);\n    vec2 mo = iMouse.xy/iResolution.xy;\n    //mo.y += 0.2;\n\tfloat time = 23.5 + iTime*1.5;\n    //float time = 23.5;\n    \n    // camera\t\n    vec3 ro = vec3( 4.6*cos(0.1*time + 12.0*mo.x),  1.2 + 3.0*mo.y, 4.6*sin(0.1*time + 12.0*mo.x) );\n    vec3 ta = vec3( 0.0, 0.14, 0.0 );\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n \n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n    // ray direction\n    vec3 rd = ca * normalize( vec3(p,6.0) );\n\n     // ray differentials (NOT USED YET)\n    vec2 px = (-iResolution.xy+2.0*(fragCoord.xy+vec2(1.0,0.0)))/iResolution.y;\n    vec2 py = (-iResolution.xy+2.0*(fragCoord.xy+vec2(0.0,1.0)))/iResolution.y;\n    vec3 rdx = ca * normalize( vec3(px,2.0) );\n    vec3 rdy = ca * normalize( vec3(py,2.0) );\n\n    // render\n    vec4 col = render( p, ro, rd, rdx, rdy );\n    \n    fragColor = col;\n}",
   "name": "Buffer A",
   "description": "",
   "type": "buffer"
  },
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 1,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "XsXGR8",
     "filepath": "/media/previz/buffer01.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "XsXGR8",
     "channel": 0
    }
   ],
   "code": "//Pyramid Bloom\n//https://www.shadertoy.com/view/lsBfRc\n\nvec3 makeBloom(float lod, vec2 offset, vec2 bCoord, vec2 aPixelSize)\n{\n    offset += aPixelSize;\n\n    float lodFactor = exp2(lod);\n\n    vec3 bloom = vec3(0.0);\n    vec2 scale = lodFactor * aPixelSize;\n\n    vec2 coord = (bCoord.xy-offset)*lodFactor;\n    float totalWeight = 0.0;\n\n    if (any(greaterThanEqual(abs(coord - 0.5), scale + 0.5)))\n        return vec3(0.0);\n\n    for (int i = -3; i < 3; i++) \n    {\n        for (int j = -3; j < 3; j++) \n        {\n            float wg = pow(1.0-length(vec2(i,j)) * 0.125, 6.0); //* 0.125, 6.0\n            vec3 lTextureColor = textureLod(iChannel1, vec2(i,j) * scale + lodFactor * aPixelSize + coord, lod).rgb;\n            lTextureColor = (any(greaterThan(lTextureColor, vec3(BLOOM_THRESHOLD)))) ? lTextureColor * BLOOM_SIZE : vec3(0.0);\n            lTextureColor = pow(lTextureColor, vec3(2.2)) * wg;\n            bloom = lTextureColor + bloom;\n\n            totalWeight += wg;\n            \n        }\n    }\n\n    bloom /= totalWeight;\n\n    return bloom;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 pixelSize = 1.0 / iResolution.xy;\n    vec4 lInputColor0 = texture(iChannel0, uv);\n\n    vec3 lBlur  = makeBloom(2., vec2(0.0, 0.0), uv, pixelSize);\n         lBlur += makeBloom(3., vec2(0.3, 0.0), uv, pixelSize);\n         lBlur += makeBloom(4., vec2(0.0, 0.3), uv, pixelSize);\n         lBlur += makeBloom(5., vec2(0.1, 0.3), uv, pixelSize);\n         lBlur += makeBloom(6., vec2(0.2, 0.3), uv, pixelSize);\n\n        vec4 lOutputColor = vec4(clamp(pow(lBlur, vec3(1.0 / 2.2)), vec3(0), vec3(100)), 1.0);\n        fragColor = mix(lInputColor0, lOutputColor, BLOOM_FRAME_BLEND); \n}",
   "name": "Buffer B",
   "description": "",
   "type": "buffer"
  }
 ]
}