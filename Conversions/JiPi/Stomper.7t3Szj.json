{"Shader":{"ver":"0.1","info":{"id":"7t3Szj","date":"1639392925","viewed":179,"name":"Stomper","username":"dr2","description":"A stomper's job is never done...","likes":17,"published":3,"flags":0,"usePreview":0,"tags":["randomness","kinematics"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"id":37,"channel":0}],"code":"\/\/ \"Stomper\" by dr2 - 2021\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec2 Hashv2f (float p);\nfloat Fbm2 (vec2 p);\n\nvec3 ltDir, qHit, pStomp;\nvec2 pAct, pActP;\nfloat tCur, dstFar, boxSz, tCyc, tPhs;\nint idObj;\nint idPlat = 1, idBallR = 2, idBallM = 3, idStomp = 4, idTube = 5, idGrnd = 6;\nconst float pi = 3.1415927;\n\nstruct TbCon {\n  vec3 pLo, pHi;\n  vec2 aLimCs, tRotCs[2], pRotCs[2];\n  float chLen, chDist, ang, rad;\n};\nTbCon tbCon;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, db, a;\n  dMin = dstFar;\n  q = p;\n  db = PrBox2Df (q.xz, vec2 (boxSz));\n  d = max (PrBoxDf (q, vec3 (vec2 (boxSz + 0.5), 0.5).xzy), - max (db,\n     PrCylDf (vec3 (fract (q.xz) - 0.5, q.y - 0.5), 0.4, 0.8)));\n  DMINQ (idPlat);\n  d = max (db, - PrBox2Df (q.xz - pAct, vec2 (0.5)));\n  q.xz = fract (q.xz) - 0.5;\n  d = max (PrSphDf (vec3 (q.xz, q.y - 0.15).xzy, 0.4), d);\n  DMINQ (idBallR);\n  q = p;\n  q.xz -= pAct;\n  q.y -= 0.15;\n  if (tPhs < 0.8) q.y -= 0.4 * (1. - cos (10. * pi * tCyc));\n  d = PrSphDf (q, 0.4);\n  DMINQ (idBallM);\n  q = p;\n  q -= pStomp;\n  d = min (PrCylDf (q.xzy, 0.35, 0.05), max (PrCapsDf (q.xzy, 0.1, 0.3), - q.y));\n  DMINQ (idStomp);\n  q = p;\n  q.xz -= tbCon.pLo.xz;\n  d = PrCylDf (q.xzy, 0.4, 0.5);\n  DMINQ (idPlat);\n  q.y -= 0.5;\n  d = max (PrCapsDf (q.xzy, 0.1, 0.3), - q.y);\n  DMINQ (idTube);\n  d = min (PrSphDf (p - tbCon.pLo, 0.1), PrSphDf (p - tbCon.pHi, 0.1));\n  DMINQ (idTube);\n  q = p - tbCon.pLo;\n  q.xz = Rot2Cs (q.xz, tbCon.tRotCs[0]);\n  q.yz = Rot2Cs (q.yz, tbCon.tRotCs[1]) - vec2 (tbCon.chLen, tbCon.chDist);\n  a = fract ((256. \/ tbCon.ang) * atan (q.y, - q.z) \/ (2. * pi));\n  d = max (dot (vec2 (abs (q.y), - q.z), tbCon.aLimCs), length (vec2 (length (q.yz) -\n     tbCon.rad, q.x)) - (0.1 - 0.015 * smoothstep (0.15, 0.35, 0.5 - abs (0.5 - a))));\n  DMINQ (idTube);\n  q = p;\n  d = max (q.y - 0.4, - db);\n  DMINQ (idGrnd);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.0005 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  int idObjT;\n  idObjT = idObj;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += h;\n    if (sh < 0.05) break;\n  }\n  idObj = idObjT;\n  return 0.5 + 0.5 * sh;\n}\n\n#define F(x) (sin (x) \/ x - b)\n\nfloat SecSolve (float b)\n{  \/\/ (from \"Bucking Bronco\")\n  vec3 t;\n  vec2 f;\n  float x;\n  if (b < 0.95) {\n    t.yz = vec2 (0.7, 1.2);\n    f = vec2 (F(t.y), F(t.z));\n    for (int nIt = 0; nIt < 4; nIt ++) {\n      t.x = (t.z * f.x - t.y * f.y) \/ (f.x - f.y);\n      t.zy = t.yx;\n      f = vec2 (F(t.x), f.x);\n    }\n    x = t.x;\n  } else if (b < 1.) {\n    x = sqrt (10. * (1. - sqrt (1. - 1.2 * (1. - b))));\n  } else {\n    x = 0.;\n  }\n  return x;\n}\n\nvoid SetConf ()\n{\n  vec3 vp;\n  float tubeLen;\n  boxSz = 4.;\n  tCyc = tCur \/ 2. + 1.;\n  tPhs = fract (tCyc);\n  pAct = floor (boxSz * (2. * Hashv2f (1.11 + 17.33 * floor (tCyc)) - 1.)) + 0.5;\n  pActP = floor (boxSz * (2. * Hashv2f (1.11 + 17.33 * floor (tCyc - 1.)) - 1.)) + 0.5;\n  if (tPhs < 0.8) {\n    pStomp.xz = mix (pActP, pAct, tPhs \/ 0.8);\n    pStomp.y = 1.7;\n  } else {\n    pStomp.xz = pAct;\n    pStomp.y = mix (0.5, 2., max (2. * abs (tPhs - 0.9) \/ 0.1 - 1., 0.));\n  }\n  tbCon.pLo = vec3 (1.5 * boxSz, 0.9, 0.);\n  tbCon.pHi = pStomp;\n  tbCon.pHi.y += 0.4;\n  vp = tbCon.pHi - tbCon.pLo;\n  tbCon.chLen = 0.5 * length (vp);\n  tbCon.tRotCs[0] = sin (atan (vp.x, vp.z) + vec2 (0.5 * pi, 0.));\n  tbCon.tRotCs[1] = sin (- asin (length (vp.xz) \/ length (vp)) + vec2 (0.5 * pi, 0.));\n  tubeLen = 1.4 * boxSz;\n  tbCon.ang = SecSolve (tbCon.chLen \/ tubeLen);\n  tbCon.chDist = tbCon.chLen \/ tan (tbCon.ang);\n  tbCon.rad = length (vec2 (tbCon.chDist, tbCon.chLen));\n  tbCon.aLimCs = sin (- tbCon.ang + vec2 (0.5 * pi, 0.));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  float dstObj, sh, nDotL;\n  SetConf ();\n  dstObj = ObjRay (ro, rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObj == idPlat) {\n      col4 = vec4 (0.5, 0.2, 0., 0.2);\n    } else if (idObj == idGrnd) {\n      col4 = vec4 (0.5, 0.2, 0., 0.2) * (0.8 + 0.2 * Fbm2 (4. * ro.xz));\n    } else if (idObj == idBallR) {\n      col4 = vec4 (0., 1., 0., 0.2);\n      if (PrBox2Df (ro.xz - pActP, vec2 (0.5)) < 0.) col4 = mix (vec4 (1., 0., 0., 0.2) *\n         (0.7 + 0.3 * sin (16. * pi * tCur)), col4, smoothstep (0.2, 0.6, tPhs));\n    } else if (idObj == idBallM) {\n      col4 = vec4 (1., 0., 0., 0.2);\n      if (tPhs > 0.9) col4 = vec4 (0.7, 0.5, 0., 0.2);\n    } else if (idObj == idStomp) {\n      col4 = mix (vec4 (1., 1., 1., 0.2), vec4 (0., 0., 1., -1.),\n         smoothstep (0., 0.02, length (qHit.xz) - 0.25));\n    } else if (idObj == idTube) {\n      col4 = vec4 (1., 1., 1., 0.2);\n    }\n    if (idObj == idBallR || idObj == idBallM) col4 *= 0.7 + 0.3 * smoothstep (0., 0.02,\n       abs (length (qHit.xz) - 0.2) - 0.02);\n    if (col4.a >= 0.) {\n      nDotL = max (dot (vn, ltDir), 0.);\n      if (idObj == idTube) nDotL *= nDotL;\n      sh = ObjSShadow (ro + 0.01 * vn, ltDir);\n      col = col4.rgb * (0.2 + 0.8 * sh * nDotL) +\n         col4.a * step (0.95, sh) * pow (max (dot (ltDir, reflect (rd, vn)), 0.), 32.);\n      col *= 1. - 0.9 * smoothstep (0.2, 0.3, length (ro.xz) \/ dstFar);\n    } else col = col4.rgb * (0.5 + 0.5 * max (- dot (rd, vn), 0.));\n  } else {\n    col = vec3 (0.1);\n  }\n  return clamp (col, 0., 1.);\n}\n\n#define AA  0   \/\/ optional antialiasing\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv;\n  float el, az, zmFac, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ canvas - 0.5;\n  az = 0.;\n  el = -0.2 * pi;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  el = clamp (el, -0.4 * pi, -0.13 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = vuMat * vec3 (0., 1., -30.);\n  zmFac = 5.5;\n  dstFar = 60.;\n  ltDir = vuMat * normalize (vec3 (1., 1., -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 \/ canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. \/ naa) * ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. \/ 1.9375);\n}\n","name":"Image","description":"","type":"image"}]}}