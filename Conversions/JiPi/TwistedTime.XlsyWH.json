{"Shader":{"ver":"0.1","info":{"id":"XlsyWH","date":"1504632295","viewed":563,"name":"Twisted Time","username":"dr2","description":"Shows day, date and time, with a twist (mouse enabled)","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["voronoi","font","calendar"],"hasliked":0},"renderpass":[{"inputs":[{"id":49,"src":"\/media\/a\/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","ctype":"texture","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ \"Twisted Time\" by dr2 - 2017\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txFnt iChannel0\n\nfloat PrTorusDf (vec3 p, float ri, float rc);\nvoid DTimeSet (vec4 d);\nint GetTxChar (int _nc);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec3 HsvToRgb (vec3 c);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\n\nvec4 dateCur;\nvec3 sunDir, vnCylIn;\nvec2 gVec[7], hVec[7], fntSize, qnFnt, qnTxt;\nfloat dstFar, tCur, grDep, rngBlk, bCylRad, bCylHt, dCylIn, dCylOut;\nint idTxt;\nivec3 inm[2];\nivec2 idt[6];\nconst float pi = 3.14159;\n\nvoid CylHit (vec3 ro, vec3 rd)\n{\n  vec3 s;\n  float a, ai, b, w, ws, srdy;\n  dCylIn = dstFar;\n  dCylOut = dstFar;\n  vnCylIn = vec3 (0.);\n  a = dot (rd.xz, rd.xz);\n  b = dot (rd.xz, ro.xz);\n  w = b * b - a * (dot (ro.xz, ro.xz) - bCylRad * bCylRad);\n  if (w > 0.) {\n    ws = sqrt (w);\n    srdy = sign (rd.y);\n    if (a > 0.) {\n      ai =  1. \/ a;\n      dCylIn = (- b - ws) * ai;\n      dCylOut = (- b + ws) * ai;\n    }\n    if (a > 0.) s = ro + dCylIn * rd;\n    else s.y = bCylHt;\n    if (abs (s.y) < bCylHt) vnCylIn.xz = s.xz \/ bCylRad;\n    else if (srdy * ro.y < - bCylHt) {\n      dCylIn = - (srdy * ro.y + bCylHt) \/ abs (rd.y);\n      if (length (ro.xz + dCylIn * rd.xz) < bCylRad) vnCylIn.y = - srdy;\n      else dCylIn = dstFar;\n    } else dCylIn = dstFar;\n    if (dCylIn < dstFar) {\n      if (a > 0.) s = ro + dCylOut * rd;\n      else s.y = bCylHt;\n      if (abs (s.y) > bCylHt && srdy * ro.y < bCylHt)\n         dCylOut = (- srdy * ro.y + bCylHt) \/ abs (rd.y);\n    }\n  }\n}\n\nfloat FontTexDf (vec2 p)\n{\n  vec3 tx;\n  ivec2 ip;\n  float d;\n  int ic;\n  ic = 0;\n  ip = ivec2 (floor (p));\n  if (ip.x == 0 && ip.y == 0) ic = GetTxChar (idTxt);\n  if (ic != 0) {\n    tx = texture (txFnt, mod ((vec2 (mod (float (ic), 16.),\n       15. - floor (float (ic) \/ 16.)) + fract (p)) * (1. \/ 16.), 1.)).gba - 0.5;\n    qnFnt = vec2 (tx.r, - tx.g);\n    d = tx.b + 1. \/ 256.;\n  } else d = 1.;\n  return d;\n}\n\nfloat ObjRayT (vec3 ro, vec3 rd)\n{\n  vec3 p, rdi;\n  vec2 srd, h;\n  float dHit, dLim, d;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  srd = - sign (rd.xy);\n  rdi = 1. \/ abs (rd.xyz);\n  dHit = 0.;\n  dLim = rngBlk;\n  ro.xy \/= fntSize.x;\n  rd.xy \/= fntSize.x;\n  ro.xy += 0.5;\n  for (int j = 0; j < 150; j ++) {\n    p = ro + dHit * rd;\n    h = rdi.xy * fract (srd * p.xy);\n    d = max (min (fntSize.x, 1.) * FontTexDf (p.xy), abs (p.z) - 0.5 * fntSize.y);\n    dHit += min (d, 0.01 + fntSize.x * min (h.x, h.y));\n    if (d < 0.0001 || dHit > dLim) break;\n  }\n  if (d >= 0.0001) dHit = dstFar;\n  return dHit;\n}\n\nfloat BlkHit (vec3 ro, vec3 rd, vec3 bSize)\n{\n  vec3 v, tm, tp;\n  float dMin, dn, df;\n  if (rd.x == 0.) rd.x = 0.001;\n  if (rd.y == 0.) rd.y = 0.001;\n  if (rd.z == 0.) rd.z = 0.001;\n  v = ro \/ rd;\n  tp = bSize \/ abs (rd) - v;\n  tm = - tp - 2. * v;\n  dn = max (max (tm.x, tm.y), tm.z);\n  df = min (min (tp.x, tp.y), tp.z);\n  dMin = dstFar;\n  if (df > 0. && dn < df) {\n    dMin = dn;\n    rngBlk = df - dn;\n  }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  q = p;\n  q.y = abs (q.y) - bCylHt;\n  return PrTorusDf (q.xzy, 0.02, bCylRad);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy),\n     ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\n#define SQRT3 1.73205\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1.\/SQRT3) * p.x - (1.\/3.) * p.y, (2.\/3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (SQRT3 * (h.x + 0.5 * h.y), (3.\/2.) * h.y);\n}\n\nvoid HexVorInit ()\n{\n  vec3 e = vec3 (1., 0., -1.);\n  gVec[0] = e.yy;\n  gVec[1] = e.xy;\n  gVec[2] = e.yx;\n  gVec[3] = e.xz;\n  gVec[4] = e.zy;\n  gVec[5] = e.yz;\n  gVec[6] = e.zx;\n  for (int k = 0; k < 7; k ++) hVec[k] = HexToPix (gVec[k]);\n}\n\nvec4 HexVor (vec2 p)\n{\n  vec4 sd, udm;\n  vec2 ip, fp, d, u;\n  float amp, a;\n  amp = 0.7;\n  ip = PixToHex (p);\n  fp = p - HexToPix (ip);\n  sd = vec4 (4.);\n  udm = vec4 (4.);\n  for (int k = 0; k < 7; k ++) {\n    u = Hashv2v2 (ip + gVec[k]);\n    a = 2. * pi * (u.y - 0.5);\n    d = hVec[k] + amp * (0.4 + 0.6 * u.x) * vec2 (cos (a), sin (a)) - fp;\n    sd.w = dot (d, d);\n    if (sd.w < sd.x) {\n      sd = sd.wxyw;\n      udm = vec4 (d, u);\n    } else sd = (sd.w < sd.y) ? sd.xwyw : ((sd.w < sd.z) ? sd.xyww : sd);\n  }\n  sd.xyz = sqrt (sd.xyz);\n  return vec4 (SmoothMin (sd.y, sd.z, 0.3) - sd.x, udm.xy, Hashfv2 (udm.zw));\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec4 vc;\n  vec3 vn, col;\n  float s;\n  if (rd.y >= 0.) {\n    rd.y += 0.0001;\n    ro.z += 2. * tCur;\n    col = mix (vec3 (0.1, 0.2, 0.4), vec3 (1.),\n       clamp (0.1 + 0.8 * Fbm2 (0.05 * (ro.xz + rd.xz * (100. - ro.y) \/ rd.y)) * rd.y, 0., 1.));\n  } else {\n    ro -= ((grDep + ro.y) \/ rd.y) * rd;\n    vc = HexVor (2.5 * ro.zx);\n    s = step (0.06 + 0.03 * vc.w, vc.x);\n    col = mix (vec3 (0.8), HsvToRgb (vec3 (37. * vc.w, 0.7, 1.)) *\n       (1. - 0.05 * step (0.5, Fbm2 (15. * ro.xz))), s);\n    vn = VaryNf (15. * ro, vec3 (0., 1., 0.), 2. - 1.8 * s);\n    col *= (0.1 + 0.9 * max (dot (vn, sunDir), 0.)) *\n       (1. - 0.003 * length (ro.xz));\n    col = mix (col, vec3 (0.2, 0.3, 0.5), pow (1. + rd.y, 5.));\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, qtTxt, tro, trd, trdd, q, qt, ds;\n  float dstTxt, dstBlk, dstObj, db, d, ang, angTxt, angRot, aTw, rad, twFac, sdTxt;\n  fntSize = vec2 (1.7, 0.6);\n  HexVorInit ();\n  dstTxt = dstFar;\n  tro = ro;\n  trd = rd;\n  rad = 7.;\n  bCylRad = rad + 0.6 * fntSize.x;\n  bCylHt = 1.3 * fntSize.y;\n  dstObj = ObjRay (ro, rd);\n  CylHit (ro, rd);\n  if (dCylIn < dstFar) {\n    twFac = 3.;\n    angRot = 0.05 * pi * tCur;\n    aTw = angRot * twFac;\n    tro.xz = Rot2D (tro.xz, angRot);\n    trd.xz = Rot2D (trd.xz, angRot);\n    for (float k = 0.; k < 50.; k ++) {\n      idTxt = int (mod (k, 25.));\n      ang = 2. * pi * (1. - k \/ 50.);\n      qt = - vec3 (rad * sin (ang), 0., rad * cos (ang));\n      q = tro - qt;\n      q.xz = Rot2D (q.xz, ang);\n      q.yz = Rot2D (q.yz, twFac * ang + aTw);\n      trdd = trd;\n      trdd.xz = Rot2D (trdd.xz, ang);\n      trdd.yz = Rot2D (trdd.yz, twFac * ang + aTw);\n      db = BlkHit (q, trdd, vec3 (0.5 * fntSize.x, 0.55 * fntSize.x, 0.55 * fntSize.y));\n      if (db < dstFar) {\n        d = db + ObjRayT (q + db * trdd, trdd);\n        if (d < dstTxt) {\n          dstTxt = d;\n          qtTxt = qt;\n          angTxt = ang;\n          qnTxt = qnFnt;\n          sdTxt = floor (k \/ 25.);\n        }\n      }\n    }\n  }\n  if (dstTxt < min (dstObj, dstFar)) {\n    tro += trd * dstTxt;\n    ds = tro - qtTxt;\n    ds.xz = Rot2D (ds.xz, angTxt);\n    ds.yz = Rot2D (ds.yz, twFac * angTxt + aTw);\n    if (abs (ds.z) < 0.49 * fntSize.y) {\n      vn = normalize (vec3 (qnTxt, 0.00001));\n      col = vec3 (0.8, 0.8, 1.);\n    } else {\n      vn = vec3 (0., 0., sign (ds.z));\n      col = (sdTxt == 0.) ? vec3 (1., 0.3, 0.3) : vec3 (1., 1., 0.);\n    }\n    vn.yz = Rot2D (vn.yz, - twFac * angTxt - aTw);\n    vn.xz = Rot2D (vn.xz, - angRot - angTxt);\n    col = col * (0.2 + 0.8 * max (dot (sunDir, vn), 0.)) +\n       0.5 * pow (max (dot (normalize (sunDir - rd), vn), 0.), 128.);\n    col = mix (col, BgCol (tro, reflect (rd, vn)), 0.7 - 0.5 * abs (dot (rd, vn)));\n  } else if (dstObj < min (dstTxt, dstFar)) {\n    vn = ObjNf (ro + dstObj * rd);\n    col = vec3 (0.2, 0.5, 0.7) * (0.2 + 0.8 * max (dot (sunDir, vn), 0.)) +\n       0.5 * pow (max (dot (normalize (sunDir - rd), vn), 0.), 128.);\n  } else col = BgCol (ro, rd);\n  if (dCylIn < dstFar) {\n    col = mix (col,  vec3 (1.) * (0.2 + 0.8 * max (dot (sunDir, vnCylIn), 0.) +\n       0.5 * pow (max (dot (normalize (sunDir - rd), vnCylIn), 0.), 128.)), 0.15);\n    col = mix (col, BgCol (ro + dCylIn * rd,\n       reflect (rd, vnCylIn)), pow (1. - abs (dot (rd, vnCylIn)), 4.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, col;\n  vec2 canvas, uv, ori, ca, sa;\n  float el, az;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iTime;\n  dateCur = iDate;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ canvas - 0.5;\n  az = 0.;\n  el = 0.08 * pi * sin (0.1 * pi * tCur);\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += 0.4 * pi * mPtr.y;\n  }\n  el = clamp (el, -0.2 * pi, 0.1 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, 2.1));\n  ro = vuMat * vec3 (0., 0., -14.);\n  sunDir = vuMat * normalize (vec3 (0.5, 1., -1.));\n  dstFar = 100.;\n  grDep = 5.;\n  DTimeSet (dateCur);\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (clamp (col, 0., 1.), 1.);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\n#define C(c) c\n\n#define _SP    C(0x20)\n#define _EXCL  C(0x21)\n#define _QUOT  C(0x22)\n#define _NUM   C(0x23)\n#define _DOLLR C(0x24)\n#define _PCENT C(0x25)\n#define _AMP   C(0x26)\n#define _SQUOT C(0x27)\n#define _LPAR  C(0x28)\n#define _RPAR  C(0x29)\n#define _AST   C(0x2A)\n#define _PLUS  C(0x2B)\n#define _COMMA C(0x2C)\n#define _MINUS C(0x2D)\n#define _PER   C(0x2E)\n#define _SLASH C(0x2F)\n#define _0     C(0x30)\n#define _1     C(0x31)\n#define _2     C(0x32)\n#define _3     C(0x33)\n#define _4     C(0x34)\n#define _5     C(0x35)\n#define _6     C(0x36)\n#define _7     C(0x37)\n#define _8     C(0x38)\n#define _9     C(0x39)\n#define _COLON C(0x3A)\n#define _SEMI  C(0x3B)\n#define _LT    C(0x3C)\n#define _EQUAL C(0x3D)\n#define _GT    C(0x3E)\n#define _QUEST C(0x3F)\n#define _AT    C(0x40)\n#define _A     C(0x41)\n#define _B     C(0x42)\n#define _C     C(0x43)\n#define _D     C(0x44)\n#define _E     C(0x45)\n#define _F     C(0x46)\n#define _G     C(0x47)\n#define _H     C(0x48)\n#define _I     C(0x49)\n#define _J     C(0x4A)\n#define _K     C(0x4B)\n#define _L     C(0x4C)\n#define _M     C(0x4D)\n#define _N     C(0x4E)\n#define _O     C(0x4F)\n#define _P     C(0x50)\n#define _Q     C(0x51)\n#define _R     C(0x52)\n#define _S     C(0x53)\n#define _T     C(0x54)\n#define _U     C(0x55)\n#define _V     C(0x56)\n#define _W     C(0x57)\n#define _X     C(0x58)\n#define _Y     C(0x59)\n#define _Z     C(0x5A)\n#define _LSQB  C(0x5B)\n#define _BSLSH C(0x5C)\n#define _RSQB  C(0x5D)\n#define _CARET C(0x5E)\n#define _USCOR C(0x5F)\n#define _GRAVE C(0x60)\n#define _a     C(0x61)\n#define _b     C(0x62)\n#define _c     C(0x63)\n#define _d     C(0x64)\n#define _e     C(0x65)\n#define _f     C(0x66)\n#define _g     C(0x67)\n#define _h     C(0x68)\n#define _i     C(0x69)\n#define _j     C(0x6A)\n#define _k     C(0x6B)\n#define _l     C(0x6C)\n#define _m     C(0x6D)\n#define _n     C(0x6E)\n#define _o     C(0x6F)\n#define _p     C(0x70)\n#define _q     C(0x71)\n#define _r     C(0x72)\n#define _s     C(0x73)\n#define _t     C(0x74)\n#define _u     C(0x75)\n#define _v     C(0x76)\n#define _w     C(0x77)\n#define _x     C(0x78)\n#define _y     C(0x79)\n#define _z     C(0x7A)\n#define _LBRC  C(0x7B)\n#define _VBAR  C(0x7C)\n#define _RBRC  C(0x7D)\n#define _TILDE C(0x7E)\n\nivec3 MName (int i)\n{\n  ivec3 m;\n  if      (i == 0)  m = ivec3 (_J, _a, _n);\n  else if (i == 1)  m = ivec3 (_F, _e, _b);\n  else if (i == 2)  m = ivec3 (_M, _a, _r);\n  else if (i == 3)  m = ivec3 (_A, _p, _r);\n  else if (i == 4)  m = ivec3 (_M, _a, _y);\n  else if (i == 5)  m = ivec3 (_J, _u, _n);\n  else if (i == 6)  m = ivec3 (_J, _u, _l);\n  else if (i == 7)  m = ivec3 (_A, _u, _g);\n  else if (i == 8)  m = ivec3 (_S, _e, _p);\n  else if (i == 9)  m = ivec3 (_O, _c, _t);\n  else if (i == 10) m = ivec3 (_N, _o, _v);\n  else if (i == 11) m = ivec3 (_D, _e, _c);\n  return m;\n}\n\nivec3 DName (int i)\n{\n  ivec3 d;\n  if      (i == 0)  d = ivec3 (_S, _u, _n);\n  else if (i == 1)  d = ivec3 (_M, _o, _n);\n  else if (i == 2)  d = ivec3 (_T, _u, _e);\n  else if (i == 3)  d = ivec3 (_W, _e, _d);\n  else if (i == 4)  d = ivec3 (_T, _h, _u);\n  else if (i == 5)  d = ivec3 (_F, _r, _i);\n  else if (i == 6)  d = ivec3 (_S, _a, _t);\n  return d;\n}\n\nint DWk (vec3 ymd)\n{\n  ivec3 d;\n  vec2 cy;\n  ymd.y += 1.;\n  if (ymd.y <= 2.) {\n    ymd.x -= 1.;\n    ymd.y += 12.;\n  }\n  cy = vec2 (floor (ymd.x \/ 100.), mod (ymd.x, 100.));\n  return int (mod (mod (ymd.z + floor (13. * (ymd.y + 1.) \/ 5.) + cy.y + floor (cy.y \/ 4.) +\n     floor (cy.x \/ 4.) + 5. * cy.x, 7.) + 6., 7.));\n}\n\n#define DIG2(v) _0 + ivec2 (vec2 (floor ((v) \/ 10.), mod ((v), 10.)))\n#define T(c) _ic = (_nc -- == 0) ? (c) : _ic;\n\nvoid DTimeSet (vec4 d)\n{\n  idt[0] = DIG2 (floor (d.x \/ 100.));\n  idt[1] = DIG2 (mod (d.x, 100.));\n  idt[2] = DIG2 (d.z);\n  idt[3] = DIG2 (floor (d.w \/ 3600.));\n  idt[4] = DIG2 (floor (mod (d.w, 3600.) \/ 60.));\n  idt[5] = DIG2 (floor (mod (d.w, 60.)));\n  inm[0] = MName (int (d.y));\n  inm[1] = DName (DWk (d.xyz));\n}\n\nint GetTxChar (int _nc)\n{\n  int _ic;\n  _ic = 0;\n  T(_SP) T(inm[1].x) T(inm[1].y) T(inm[1].z)T(_SP) T(idt[2].x) T(idt[2].y) T(_MINUS) \n  T(inm[0].x) T(inm[0].y) T(inm[0].z) T(_MINUS) T(idt[0].x) T(idt[0].y) T(idt[1].x) T(idt[1].y)\n  T(_SP) T(idt[3].x) T(idt[3].y) T(_COLON) T(idt[4].x) T(idt[4].y) T(_COLON) T(idt[5].x) T(idt[5].y)\n  return _ic;\n}\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  const vec2 cHashVA2 = vec2 (37.1, 61.7);\n  const vec2 e = vec2 (1., 0.);\n  return fract (sin (vec2 (dot (p + e.yy, cHashVA2),\n     dot (p + e.xy, cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. \/ 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  const vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2.\/3., 1.\/3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) \/ r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n","name":"Image","description":"","type":"image"}]}}