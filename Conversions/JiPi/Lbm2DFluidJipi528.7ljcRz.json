{
 "ver": "0.1",
 "info": {
  "id": "7ljcRz",
  "date": "0",
  "viewed": 0,
  "name": "lbm_2d_fluid JiPi 528",
  "description": "press the left mouse button to draw the wall,\npress the space bar and the left mouse button to erase",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "2d",
   "simulation",
   "fluid",
   "lbm",
   "freesurface"
  ],
  "hasliked": 0,
  "parentid": "Nl2cRR",
  "parentname": "lbm_2d_fluid"
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "XsXGR8",
     "filepath": "/media/previz/buffer01.png",
     "type": "buffer",
     "channel": 1,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "4sXGR8",
     "filepath": "/media/previz/buffer02.png",
     "type": "buffer",
     "channel": 2,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "//visualization\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    ivec2 idx = ivec2(fragCoord * 0.5);\n    //float rho = f0(iChannel0, idx);\n    float rho = RHO(iChannel1, idx);\n    float wall = Wall(iChannel2, idx);\n    vec4 color = vec4(wall,wall,wall+rho,1.);\n    fragColor=color;\n}",
   "name": "Image",
   "description": "",
   "type": "image"
  },
  {
   "inputs": [],
   "outputs": [],
   "code": "#define f0(tex,idx) (texelFetch(tex, idx*2, 0).r)\n#define f1(tex,idx) (texelFetch(tex, idx*2, 0).g)\n#define f2(tex,idx) (texelFetch(tex, idx*2, 0).b)\n#define f3(tex,idx) (texelFetch(tex, idx*2+ivec2(1,0),0).r)\n#define f4(tex,idx) (texelFetch(tex, idx*2+ivec2(1,0),0).g)\n#define f5(tex,idx) (texelFetch(tex, idx*2+ivec2(1,0),0).b)\n#define f6(tex,idx) (texelFetch(tex, idx*2+ivec2(0,1),0).r)\n#define f7(tex,idx) (texelFetch(tex, idx*2+ivec2(0,1),0).g)\n#define f8(tex,idx) (texelFetch(tex, idx*2+ivec2(0,1),0).b)\n#define RHO(tex,idx) (texelFetch(tex, idx*2+ivec2(1,1),0).r)\n#define PSI(tex,idx) (texelFetch(tex, idx*2+ivec2(1,1),0).g)\n#define Wall(tex, idx) (texelFetch(tex, idx*2,0).r)\n",
   "name": "Common",
   "description": "",
   "type": "common"
  },
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "XsXGR8",
     "filepath": "/media/previz/buffer01.png",
     "type": "buffer",
     "channel": 1,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "4sXGR8",
     "filepath": "/media/previz/buffer02.png",
     "type": "buffer",
     "channel": 2,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dXGR8",
     "channel": 0
    }
   ],
   "code": "// collision step\n\nconst float G_self = 1.2; //affects the surface tension of the liquid molecules\nconst float G_wall = 0.6; //affects the surface tension between the liquid and the wall\nconst float g = 0.005;    //gravity\nconst float k = 0.8;      //affects the viscidity 0.1~1.9\n\nbool is_wall(in ivec2 idx, in ivec2 size){\n    return (size.x < idx.x + 1) || (size.y < idx.y + 1) || (idx.x < 0) || (idx.y < 0) || (Wall(iChannel2, idx) > 0.1);\n}\n\n\nconst ivec2 off[25] = ivec2[25](\n    ivec2( 0, 0 ),\n    ivec2( 1, 0 ),ivec2( 0, -1 ),ivec2( -1, 0 ),ivec2( 0, 1 ),\n    ivec2( 1, -1 ), ivec2( -1, -1 ), ivec2( -1, 1 ), ivec2( 1, 1 ),\n    ivec2( 2, 0 ), ivec2( 0, -2 ), ivec2( -2, 0 ), ivec2( 0, 2 ),\n    ivec2( 1, -2 ), ivec2( -1, -2 ), ivec2( -1, 2 ), ivec2( 1, 2 ),\n    ivec2( 2, -1 ), ivec2( -2, -1 ), ivec2( -2, 1 ), ivec2( 2, 1 ),\n    ivec2( 2, -2 ), ivec2( -2, -2 ), ivec2( -2, 2 ), ivec2( 2, 2 )\n);\n\nconst float w[9] = float[9](\n    0., 1. / 21., 4. / 45., 0., 1. / 60., 2. / 315., 0., 0., 1. / 5040.\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 idx = ivec2(fragCoord*0.5);\n    ivec2 size = ivec2(iResolution*0.5);\n    if(idx.x >= size.x || idx.y >= size.y)\n    {\n        discard;\n    }\n\n    float f0,f1,f2,f3,f4,f5,f6,f7,f8;\n    float rho;\n\n    f0 = f0(iChannel1, idx);\n    ivec2 center = ivec2(size.x/2,size.y/3*2);\n    if( iFrame%5==1 && (f0 < 0.1) && length(vec2(center-idx))<10.) //initialisation\n    {\n        f0 = 1.;\n    }\n    else //normal time-step\n    {\n        //get f0~8 from BufferB\n        f1 = f1(iChannel1 ,idx);\n        f2 = f2(iChannel1 ,idx);\n        f3 = f3(iChannel1 ,idx);\n        f4 = f4(iChannel1 ,idx);\n        f5 = f5(iChannel1 ,idx);\n        f6 = f6(iChannel1 ,idx);\n        f7 = f7(iChannel1 ,idx);\n        f8 = f8(iChannel1 ,idx);\n        //density\n        rho = f0+f1+f2+f3+f4+f5+f6+f7+f8+1e-30;\n        //velocity\n        vec2 v1 = vec2(1./rho*(f1-f2+f5-f6-f7+f8),1./rho*(f3-f4+f5-f6+f7-f8));\n        vec2 F = vec2(0,0);\n\n        //calculate external force\n        for (int i = 1; i < 25; i++)\n        {\n            ivec2 offset = off[i];\n            ivec2 idx2 = idx + offset;\n            float psi_self = PSI(iChannel1, idx2);\n            float psi_wall = is_wall(idx2, size)?1.:0.;\n            F += (G_self * psi_self + G_wall * psi_wall) * vec2(offset) * w[offset.x * offset.x + offset.y * offset.y];\n        }\n        vec2 a = F / rho + vec2(0,-g); //gravity\n        vec2 v2 = v1 + a;\n        float max_speed = 0.57f;\n        if(length(v1) > max_speed) {\n            v1 = normalize(v1) * max_speed;\n        }\n        if(length(v2) > max_speed) {\n            v2 = normalize(v2) * max_speed;\n        }\n\n        //f_new_i = (1-k)*f_i + (k-1)*f_eq_i + f_eq_new_i\n        //f_eq_new_i = f_eq(i, v_new)\n        float sq_term = -1.5 * (v1.x*v1.x+v1.y*v1.y);\n        float f0eq = 4./9. *rho*(1. + sq_term);\n        float f1eq = 1./9. *rho*(1. + 3.*v1.x      + 4.5*v1.x*v1.x             + sq_term);\n        float f2eq = 1./9. *rho*(1. - 3.*v1.x      + 4.5*v1.x*v1.x             + sq_term);\n        float f3eq = 1./9. *rho*(1. + 3.*v1.y      + 4.5*v1.y*v1.y             + sq_term);\n        float f4eq = 1./9. *rho*(1. - 3.*v1.y      + 4.5*v1.y*v1.y             + sq_term);\n        float f5eq = 1./36.*rho*(1. + 3.*( v1.x+v1.y)+ 4.5*( v1.x+v1.y)*( v1.x+v1.y) + sq_term);\n        float f6eq = 1./36.*rho*(1. - 3.*( v1.x+v1.y)+ 4.5*( v1.x+v1.y)*( v1.x+v1.y) + sq_term);\n        float f7eq = 1./36.*rho*(1. + 3.*(-v1.x+v1.y)+ 4.5*(-v1.x+v1.y)*(-v1.x+v1.y) + sq_term);\n        float f8eq = 1./36.*rho*(1. - 3.*(-v1.x+v1.y)+ 4.5*(-v1.x+v1.y)*(-v1.x+v1.y) + sq_term);\n\n        float sq_term2 = -1.5 * (v2.x*v2.x+v2.y*v2.y);\n        float f0eq2 = 4./9. *rho*(1. + sq_term2);\n        float f1eq2 = 1./9. *rho*(1. + 3.*v2.x      + 4.5*v2.x*v2.x             + sq_term2);\n        float f2eq2 = 1./9. *rho*(1. - 3.*v2.x      + 4.5*v2.x*v2.x             + sq_term2);\n        float f3eq2 = 1./9. *rho*(1. + 3.*v2.y      + 4.5*v2.y*v2.y             + sq_term2);\n        float f4eq2 = 1./9. *rho*(1. - 3.*v2.y      + 4.5*v2.y*v2.y             + sq_term2);\n        float f5eq2 = 1./36.*rho*(1. + 3.*( v2.x+v2.y)+ 4.5*( v2.x+v2.y)*( v2.x+v2.y) + sq_term2);\n        float f6eq2 = 1./36.*rho*(1. - 3.*( v2.x+v2.y)+ 4.5*( v2.x+v2.y)*( v2.x+v2.y) + sq_term2);\n        float f7eq2 = 1./36.*rho*(1. + 3.*(-v2.x+v2.y)+ 4.5*(-v2.x+v2.y)*(-v2.x+v2.y) + sq_term2);\n        float f8eq2 = 1./36.*rho*(1. - 3.*(-v2.x+v2.y)+ 4.5*(-v2.x+v2.y)*(-v2.x+v2.y) + sq_term2);\n\n        f0 = (1. - k) * f0 + (k - 1.) * f0eq + f0eq2;\n        f1 = (1. - k) * f1 + (k - 1.) * f1eq + f1eq2;\n        f2 = (1. - k) * f2 + (k - 1.) * f2eq + f2eq2;\n        f3 = (1. - k) * f3 + (k - 1.) * f3eq + f3eq2;\n        f4 = (1. - k) * f4 + (k - 1.) * f4eq + f4eq2;\n        f5 = (1. - k) * f5 + (k - 1.) * f5eq + f5eq2;\n        f6 = (1. - k) * f6 + (k - 1.) * f6eq + f6eq2;\n        f7 = (1. - k) * f7 + (k - 1.) * f7eq + f7eq2;\n        f8 = (1. - k) * f8 + (k - 1.) * f8eq + f8eq2;\n    }\n    \n    //store f0~8 and rho,Fx,Fy\n    int itx = int(fragCoord.x) - 2*idx.x;\n    int ity = int(fragCoord.y) - 2*idx.y;\n    if(itx==0&&ity==0)//stores f0,f1,f2\n        fragColor = vec4(f0,f1,f2,1.);\n    else if(itx==1&&ity==0)//stores f3,f4,f5\n        fragColor = vec4(f3,f4,f5,1.);\n    else if(itx==0&&ity==1)//stores f6,f7,f8\n        fragColor = vec4(f6,f7,f8,1.);\n    else //stores\n        fragColor = vec4(0,0,0,1);\n}",
   "name": "Buffer A",
   "description": "",
   "type": "buffer"
  },
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "XsXGR8",
     "filepath": "/media/previz/buffer01.png",
     "type": "buffer",
     "channel": 1,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "4sXGR8",
     "filepath": "/media/previz/buffer02.png",
     "type": "buffer",
     "channel": 2,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "XsXGR8",
     "channel": 0
    }
   ],
   "code": "//streaming step\n\nbool is_wall(in ivec2 idx, in ivec2 size){\n    return (size.x < idx.x + 1) || (size.y < idx.y + 1) || (idx.x < 0) || (idx.y < 0) || (Wall(iChannel2, idx) > 0.1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    ivec2 idx = ivec2(fragCoord*0.5);\n    ivec2 size = ivec2(iResolution*0.5);\n\n    if(is_wall(idx,size)){\n        discard;\n    }\n\n    float f0, f1, f2, f3, f4, f5, f6, f7, f8;\n    ivec2 idx2;\n\n    f0 = f0(iChannel0, idx);\n    idx2 = idx + ivec2(-1, 0);\n    f1 = is_wall(idx2, size) ? f2(iChannel0, idx) : f1(iChannel0, idx2);\n    idx2 = idx + ivec2(1, 0);\n    f2 = is_wall(idx2, size) ? f1(iChannel0, idx) : f2(iChannel0, idx2);\n    idx2 = idx + ivec2(0, -1);\n    f3 = is_wall(idx2, size) ? f4(iChannel0, idx) : f3(iChannel0, idx2);\n    idx2 = idx + ivec2(0, 1);\n    f4 = is_wall(idx2, size) ? f3(iChannel0, idx) : f4(iChannel0, idx2);\n    idx2 = idx + ivec2(-1, -1);\n    f5 = is_wall(idx2, size) ? f6(iChannel0, idx) : f5(iChannel0, idx2);\n    idx2 = idx + ivec2(1, 1);\n    f6 = is_wall(idx2, size) ? f5(iChannel0, idx) : f6(iChannel0, idx2);\n    idx2 = idx + ivec2(1, -1);\n    f7 = is_wall(idx2, size) ? f8(iChannel0, idx) : f7(iChannel0, idx2);\n    idx2 = idx + ivec2(-1, 1);\n    f8 = is_wall(idx2, size) ? f7(iChannel0, idx) : f8(iChannel0, idx2);\n\n    const float rho0 = 1.;\n    float rho = f0+f1+f2+f3+f4+f5+f6+f7+f8+1e-30;\n    float psi = rho0 * (1.f - exp(-abs(rho) / rho0));\n\n    //store f0~8 and rho,Fx,Fy\n    int itx = int(fragCoord.x) - 2*idx.x;\n    int ity = int(fragCoord.y) - 2*idx.y;\n    if(itx==0&&ity==0)//stores f0,f1,f2\n        fragColor = vec4(f0,f1,f2,1.);\n    else if(itx==1&&ity==0)//stores f3,f4,f5\n        fragColor = vec4(f3,f4,f5,1.);\n    else if(itx==0&&ity==1)//stores f6,f7,f8\n        fragColor = vec4(f6,f7,f8,1.);\n    else //stores rho psi\n        fragColor = vec4(rho,psi,0,1);\n}",
   "name": "Buffer B",
   "description": "",
   "type": "buffer"
  },
  {
   "inputs": [
    {
     "id": "4dXGRr",
     "filepath": "/presets/tex00.jpg",
     "type": "keyboard",
     "channel": 3,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "XsXGR8",
     "filepath": "/media/previz/buffer01.png",
     "type": "buffer",
     "channel": 1,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    },
    {
     "id": "4sXGR8",
     "filepath": "/media/previz/buffer02.png",
     "type": "buffer",
     "channel": 2,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4sXGR8",
     "channel": 0
    }
   ],
   "code": "//draw wall\n\n#define IsInBox(box, idx) (idx.x > box.x && idx.x < box.y && idx.y > box.z && idx.y < box.w)\n#define IsInCircle(o,r,idx) (length(o-vec2(idx))<r)\n#define KEY_SPACE 32\n#define KEY_E 69\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 idx = ivec2(fragCoord*0.5);\n    ivec2 size = ivec2(iResolution*0.5);\n    ivec4 box1 = ivec4(size.x/2-10,size.x/3*2,size.y/3-20,size.y/3-10);\n    ivec4 box2 = box1-size.y/8;\n    ivec4 box3 = box2+ivec4(size.y/4,size.y/4,-15,-15);\n    ivec4 box4 = ivec4(size.x/3,size.x/3+10,3,80);\n    ivec4 box5 = box4 - 20;\n    ivec4 box6 = box4 + ivec4(200,200,-20,-20);\n\n    //init\n    if(iFrame==0)\n    {\n        if(IsInBox(box1,idx)) {\n           fragColor = vec4(1.,1.,1.,1.);\n        }\n        else if(IsInBox(box2,idx)) {\n           fragColor = vec4(1.,1.,1.,1.);\n        }\n        else if(IsInBox(box3,idx)) {\n           fragColor = vec4(1.,1.,1.,1.);\n        }        \n        else if(IsInBox(box4,idx)) {\n           fragColor = vec4(1.,1.,1.,1.);\n        }        \n        else if(IsInBox(box5,idx)) {\n           fragColor = vec4(1.,1.,1.,1.);\n        }      \n        else if(IsInBox(box6,idx)) {\n           fragColor = vec4(1.,1.,1.,1.);\n        }\n    }\n    else\n    {\n        float wall = Wall(iChannel2,idx);\n        //...\n        //Mouse\n        float pressSpace = texelFetch( iChannel3, ivec2(KEY_SPACE,0.0), 0 ).x;\n        float pressE = texelFetch( iChannel3, ivec2(KEY_E,0.0), 0 ).x;\n        if(iMouse.z>0.5 && IsInCircle(iMouse.xy/2.,5.,idx))\n        {\n            wall = (pressSpace>0.5 || pressE > 0.5) ? 0. : 1.;\n        }\n        \n        fragColor = vec4(wall,wall,wall,1.);\n    }\n}",
   "name": "Buffer C",
   "description": "",
   "type": "buffer"
  }
 ]
}