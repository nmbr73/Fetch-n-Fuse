{"Shader":{"ver":"0.1","info":{"id":"fd2BDy","date":"1647003366","viewed":171,"name":"Blurred Net","username":"dr2","description":"Blurred Apollonian net","likes":13,"published":3,"flags":32,"usePreview":0,"tags":["blur","dof","focus","apollonian"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ \"Blurred Net\" by dr2 - 2022\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\n#define txBuf iChannel0\n\nconst float pi = 3.1415927;\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 txVal, col4;\n  vec2 canvas, uv, duv;\n  float dstFoc, dPix, r;\n  float ga = pi * (3. - sqrt(5.));\n  const float NP = 32.;\n  canvas = iResolution.xy;\n  uv = fragCoord \/ canvas;\n  dstFoc = 5.; \/\/ (from \"Losing Focus 2\")\n  dPix = abs (dstFoc - texture (txBuf, uv).a);\n  duv = 0.0008 * dPix * vec2 (canvas.y \/ canvas.x, 1.);\n  col4 = vec4 (0.);\n  for (float n = float (VAR_ZERO); n < NP; n ++) {\n    r = sqrt (n \/ NP);\n    txVal = texture (txBuf, uv + duv * r * sin (n * ga + vec2 (0.5 * pi, 0.)));\n    col4 += vec4 (txVal.rgb, 1.) * exp (-1. * r * r) *\n       clamp (1. + (1. + 0.1 * txVal.a * txVal.a) * (abs (dstFoc - txVal.a) - dPix), 0., 1.);\n  }\n  col4.rgb \/= col4.a;\n  fragColor = vec4 (col4.rgb, 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":257,"channel":0}],"code":"\/\/ \"Blurred Net\" by dr2 - 2022\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nfloat Fbm3 (vec3 p);\n\nvec3 ltDir;\nvec2 trkAx, trkAy, trkFx, trkFy;\nfloat tCur, dstFar;\nconst float pi = 3.1415927;\n\nvec3 TrackPath (float t)\n{\n  return vec3 (dot (trkAx, sin (trkFx * t)), dot (trkAy, sin (trkFy * t)), t);\n}\n\nvec3 TrackVel (float t)\n{\n  return vec3 (dot (trkAx * trkFx, cos (trkFx * t)), dot (trkAy * trkFy, cos (trkFy * t)), 1);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec4 q;\n  q = vec4 (p, 1.);\n  q.xy -= TrackPath (p.z).xy;\n  for (float j = 0.; j < 8.; j ++) {\n    q.xyz = 2. * fract (0.5 * q.xyz + 0.5) - 1.;\n    q *= 1.3 \/ dot (q.xyz, q.xyz);\n  }\n  return 0.25 * (length (q.xyz) \/ q.w - 0.01);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    if (d < 0.001 || dHit > dstFar) break;\n    dHit += d;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nvec3 BgCol (vec3 rd)\n{\n  float t, gd, b;\n  t = tCur * 4.;\n  b = dot (vec2 (atan (rd.x, rd.y), 0.5 * pi - acos (rd.z)), vec2 (2., sin (rd.x)));\n  gd = clamp (sin (5. * b + t), 0., 1.) * clamp (sin (3.5 * b - t), 0., 1.) +\n     clamp (sin (21. * b - t), 0., 1.) * clamp (sin (17. * b + t), 0., 1.);\n  return mix (vec3 (0.6, 0.5, 0.), vec3 (0.9, 0.4, 0.2), 0.5 + 0.5 * rd.z) *\n     (0.24 + 0.44 * (rd.z + 1.) * (rd.z + 1.)) * (1. + 0.2 * gd);\n}\n\nvec4 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, bgCol, vn;\n  float dstObj;\n  dstObj = ObjRay (ro, rd);\n  bgCol = BgCol (rd);\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    col4 = mix (vec4 (0.6, 0.8, 0.6, 0.1), vec4 (0.8, 0.8, 0.9, 0.5), smoothstep (0.5, 0.55,\n       Fbm3 (16. * ro)));\n    col = col4.rgb * (0.2 + 0.8 * max (dot (ltDir, vn), 0.)) +\n       col4.a * vec3 (1., 1., 0.) * pow (max (dot (ltDir, vn), 0.), 32.);\n    col = mix (col, bgCol, smoothstep (0.2, 1., dstObj \/ dstFar));\n  } else col = bgCol;\n  return vec4 (clamp (col, 0., 1.), dstObj);\n}\n\n#define txSize iChannelResolution[0].xy\n\n#define AA  0\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, col4;\n  vec3 ro, rd, vd;\n  vec2 canvas, uv, uvv;\n  float el, az, zmFac, sr, asp, vFly;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ canvas - 0.5;\n  asp = canvas.x \/ canvas.y;\n  zmFac = 3.;\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 2. * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  trkAx = 0.25 * vec2 (2., 0.9);\n  trkAy = 0.25 * vec2 (1.3, 0.66);\n  trkFx = 2. * vec2 (0.2, 0.23);\n  trkFy = 2. * vec2 (0.17, 0.24);\n  vFly = 0.5;\n  ro = TrackPath (vFly * tCur) + 1.;\n  vd = normalize (TrackVel (vFly * tCur));\n  az += atan (vd.x, vd.z);\n  vuMat = StdVuMat (el, az);\n  ltDir = vuMat * normalize (vec3 (-1., 1., -1.));\n  dstFar = 50.;\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col4 = vec4 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    uvv = (uv + step (1.5, naa) * Rot2D (vec2 (0.5 \/ canvas.y, 0.), sr * (0.667 * a + 0.5) *\n       pi)) \/ zmFac;\n    rd = vuMat * normalize (vec3 (2. * tan (0.5 * atan (uvv.x \/ asp)) * asp, uvv.y, 1.));\n    col4 += (1. \/ naa) * ShowScene (ro, rd);\n  }\n  fragColor = col4;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nconst float cHashM = 43758.54;\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (dot (p, cHashVA3) + vec4 (0., cHashVA3.xy, cHashVA3.x + cHashVA3.y)) * cHashM);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. \/ 1.9375);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}}