{"Shader":{"ver":"0.1","info":{"id":"WdB3WG","date":"1549817017","viewed":1372,"name":"Molecular Dance","username":"wyatt","description":"I use a 2 pass blur to make a hacky electric field. Then tracked particles with different charges interact with the blur field. The field is colored by a caustic. Mouseable. Controls in Common tab","likes":42,"published":3,"flags":32,"usePreview":0,"tags":["particles","physics","continuous"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"\/\/ Caustic Drawing and red and blue dot drawing\n#define N 2\nvec2 R;\nfloat ln (vec3 p, vec3 a, vec3 b) {return length(p-a-(b-a)*dot(p-a,b-a)\/dot(b-a,b-a));}\nvec4 C (vec2 U) {return texture(iChannel2,U\/R);}\nvec4 B (vec2 U) {return texture(iChannel1,U\/R);}\nvec4 D (vec2 U) {return texture(iChannel3,U\/R);}\nvec4 A (vec2 U) {return texture(iChannel0,U\/R);}\nfloat dI (vec2 U, vec3 me, vec3 light, float mu) {\n    vec3 r = vec3(U,100);\n    vec3 n = normalize(vec3(D(r.xy).zw,mu));\n    vec3 li = reflect((r-light),n);\n    float len = ln(me,r,li);\n    return 5.e-1*exp(-len);\n}\nfloat I (vec2 U, vec3 me, vec3 light, float mu) {\n    float intensity = 0.;\n    for (int x = -N; x <= N; x++)\n        for (int y = -N; y <= N; y++){\n            float i = dI(U+vec2(x,y),me,light,10.*mu);\n            intensity += i*i;\n        }\n        return intensity;\n}\nvoid mainImage( out vec4 Q, in vec2 U)\n{\n    R = iResolution.xy;\n    vec3 light = vec3(0.5*R,1e5);\n    vec3 me    = vec3(U,0);\n\tvec4 a = A(U);\n    vec4 c = C(U);\n    float l = I(U,me,light,1.);\n    float r = smoothstep(2.+0.05*abs(a.w),.5,length(U-a.xy));\n    Q = l+r*vec4(abs(sign(a.w)),-sign(a.w),-sign(a.w),1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/ Particle tracking\nvec2 R;\nvec4 A (vec2 U) {return texture(iChannel0,U\/R);}\nvec4 B (vec2 U) {return texture(iChannel1,U\/R);}\nvec4 C (vec2 U) {return texture(iChannel2,U\/R);}\nvoid X (vec2 U, inout vec4 Q, vec2 u) {\n    vec4 p = A(U+u);\n    if (length(p.xy - U) < length(Q.xy-U)) Q = p;\n    \n}\nvoid mainImage( out vec4 Q, in vec2 U )\n{\tR = iResolution.xy;\n \tQ = A(U);\n \t\/\/ measure neighborhood\n \tfor (int x = -1; x <= 1; x++)\n     for (int y = -1; y <= 1; y++)\n      X(U,Q,vec2(x,y));\n \tvec2 u = Q.xy;\n \tvec4 \n        n = C(u+vec2(0,1)),\n        e = C(u+vec2(1,0)),\n        s = C(u+vec2(0,-1)),\n        w = C(u+vec2(-1,0));\n        \n \tvec3 dx = e.xyz-w.xyz;\n \tvec3 dy = n.xyz-s.xyz;\n\t\/\/ THE FORCE HERE IS COMPUTED WITH THE GRADIENT\n \t\/\/ I DONT NEED ANY INFORMATION ABOUT NEIGHBORING PARTICLES\n \tvec2 v = -Q.w*vec2(dx.x,dy.x)-vec2(dx.y,dy.y);\n \tQ.xy += clamp(SPEED*v\/(1.+0.2*abs(Q.w)),vec2(-1),vec2(1));\n    \/\/ init\n    if (iFrame < 1) {\n        vec2 u = U;\n        U = floor((u)\/SEPARATION)*SEPARATION;\n        if (U.x<0.55*R.x&&U.x>0.45*R.x) {\n            U=floor(u\/SEPARATION*4.)*SEPARATION\/4.;\n            Q = vec4(U,1,-0.5);\n        } else Q = vec4(U,1,sign(U.x-0.5*R.x)*(U.y>0.5*R.y?-9.:2.));\n    \t\n\t}\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/ Blur pass 1\nvec2 R;\nvec4 A (vec2 U) {return texture(iChannel0,U\/R);}\nvec4 B (vec2 U) {return texture(iChannel1,U\/R);}\nvec4 C (vec2 U) {return texture(iChannel2,U\/R);}\nvoid mainImage( out vec4 Q, in vec2 U )\n{\tR = iResolution.xy;\n\tQ = vec4(0);\n \tfor (float i = -BLUR_DEPTH ; i <= BLUR_DEPTH ; i++) {\n \t\tvec4 a = A(U+vec2(i,0));\n        vec4 c = vec4(a.w,1.,0,0)*smoothstep(1.+0.05*abs(a.w),1.,length(U+vec2(i,0)-a.xy));\n        Q += c*sqrt(FORCE_RANGE)\/FORCE_RANGE*exp(-i*i*0.5\/FORCE_RANGE);\n \t}\n \t\t\n \t\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":259,"channel":0}],"code":"\/\/ Blur pass 2\nvec2 R;\nvec4 A (vec2 U) {return texture(iChannel0,U\/R);}\nvec4 B (vec2 U) {return texture(iChannel1,U\/R);}\nvec4 C (vec2 U) {return texture(iChannel2,U\/R);}\nvoid mainImage( out vec4 Q, in vec2 U )\n{\tR = iResolution.xy;\n\tQ = vec4(0);\n \tfor (float i = -BLUR_DEPTH ; i <= BLUR_DEPTH ; i++) {\n \t\tvec4 c = B(U+vec2(0,i));\n        Q += c*sqrt(FORCE_RANGE)\/FORCE_RANGE*exp(-i*i*0.5\/FORCE_RANGE);\n \t}\n vec4 \n        n = C(U+vec2(0,1)),\n        e = C(U+vec2(1,0)),\n        s = C(U+vec2(0,-1)),\n        w = C(U+vec2(-1,0));\n \tQ = C(U) + 0.5*(Q-C(U));\n \tif (iMouse.z > 0.) Q.xy += vec2(10.)*exp(-vec2(.01,.05)*length(U-iMouse.xy));\n}\n","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\/\/ charge force range, collision force range ,0,0 does nothing\n#define FORCE_RANGE vec4(   25, 2.5,     0,0)\n\n\/\/ how many blur iterations\n#define BLUR_DEPTH 40.\n\/\/ multiplies the force per frame\n#define SPEED 2.\n\/\/ restart after changing. Smaller number -> more particles\n#define SEPARATION 13.","name":"Common","description":"","type":"common"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":260,"src":"\/media\/previz\/buffer03.png","ctype":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":260,"channel":0}],"code":"\/\/Gradient calculation for caustic\nvec2 R;\nvec4 A (vec2 U) {return texture(iChannel0,U\/R);}\nvec4 B (vec2 U) {return texture(iChannel1,U\/R);}\nvec4 C (vec2 U) {return texture(iChannel2,U\/R);}\nvec4 D (vec2 U) {return texture(iChannel3,U\/R);}\nvoid mainImage( out vec4 Q, in vec2 U )\n{\tR = iResolution.xy;\n \tvec4 a = A(U);\n \tfloat r=smoothstep(4.,1.,length(U-a.xy));\n\tQ = r*vec4(a.w,abs(a.w),-a.w,1);\n \tQ = max(Q,D(U));\n \tfloat \n        n = C(U+vec2(0,1)).x,\n        e = C(U+vec2(1,0)).x,\n        s = C(U+vec2(0,-1)).x,\n        w = C(U+vec2(-1,0)).x;\n \tQ.zw = vec2(e-w,n-s);\n}\n","name":"Buffer D","description":"","type":"buffer"}]}}