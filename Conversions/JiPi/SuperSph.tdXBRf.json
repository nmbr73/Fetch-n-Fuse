{"Shader":{"ver":"0.1","info":{"id":"tdXBRf","date":"1588779349","viewed":1290,"name":"Super SPH ","username":"michael0884","description":"Finally implemented a proper SPH fluid\nif you have the plugin:\nuse acceleration 4x","likes":58,"published":3,"flags":32,"usePreview":0,"tags":["fluid","particles"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":37,"channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 pos )\n{\n    sN = SN; \n    N = ivec2(R*P\/vec2(sN));\n    TN = N.x*N.y;\n    ivec2 pi = ivec2(floor(pos));\n    \n    fragColor = texel(ch2, pi);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define texel(a, p) texelFetch(a, ivec2(p), 0)\n#define ch0 iChannel0\n#define ch1 iChannel1\n#define ch2 iChannel2\n#define ch3 iChannel3\n#define R iResolution.xy\n#define PI 3.14159265\n\n#define dt 3.\n#define loop(i,x) for(int i = min(0, iFrame); i < x; i++)\n\n\/\/rendering scale\n#define SC 1.\n\n#define smoothR 2.5\n#define density 0.036\n\n\/\/sim stuff\nstruct obj\n{\n    int id; \/\/ID\n    vec2 X; \/\/position\n    vec2 V; \/\/velocity\n    float Pressure; \/\/pressure\n    float Rho; \/\/neighbor density\n    float SScale; \/\/smooth scale\n    float Div; \/\/average distance to neighbors\n    vec4 Y; \/\/additional data\n};\n    \nfloat Force(float d)\n{\n    return 0.2*exp(-0.05*d)-2.*exp(-0.5*d);\n}\n\n\/\/40% of the buffer used for particles\n#define P 0.5\n#define SN ivec2(4, 2)\n\nivec2 N; \/\/buffer size\nivec2 sN; \/\/buffer single element size\nint TN; \/\/buffer length\n\nivec2 i2xy(ivec3 sid)\n{\n    return sN*ivec2(sid.x%N.x, sid.x\/N.x) + sid.yz;\n}\n\nivec3 xy2i(ivec2 p)\n{\n    ivec2 pi = p\/sN;\n    return ivec3(pi.x + pi.y*N.x, p.x%sN.x, p.y%sN.y);\n}\n\nivec2 cross_distribution(int i)\n{\n    return (1<<(i\/4)) * ivec2( ((i&2)\/2)^1, (i&2)\/2 ) * ( 2*(i%2) - 1 );\n}\n\nfloat sqr(float x)\n{\nreturn x*x + 1e-2;\n}\n\n\/\/hash funcs\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":5,"src":"\/media\/a\/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":257,"channel":0}],"code":"\/\/L1 particle buffer - simulation\n\/\/L2 directional neighbor graph 4x - sort\n\nint ID;\nobj O; \/\/this object\n\n\/\/sort arrays\nvec4 lnk0, lnk1;\nvec4 d0, d1;\n\n\/\/L3\nvec4 EA[SN.x]; \/\/element array\n\nvoid insertion_sort(float t, int id);\nobj getObj(int id); vec4 saveObj(int i);\nbool iscoincidenceEA(int id);\nvoid sort0(int idtemp, int D); void sort1(int idtemp, int D);\n\nfloat SKernel(float d, float h)\n{\n    return exp(-(d\/h));\n}\n\nfloat Kernel(float d, float h)\n{\n    return exp(-sqr(d\/h))\/(PI*sqr(h));\n}\n\nfloat KernelGrad(float d, float h)\n{\n    return 2.*d*Kernel(d,h)\/sqr(h);\n}\n\nvec2 borderF(vec2 p)\n{\n    \n    float d = min(min(p.x,p.y),min(R.x-p.x,1e10));\n    return exp(-max(d,0.)*max(d,0.))*((d==p.x)?vec2(1,0):(\n    \t\t(d==p.y)?vec2(0,1):(\n            (d==R.x-p.x)?vec2(-1,0):vec2(0,-1))));\n}\n\nvoid mainImage( out vec4 Q, in vec2 pos )\n{\n    \/\/4 pix per layer, 3 layers\n    sN = SN; \n    N = ivec2(R*P\/vec2(sN));\n    TN = N.x*N.y;\n    int S = 3; \/\/log2(sN.x)\n    \n    ivec2 p = ivec2(floor(pos));\n    if(any(greaterThan(p, sN*N-1))) discard;\n   \n    ivec3 sid = xy2i(p); ID = sid.x;\n    O = getObj(ID);\n    d0 = vec4(1e6); d1 = vec4(1e6);\n    lnk0 = vec4(-1); lnk1 = vec4(-1);\n    \n    switch(sid.z)\n    {\n    case 0: \/\/particle\n        if(sid.z >= 3) discard;\n        float sk = 0.;\n        \n        \/\/scale \/=sk;\n        vec2 F =1e-3*vec2(0.,-1.);\/\/-0.001*(O.X - R*0.5)\/(pow(length(O.X - R*0.5),1.)+1.); \n        vec2 Fp = vec2(0);\n        float avgP = 0.;\n     \n         float scale = 0.21\/density; \/\/radius of smoothing\n        float Div = 0.;\n        float Rho = Kernel(0., scale);\n           vec2 avgV = vec2(O.V)*Rho;\n        vec3 avgCol = vec3(O.Y.xyz);\n        float Gsum = 1.;\n        float curscale = 1e10;\n        float avgSc = 0.;\n        \n        loop(j,4)\n        {\n            vec4 nb = texel(ch0, i2xy(ivec3(ID, j, 1)));\n            loop(i,4)\n            {\n                if(nb[i] < 0. || nb[i] > float(TN)) continue;\n                obj nbO = getObj(int(nb[i]));\n                \n               \n                float d = distance(O.X, nbO.X);\n                vec2 dv = (nbO.V - O.V); \/\/delta velocity\n                vec2 dx = (nbO.X - O.X); \/\/delta position \n                vec2 ndir = dx\/(d+0.001); \/\/neighbor direction\n                \/\/SPH smoothing kernel\n                float K = Kernel(d, scale);\n                float dK = KernelGrad(d, scale);\n               \n                \/\/Gkernel\n                float G = 1.\/(d*d+0.01);\n                float dotv = dot(ndir, dv); \/\/divergence\n                vec2 pressure = -(nbO.Pressure\/sqr(nbO.Rho) + \n                                    O.Pressure\/sqr(O.Rho))*ndir*K;\/\/pressure gradient\n                curscale = min(curscale, d);\n                Gsum += 1.;\n                Div += dotv*K; \/\/ local divergence\n                Rho += K;\n                avgCol += nbO.Y.xyz;\n                avgP += nbO.Pressure*K;\n                avgV += nbO.V*K;\n                vec2 viscosity = 1.4*(3. + 3.*length(dv))*ndir*dotv*K;\n                F += pressure + viscosity;\n                Fp -= ndir*SKernel(d,scale);\n            }\n        }\n        \n         \/\/border conditions\n        vec2 bdf = borderF(O.X);\n        F += 0.5*bdf*abs(dot(bdf, O.V));\n       \/\/ Fp += 0.*bdf*dot(bdf, O.V);\n        \n        if(R.x - O.X.x < 2.) O.V.x = -abs(O.V.x);\n        if(O.X.x < 2.) O.V.x = abs(O.V.x);\n        \/\/if(R.y - O.X.y < 2.) O.V.y = -abs(O.V.y);\n        if(O.X.y < 2.) O.V.y = abs(O.V.y);\n        \n        \n        if(iMouse.z > 0.) \n        {\n            float d = distance(iMouse.xy, O.X);\n            O.Y.xyz +=(0.5+0.5*sin(vec3(1,2,3)*iTime))\/(0.2*d*d+2.);\n            F += 0.01*(iMouse.xy - iMouse.zw)\/(0.2*d*d+2.);\n        }\n        \n        O.Rho = Rho;\n        O.Div = Div; \/\/average distance\n        O.SScale = avgSc\/Gsum; \/\/average average distance\n        \n        float r = 7.;\n        float D = 1.;\n        float waterP = 0.035*density*(pow(abs(O.Rho\/density), r) - D);\n        float gasP = 0.03*O.Rho;\n        O.Pressure = min(waterP,0.04);\n        if(iFrame > 20) O.Pressure += 0.*(avgP\/O.Rho - O.Pressure);\n        \n        \n        O.V += F*dt;\n        O.V -= O.V*(0.5*tanh(8.*(length(O.V)-1.5))+0.5);\n        O.X += (O.V)*dt + 0.*Fp; \/\/advect\n        \n        \n        \n        \n        \n        \/\/color diffusion\n        \n        O.Y.xyz = 0.995*mix(avgCol\/Gsum, O.Y.xyz,0.995)\n        + 0.01*(exp(-0.1*distance(O.X,R*0.3))*(0.5*sin(vec3(1,2,3)*iTime)+0.5)\n             + exp(-0.1*distance(O.X,R*0.7))*(0.5*sin(vec3(2,3,1)*iTime))+0.5);\n        \n        \n        \n        if(iFrame<10)\n        {\n            O.X = R*vec2(i2xy(ivec3(ID,0,0)))\/vec2(N*sN);\n            O.X += 0.*sin(10.*O.X.x\/R.x)*sin(10.*O.X.y\/R.y);\n\t\t\tO.V = 0.*(hash22(3.14159*pos) - 0.5);\n            O.Y = texture(ch1,O.X\/R);\n            O.Pressure = 0.;\n            O.Div = 0.;\n            O.Rho = 5.;\n            O.SScale = 1.;\n        }\n\n        Q = saveObj(sid.y);\n        return;\n        \n    case 1: \/\/dir graph\n        \/\/sort neighbors and neighbor neighbors\n        vec4 nb0 = texel(ch0, i2xy(ivec3(ID, sid.y, 1)));\n        \n        \/\/random sorts\n        loop(i,8) sort0(int(float(TN)*hash13(vec3(iFrame, ID, i))), sid.y);\n        \n        loop(i,4)\n        {\n            sort0(int(nb0[i]), sid.y);  \/\/sort this\n            \/\/use a sudorandom direction of the neighbor\n            vec4 nb1 = texel(ch0, i2xy(ivec3(nb0[i], (iFrame+ID)%4, 1)));\n            loop(j,2)\n            {\n                sort0(int(nb1[j]), sid.y);  \n            }\n        }\n        \n        \n        \n        Q = lnk0;\n        return;\n    }\n     \n}\n\nvec4 saveObj(int i)\n{\n    switch(i)\n    {\n    case 0:  \n        return vec4(O.X, O.V);\n    case 1:\n        return vec4(O.Pressure, O.Rho, O.SScale, O.Div);\n    case 2:\n        return O.Y;\n    case 3:\n        return vec4(0.);\n    }\n}\n\nobj getObj(int id)\n{\n    obj o;\n    \n    vec4 a = texel(ch0, i2xy(ivec3(id, 0, 0))); \n    o.X = a.xy; o.V = a.zw;\n    \n    a = texel(ch0, i2xy(ivec3(id, 1, 0))); \n    o.Pressure = a.x;\n    o.Rho = a.y;\n    o.SScale = a.z;\n    o.Div = a.w;\n    \n    o.Y = texel(ch0, i2xy(ivec3(id, 2, 0)));\n    \n    o.id = id;\n    return o;\n}\n\nvoid insertion_sort(float t, int id)\n{\n\tif(d0.x > t)\n    {\n        d0 = vec4(t, d0.xyz);\n        lnk0 = vec4(id, lnk0.xyz);\n    }else if(d0.y > t && d0.x < t)\n    {\n        d0.yzw = vec3(t, d0.yz);\n        lnk0.yzw = vec3(id, lnk0.yz);\n    }else if(d0.z > t&& d0.y < t)\n    {\n        d0.zw = vec2(t, d0.z);\n        lnk0.zw = vec2(id, lnk0.z);\n    }else if(d0.w > t && d0.z < t)\n    {\n        d0.w = t;\n        lnk0.w = float(id);\n    }\n}\n\nbool iscoincidence(int id)\n{\n    return (id < 0) || \n      \t\t(id == ID) ||\n           any(equal(lnk0,vec4(id)));\n}\n\nvoid sort0(int idtemp, int D) \/\/sort closest objects in sN.x directions\n{\n    if(iscoincidence(idtemp)) return; \/\/particle already sorted\n    \n    vec2 nbX = texel(ch0, i2xy(ivec3(idtemp, 0, 0))).xy; \n   \n    vec2 dx = nbX - O.X;\n    int dir = int(2.*(atan(dx.y, dx.x)+PI)\/PI); \n    \n    if(dir != D) return; \/\/not in this sector\n    \n    float t = length(dx);\n   \n    insertion_sort(t, idtemp);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":258,"channel":0}],"code":"\/\/voronoi particle tracking + graph augmented\n\nvec2 sc(vec2 p)\n{\n    return SC*(p - 0.5*R) + 0.5*R;\n}\n\nfloat d;\nint id;\nvec2 p;\n\nfloat particleDistance(int i)\n{\n    return distance(p, sc(texel(ch0, i2xy(ivec3(i, 0, 0))).xy));\n}\n\nvoid sort(int utemp)\n{\n    if(utemp < 0) return; \n   \tfloat dtemp = particleDistance(utemp);\n    if(dtemp < d) \/\/sorting\n    {\n        d = dtemp;\n        id = utemp;\n    }\n}\n\n\nvoid mainImage( out vec4 Q, in vec2 pos )\n{\n    sN = SN; \n    N = ivec2(R*P\/vec2(sN));\n    TN = N.x*N.y;\n    d = 1e10;\n    id = 1;\n    p = pos;\n    ivec2 pi = ivec2(floor(pos));\n    \n    sort(1+0*int(texel(ch1, pi).x));\n    \n   int ID = id;\n    loop(j,8)\n    {\n        \n        int nbid = int(texel(ch1, pi+cross_distribution(j)).x);\n        sort(nbid);\n    }\n    \n    loop(j,4)\n    {\n        vec4 nb = texel(ch0, i2xy(ivec3(ID, j, 1)));\n        loop(i,4)\n    \t{ \n            sort(int(nb[i]));  \/\/sort this\n        }\n    }\n    \n    loop(i,5) \/\/random sort\n    {\n        sort(int(float(TN)*hash13(vec3(iFrame, pi.x, pi.y*i))));\n    }\n    \n   \tQ = vec4(id, d, 0, 0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/media\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":258,"src":"\/media\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":259,"src":"\/media\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":259,"channel":0}],"code":"vec2 sc(vec2 p)\n{\n    return SC*(p - 0.5*R) + 0.5*R;\n}\n\n\/\/ iq's smooth HSV to RGB conversion \nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); \/\/ cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nobj getObj(int id)\n{\n    obj o;\n    \n    vec4 a = texel(ch0, i2xy(ivec3(id, 0, 0))); \n    o.X = a.xy; o.V = a.zw;\n    \n    a = texel(ch0, i2xy(ivec3(id, 1, 0))); \n    o.Pressure = a.x;\n    o.Rho = a.y;\n    o.SScale = a.z;\n    o.Div = a.w;\n    \n    o.Y = texel(ch0, i2xy(ivec3(id, 2, 0)));\n    \n    o.id = id;\n    return o;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 pos )\n{\n    sN = SN; \n    N = ivec2(R*P\/vec2(sN));\n    TN = N.x*N.y;\n    ivec2 pi = ivec2(floor(pos));\n    \n    int ID = int(texel(ch1, pi).x); \n    obj O = getObj(ID);\n    float d =distance(pos, sc(O.X));\n    float d1 = exp(-sqr(d\/1.)) +  0.*exp(-0.1*d);\n    float d2 = 10.*O.Y.x;\n   \n    \/*loop(j,4)\n    {\n        vec4 nb = texel(ch0, i2xy(ivec3(ID, j, 1)));\n        loop(i,4)\n    \t{\n            if(nb[i] < 0.) continue;\n            vec2 nbX = texel(ch0, i2xy(ivec3(nb[i], 0, 0))).xy; \n        \td1 += exp(-0.5*distance(pos, sc(nbX)));\n    \t}\n    }*\/\n    d1*=1.;\n    \/\/ Output to screen\n \tvec3 pcol = texel(ch2, pi).xyz;\n    vec3 ncol = 0.*sin(vec3(1,2,3)*d2*0.3)*d1 + hsv2rgb(vec3(atan(O.V.x,O.V.y)\/PI, 2.*length(O.V),20.*length(O.V)))*d1;\n    fragColor = vec4(mix(pcol,ncol,0.5),1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}}