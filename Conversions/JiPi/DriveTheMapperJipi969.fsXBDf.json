{
 "ver": "0.1",
 "info": {
  "id": "fsXBDf",
  "date": "0",
  "viewed": 0,
  "name": "Drive the Mapper JiPi 969",
  "description": "Just drive - will not go off-road",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "game",
   "interactive",
   "trail",
   "car",
   "building",
   "steer"
  ],
  "hasliked": 0,
  "parentid": "7dsBW2",
  "parentname": "Drive the Mapper"
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "// \"Drive the Mapper\" by dr2 - 2022\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n/*\n  No. 7 in \"Driving\" series; others are listed in \"Truck Driving 2\" (ftt3Ds)\n*/\n\n#define AA  0   // (= 0/1) optional antialiasing (can be slow)\n\n#if 0\n#define VAR_ZERO min (iFrame, 0)\n#else\n#define VAR_ZERO 0\n#endif\n\nfloat PrBoxDf (vec3 p, vec3 b);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrRound4BoxDf (vec3 p, vec3 b, float r);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrConCapsDf (vec3 p, vec2 cs, float r, float h);\nfloat PrTorusDf (vec3 p, float ri, float rc);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat SmoothMax (float a, float b, float r);\nmat3 StdVuMat (float el, float az);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec3 HsvToRgb (vec3 c);\nfloat ShowIntPZ (vec2 q, vec2 cBox, float mxChar, float val);\nvec3 Hashv3v2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\n\nconst int npTrail = 32;  // same for image and buffer\nconst int npFst = 7;\n\nvec4 carPos, wlRot;\nvec3 sunDir, qHit, wlBase, carSz, bldSz;\nvec2 axRot[6], wlRotCs[6], wlAngCs[6], gId, mOff;\nfloat dstFar, tCur, wlRad, strRot, spd, onPath, gSize, rdWid, trHt;\nint idObj;\nbool isSh, isTran, inCab;\nconst int idBod = 1, idAx = 2, idWhl = 3, idStr = 4, idSeat = 5, idStk = 6, idWLit = 7,\n   idLit = 8, idCam = 9, idBld = 10, idTree = 11;\nconst float pi = 3.1415927;\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qa;\n  float dMin, d, r, db, dw;\n  p -= carPos.xyz;\n  p.xz = Rot2D (p.xz, carPos.w);\n  dMin = dstFar;\n  if (! isSh) d = PrRoundBoxDf (p, vec3 (carSz.x, carSz.y + 1.2, carSz.z), 0.5);\n  if (isSh || d < 0.1) {\n    q = p;\n    dw = PrRoundCylDf (vec3 (abs (q.x) - wlBase.x, q.y,\n       wlBase.z * (fract (q.z / wlBase.z + 0.5) - 0.5)).yzx, wlRad + 0.02, 0.05, 0.35);\n    q.y -= 1.1;\n    db = PrRound4BoxDf (q, carSz - 1., 1.);\n    d = min (abs (db) - 0.05, max (db, dw - 0.05));\n    d = SmoothMax (d, - max (abs (abs (q.z) - wlBase.z - wlRad - 0.2) - 0.01,\n       0.02 - abs (db)), 0.02);\n    d = SmoothMax (d, - min (min (PrRoundBox2Df (vec2 (q.y - 0.3, abs (q.z) - 1.05),\n       vec2 (0.3, 0.75), 0.2), PrRoundBox2Df (vec2 (abs (q.x) - 0.6, q.y - 0.3),\n       vec2 (0.3, 0.25), 0.2)), max (PrRoundBox2Df (vec2 (q.x, q.z - 0.8),\n       vec2 (0.8, 0.5), 0.2), - q.y)), 0.02);\n    d = max (d, - max (dw, max (abs (q.z) - wlBase.z - (wlRad + 0.1),\n       wlBase.x - 0.7 - abs (q.x))));\n    DMINQ (idBod);\n    q = p;\n    q.yz -= vec2 (carSz.y + 1.33 + 0.05, -1.);\n    d = PrRoundCylDf (q.xzy, 0.15, 0.05, 0.22);\n    q.y -= max (0.5 * spd, 0.) - 0.05;\n    d = min (d, PrRoundCylDf (q.xzy, 0.6, 0.15, 0.03));\n    DMINQ (idCam);\n    q = p;\n    q.xz = abs (q.xz) - wlBase.xz - vec2 (-0.2, -0.5 * wlBase.z);\n    q.z = abs (q.z) - 0.5 * wlBase.z;\n    d = PrCylDf (q.yzx, 0.1, 0.2);\n    DMINQ (idAx);\n    for (int k = VAR_ZERO; k < 6; k ++) {\n      q = p;\n      q.xz = Rot2Cs (q.xz - axRot[k] * wlBase.xz, wlRotCs[k]);\n      r = wlRad - length (q.yz);\n      q.yz = Rot2Cs (q.yz, wlAngCs[k]);\n      qa = abs (q);\n      d = min (max (length (max (vec2 (0.1 - r, qa.x - 0.1), 0.)) - 0.1, r - 0.2),\n         max (0.2 - r, qa.x - 0.12));\n      d = max (d, - max (abs (fract (4. * q.x / 0.24) - 0.5) - 0.2, r - 0.05));\n      d = min (d, PrCylDf (vec3 (qa.x - 0.1, ((qa.y < qa.z) ? q.yz : q.zy)), 0.06, wlRad - 0.15));\n      q.x *= sign (p.x);\n      DMINQ (idWhl);\n    }\n    q = p;\n    d = PrRoundBoxDf (q - vec3 (-0.4, 0.5, carSz.z - 0.4), vec3 (0.1, 0.5, 0.03), 0.05);\n    q.yz = Rot2D (q.yz - vec2 (0.72, -0.2), -0.1 * pi);\n    q -= vec3 (-0.4, 0.9, 1.8);\n    d = min (d, PrRoundCylDf (q, 0.03, 0.03, 0.35));\n    q.z -= -0.35;\n    q.xy = Rot2D (q.xy, -8. * strRot + pi / 6.);\n    q.xy = Rot2D (q.xy, 2. * pi * floor (3. * atan (q.y, - q.x) / (2. * pi) + 0.5) / 3.);\n    d = min (d, PrTorusDf (q, 0.025, 0.35));\n    q.x += 0.17;\n    d = min (d, PrCylDf (q.yzx, 0.02, 0.17));\n    DMINQ (idStr);\n    q = p;\n    q.yz -= vec2 (0.5, 0.8);\n    d = PrRoundBoxDf (q, vec3 (0.98, 0.2, 0.35) - 0.05, 0.05);\n    q.yz = Rot2D (q.yz - vec2 (0.5, -0.45), 0.1 * pi);\n    q.x = abs (q.x) - 0.49;\n    d = min (d, PrRoundBoxDf (q, vec3 (0.48, 0.35, 0.1) - 0.05, 0.05));\n    DMINQ (idSeat);\n    q = p;\n    q.yz -= vec2 (0.6, -1.);\n    d = PrRoundBoxDf (q, vec3 (0.98, 0.2, 0.35) - 0.05, 0.05);\n    q.yz = Rot2D (q.yz - vec2 (0.5, -0.45), 0.1 * pi);\n    q.x = abs (q.x) - 0.49;\n    d = min (d, PrRoundBoxDf (q, vec3 (0.48, 0.35, 0.1) - 0.05, 0.05));\n    DMINQ (idSeat);\n    q = p;\n    q -= vec3 (0.1, -0.1, 1.5);\n    q.yz = Rot2D (q.yz, pi * (0.02 + 0.06 * sign (spd)));\n    q.y -= 0.5;\n    d = PrCapsDf (q.xzy, 0.04, 0.5);\n    DMINQ (idStk);\n    q = p;\n    q.yz -= vec2 (1.1, 2.4);\n    d = PrCapsDf (q.xzy, 0.06, 0.05);\n    DMINQ (idWLit);\n    q = p;\n    d = PrCapsDf ((vec3 (abs (q.xz), q.y).xzy - vec3 (0.7, 0.4, carSz.z + 0.02)).yzx, 0.05, 0.3);\n    DMINQ (idLit);\n  } else dMin = min (dMin, d);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 160; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar || p.y < 0.) break;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = ObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat TrObjDf (vec3 p)\n{\n  vec3 q;\n  float d;\n  p -= carPos.xyz;\n  p.xz = Rot2D (p.xz, carPos.w);\n  q = p;\n  q.y -= 1.1;\n  return max (PrRound4BoxDf (q, carSz - 1., 1.), -0.5 - q.y);\n}\n\nfloat TrObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 60; j ++) {\n    p = ro + dHit * rd;\n    d = TrObjDf (p);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar || p.y < 0.) break;\n  }\n  if (p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 TrObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = vec2 (0.001, -0.001);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = TrObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  int idObjT;\n  idObjT = idObj;\n  sh = 1.;\n  d = 0.02;\n  isSh = true;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += h;\n    if (sh < 0.05 || d > dstFar) break;\n  }\n  isSh = false;\n  idObj = idObjT;\n  return 0.5 + 0.5 * sh;\n}\n\nvoid SetBldParm ()\n{\n  bldSz = 4. * floor (vec3 (0.08 * gSize, 4., 0.08 * gSize) * (0.4 +\n     0.6 * Hashv3v2 (gId + mOff))) - 0.5;\n  trHt = 10. + 2. * bldSz.y;\n}\n\nfloat GObjDf (vec3 p)\n{\n  vec3 q, qq, qa;\n  float dMin, d, db;\n  dMin = dstFar;\n  q = p;\n  q.xz -= gSize * (gId + 0.5);\n  q.y -= bldSz.y;\n  db = PrBoxDf (q, bldSz);\n  if (isTran) {\n    d = db;\n  } else {\n    qq = mod (q + 2., 4.) - 2.;\n    qq.y -= 0.2;\n    qa = abs (q) - bldSz + 1.;\n    d = SmoothMax (abs (db) - 0.1, - min (max (PrBox2Df (qq.xy, vec2 (1.3, 1.)), Maxv2 (qa.xy)),\n       max (PrBox2Df (qq.zy, vec2 (1.3, 1.)), Maxv2 (qa.zy))), 0.05);\n    d = min (d, max (abs (qq.y - 1.1) - 0.05, db));\n  }\n  DMINQ (idBld);\n  if (! isTran) {\n    q.y -= - bldSz.y;\n    q = vec3 (abs (q.xz) - bldSz.xz - 4., q.y - 0.1 * trHt);\n    d = trHt * PrConCapsDf (q / trHt, sin (0.06 * pi + vec2 (0.5 * pi, 0.)), 0.03, 0.06);\n    DMINQ (idTree);\n  }\n  return dMin;\n}\n\nfloat GObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p, rdi;\n  vec2 gIdP;\n  float dHit, d, eps;\n  eps = 0.01;\n  if (rd.x == 0.) rd.x = 0.0001;\n  if (rd.z == 0.) rd.z = 0.0001;\n  rdi.xz = 1. / rd.xz;\n  gIdP = vec2 (-999.);\n  dHit = eps;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    p = ro + dHit * rd;\n    p.xz -= 0.5 * gSize;\n    gId = floor (p.xz / gSize);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetBldParm ();\n    }\n    d = GObjDf (p);\n    dHit += min (d, eps + max (0., Minv2 ((gSize * (gId + step (0., rd.xz)) - p.xz) * rdi.xz)));\n    if (d < eps || dHit > dstFar || p.y < 0.) break;\n  }\n  if (d >= eps || p.y < 0.) dHit = dstFar;\n  return dHit;\n}\n\nvec3 GObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.001, -0.001);\n  p.xz -= 0.5 * gSize;\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = GObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat GObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  int idObjT;\n  idObjT = idObj;\n  sh = 1.;\n  gIdP = vec2 (-999.);\n  d = 0.01;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    p.xz -= 0.5 * gSize;\n    gId = floor (p.xz / gSize);\n    if (gId != gIdP) {\n      gIdP = gId;\n      SetBldParm ();\n    }\n    h = GObjDf (p);\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += max (h, 0.01);\n    if (h < 0.001 || d > dstFar) break;\n  }\n  idObj = idObjT;\n  return 0.5 + 0.5 * sh;\n}\n\nfloat TrailShd (vec2 p)\n{\n  vec4 u;\n  vec2 gB[2], gF[2], dg, q;\n  float st, s, gLen;\n  st = 1.;\n  for (float kz = -1. + float (VAR_ZERO); kz <= 1.; kz ++) {\n    gB[0] = carPos.xz;\n    gF[0] = gB[0] + Rot2D (vec2 (0., kz * wlBase.z), - carPos.w);\n    for (int j = VAR_ZERO; j < npTrail; j ++) {\n      gB[1] = gB[0];\n      gF[1] = gF[0];\n      u = Loadv4 (npFst + j);\n      if (u.z >= 0.) {\n        gB[0] = u.xy;\n        gF[0] = gB[0] + Rot2D (vec2 (0., kz * wlBase.z), - u.z);\n        s = 1.;\n        if (kz == 0.) {\n          dg = gF[0] - gF[1];\n          gLen = length (dg);\n          if (gLen > 0.) {\n            q = Rot2Cs (p - 0.5 * (gF[0] + gF[1]), dg.yx / gLen);\n            q.x = abs (q.x) - wlBase.x;\n            s = min (s, PrRoundBox2Df (q, vec2 (0.1, 0.5 * gLen), 0.05));\n          }\n        } else {\n          for (float k = -1.; k <= 1.; k += 2.) {\n            dg = gF[0] - gF[1];\n            gLen = length (dg);\n            if (gLen > 0.) {\n              q = Rot2Cs (p - 0.5 * (gF[0] + gF[1]) + Rot2D (vec2 (k * wlBase.x, 0.), - u.z),\n                 dg.yx / gLen);\n              s = min (s, PrRoundBox2Df (q, vec2 (0.1, 0.5 * gLen), 0.05));\n            }\n          }\n        }\n        st = min (st, 1. - 0.3 * sqrt (1. - min (1., (float (j) + 20. * (tCur - u.w)) /\n           float (npTrail))) * (1. - smoothstep (0., 0.05, s)));\n        st = min (st, 1. - 0.3 * sqrt (1. - float (j) / float (npTrail)) *\n           (1. - smoothstep (0., 0.05, s)));\n      } else break;\n    }\n  }\n  return st;\n}\n\nvec3 GrndNf (vec2 p)\n{\n  vec2 e;\n  e = vec2 (0.01, 0.);\n  p *= 0.5;\n  return vec3 (normalize (vec3 (Fbm2 (p) - vec2 (Fbm2 (p + e.xy), Fbm2 (p + e.yx)), 8. * e.x)).xzy);\n}\n\nfloat PathEdge (vec2 p, float dw)\n{\n  return PrRoundBox2Df (mod (p + 0.5 * gSize, gSize) - 0.5 * gSize,\n     vec2 (0.5 * gSize) - 2. * rdWid - dw, rdWid);\n}\n\nfloat GrndWhlShd (vec2 p)\n{\n  float d;\n  d = dstFar;\n  for (int k = 0; k < 6; k ++) d = min (d, length (carPos.xz -\n     Rot2D ((vec2 (2. * mod (float (k), 2.), float (k / 2)) - 1.) * wlBase.xz, - carPos.w) - p));\n  return 0.7 + 0.3 * smoothstep (0.2, 0.3, d);\n}\n\nvec3 GrndCol (vec2 p, float dstGrnd, float sh)\n{\n  vec3 col, colG, vn;\n  vec2 vf, q;\n  float f, st;\n  colG = 0.4 * mix (vec3 (0.8, 1., 0.5), vec3 (0.7, 0.9, 0.5), 0.2 +\n     0.6 * smoothstep (0.3, 0.7, Fbm2 (0.5 * p)));\n  vf = vec2 (0.);\n  if (PathEdge (p, 0.4) > 0.) {\n    f = smoothstep (0., 0.1, abs (PathEdge (p, 0.2)) - 0.2);\n    col = mix (vec3 (0.4, 0.4, 0.1), vec3 (0.3), f);\n    vn = vec3 (0., 1., 0.);\n    vf = vec2 (4., 0.2 + 0.5 * f);\n  } else {\n    q = p - 0.5 * gSize;\n    gId = floor (q / gSize);\n    SetBldParm ();\n    q -= gSize * (gId + 0.5);\n    if (PrRoundBox2Df (q, bldSz.xz + 2., 0.5) < 0.) {\n      col = vec3 (0.25);\n      vn = vec3 (0., 1., 0.);\n      vf = vec2 (4., 1.);\n    } else {\n      col = colG;\n      vn = GrndNf (p);\n    }\n  }\n  col *= GrndWhlShd (p);\n  st = TrailShd (p);\n  vf *= 1. + 2. * step (st, 0.99);\n  vf.y *= 1. - smoothstep (0.5, 0.8, dstGrnd / dstFar);\n  if (vf.y > 0.) vn = VaryNf (vf.x * vec3 (p.x, 0., p.y), vn, vf.y);\n  col *= (0.2 + 0.8 * sh * max (dot (vn, sunDir), 0.)) * (0.5 + 0.5 * st);\n  return col;\n}\n\nvec3 SkyBgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol, skCol;\n  vec2 q;\n  float f, fd, ff, sd;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n    col = vec3 (0.3, 0.4, 0.5);\n  } else {\n    q = 0.01 * (ro.xz + 2. * tCur + ((100. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    sd = max (dot (rd, sunDir), 0.);\n    skCol = vec3 (0.3, 0.4, 0.8) + step (0.1, sd) * vec3 (1., 1., 0.9) *\n       min (0.3 * pow (sd, 64.) + 0.5 * pow (sd, 2048.), 1.);\n    col = mix (skCol, clCol, 0.1 + 0.9 * f * smoothstep (0.01, 0.1, rd.y));\n  }\n  return col;\n}\n\nvec4 CarCol (out float refFac)\n{\n  vec4 col4, colB4;\n  float r;\n  colB4 = vec4 (0.95, 0.9, 0.9, 0.2);\n  col4 = colB4;\n  if (idObj == idBod) {\n    if (! inCab) {\n      if (abs (qHit.z) < wlBase.z + wlRad + 0.2) col4.rgb *= 0.7 + 0.3 *\n         smoothstep (0., 0.02, abs (length (vec2 (qHit.y + 1.1, wlBase.z *\n         (fract (qHit.z / wlBase.z + 0.5) - 0.5))) - wlRad - 0.14) - 0.02);\n      col4.rgb *= 0.7 + 0.3 * smoothstep (0., 0.02, PrRoundBox2Df (vec2 (qHit.y - 0.3,\n         abs (qHit.z) - 1.05), vec2 (0.3, 0.75), 0.2) - 0.04);\n      col4.rgb *= 0.7 + 0.3 * smoothstep (0., 0.02, PrRoundBox2Df (vec2 (abs (qHit.x) - 0.6,\n         qHit.y - 0.3), vec2 (0.3, 0.25), 0.2) - 0.04);\n      if (qHit.y > 0.) col4.rgb *= 0.7 + 0.3 * smoothstep (0., 0.02,\n         PrRoundBox2Df (vec2 (qHit.x, qHit.z - 0.8), vec2 (0.8, 0.5), 0.2) - 0.04);\n    } else {\n      col4 *= 0.5;\n    }\n  } else if (idObj == idCam) {\n    col4.rgb *= 0.1 + 0.9 * smoothstep (0., 0.02, length (vec2 (qHit.y, dot (qHit.zx,\n       sin (2. * pi * floor (12. * atan (qHit.z, - qHit.x) / (2. * pi) + 0.5) / 12. +\n       vec2 (0.5 * pi, 0.))))) - 0.12); \n  } else if (idObj == idAx) {\n    col4 = vec4 (0.3, 0.3, 0.4, 0.1);\n  } else if (idObj == idWhl) {\n    r = wlRad - length (qHit.yz);\n    if (r < 0.17) {\n      col4 = vec4 (0.3, 0.3, 0.3, 0.);\n      if (r < 0.07) col4 *= 1. - 0.5 * abs (step (0., cos (32. * pi * qHit.x)) -\n         step (0.5, mod (32. * atan (qHit.z, - qHit.y) / (2. * pi) + 0.5, 1.)));\n    } else if (r < 0.2 || qHit.x < 0.) {\n      col4 *= 0.5;\n    }\n  } else if (idObj == idStr) {\n    col4 = vec4 (0.9, 0.9, 0.7, 0.2);\n  } else if (idObj == idStk) {\n    col4 = vec4 (0.9, 0.9, 0.7, 0.2);\n  } else if (idObj == idSeat) {\n    col4 = vec4 (0.9, 0.7, 0.4, 0.05) * (0.95 + 0.05 * cos (64. * qHit.x));\n  } else if (idObj == idWLit) {\n    col4 = (onPath > 0.) ? vec4 (0., 0.8, 0., -1.) : vec4 (0.8, 0., 0., -1.);\n  } else if (idObj == idLit) {\n    if (abs (strRot) > 0.03 * pi && strRot * qHit.x < 0. && abs (qHit.x) > 0.95 &&\n       mod (2. * tCur, 1.) > 0.5) col4 = vec4 (0.7, 0.7, 0., -1.);\n    else col4 = (qHit.z > 0.) ? vec4 (1., 1., 0.95, -1.) : vec4 (0.9, 0., 0., -1.);\n    col4.rgb *= 0.8 + 0.2 * smoothstep (0., 0.02, abs (abs (qHit.x) - 0.95));\n  }\n  refFac = 0.;\n  if (col4 == colB4) refFac = 0.3;\n  return col4;\n}\n\nvec3 HorizCol (vec3 col, vec3 rd)\n{\n  return mix (col, vec3 (0.3, 0.4, 0.5), pow (1. + rd.y, 16.));\n}\n\nvec4 BldCol (inout vec3 vn)\n{\n  vec4 col4;\n  vec2 g, vf;\n  float h, s, bn;\n  h = mod (dot (gId + mOff, vec2 (17.11, 21.11)), 1.);\n  vf = vec2 (0.);\n  if (idObj == idBld) {\n    col4 = vec4 (HsvToRgb (vec3 (h, 0.4, 0.8)), 0.1);\n    if (PrBoxDf (qHit, bldSz) < 0.) {\n      col4 *= 0.3;\n      if (vn.y < -0.95) col4 = mix (vec4 (1., 1., 0.5, -1.), col4, \n         step (0.5, length (mod (qHit.xz + 2., 4.) - 2.)));\n    } else {\n      s = 0.;\n      g = vec2 (dot (qHit.xz, normalize (vec2 (- vn.z, vn.x))) - 1.3, qHit.y + bldSz.y - 0.8);\n      if (Maxv2 (abs (vn.xz)) > 0.99 && PrBox2Df (g, vec2 (3., 1.)) < 0.1) {\n        bn = dot (mod (gId + 31. + floor (0.4 * mOff), 100.), vec2 (100., 1.));\n        s = ShowIntPZ (g, vec2 (2.4, 0.6), 4., bn);\n        if (s > 0.) col4 = vec4 (1., 1., 0.8, -1.);\n      }\n      if (s == 0.) vf = vec2 (16., 0.5);\n    }\n  } else if (idObj == idTree) {\n    col4 = vec4 (HsvToRgb (vec3 (mod (0.25 + 0.2 * h, 1.), 0.6, 0.9)), 0.);\n    vf = vec2 (32., 1.);\n  }\n  if (vf.y > 0.) vn = VaryNf (vf.x * qHit, vn, vf.y);\n  return col4;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 roo, rdo, col, colR, vn, qHitG, q;\n  float dstObjG, dstObj, dstTrObj, dstGrnd, nDotL, refFac, sh;\n  int idObjG;\n  roo = ro;\n  rdo = rd;\n  isSh = false;\n  isTran = false;\n  carSz = vec3 (wlBase.x + 0.05, 1.2, wlBase.z + 1.);\n  for (int k = VAR_ZERO; k < 6; k ++) {\n    axRot[k] = vec2 (2. * mod (float (k), 2.), float (k / 2)) - 1.;\n    wlRotCs[k] = sin (- strRot * axRot[k].y + vec2 (0.5 * pi, 0.));\n    wlAngCs[k] = sin (- ((axRot[k].y != 1.) ? ((axRot[k].x < 0.) ? wlRot.x : wlRot.y) :\n       ((axRot[k].x < 0.) ? wlRot.z : wlRot.w)) + vec2 (0.5 * pi, 0.));\n  }\n  dstObjG = GObjRay (ro, rd);\n  idObjG = idObj;\n  qHitG = qHit;\n  dstObj = ObjRay (ro, rd);\n  if (dstObjG < min (dstObj, dstFar)) {\n    idObj = idObjG;\n    qHit = qHitG;\n    dstObj = dstObjG;\n  }\n  if (dstObj < dstFar) {\n    ro += dstObj * rd;\n    vn = (idObj == idObjG) ? GObjNf (ro) : ObjNf (ro);\n    if (idObj == idBod) inCab = (PrRound4BoxDf (qHit, carSz - 1., 1.) < 0.03);\n    refFac = 0.;\n    col4 = (idObj == idObjG) ? BldCol (vn) : CarCol (refFac);\n    if (col4.a >= 0.) {\n      nDotL = max (dot (vn, sunDir), 0.);\n      if (idObj != idObjG) {\n        sh = ObjSShadow (ro + 0.01 * vn, sunDir);\n      } else {\n        sh = 1.;\n        nDotL *= nDotL;\n      }\n      col = col4.rgb * (0.2 + 0.8 * sh * nDotL) + col4.a * step (0.95, sh) *\n         pow (max (dot (sunDir, reflect (rd, vn)), 0.), 32.);\n      if (idObj == idObjG) col = mix (col, 0.9 * HorizCol (GrndCol (ro.xz, dstGrnd, sh),\n         rd), smoothstep (0.85, 0.95, dstObj / dstFar));\n      if (refFac > 0.) rd = reflect (rd, vn);\n    } else if (col4.a == -1.) {\n      col = col4.rgb * (0.5 - 0.5 * dot (rd, vn));\n    }\n  }\n  if (dstObj >= dstFar || refFac > 0.) {\n    if (rd.y < 0.) {\n      dstGrnd = - ro.y / rd.y;\n      ro += dstGrnd * rd;\n      sh = (dstGrnd < dstFar) ? min (ObjSShadow (ro + 0.01 * vec3 (0., 1., 0.), sunDir),\n         GObjSShadow (ro + 0.01 * vec3 (0., 1., 0.), sunDir)) : 1.;\n      colR = HorizCol (GrndCol (ro.xz, dstGrnd, sh), rd);\n    } else {\n      colR = SkyBgCol (ro, rd);\n    }\n    col = (refFac > 0.) ? mix (col, 0.9 * colR, refFac) : colR;\n  }\n  dstTrObj = TrObjRay (roo, rdo);\n  if (dstTrObj < min (dstObj, dstFar)) {\n    ro = roo + dstTrObj * rdo;\n    vn = TrObjNf (ro);\n    col *= vec3 (0.9, 1., 0.9);\n    rd = reflect (rdo, vn);\n    col = mix (col, SkyBgCol (ro, rd), 0.2 + 0.8 * pow (1. - abs (dot (vn, rd)), 5.));\n  }\n  isTran = true;\n  dstObjG = GObjRay (roo, rdo);\n  if (dstObjG < min (dstObj, dstFar)) {\n    ro = roo + dstObjG * rdo;\n    vn = GObjNf (ro);\n    rd = reflect (rdo, vn);\n    col = mix (0.8 * col, SkyBgCol (ro, rd), 0.6);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat;\n  vec3 rd, ro, col, c, wgBox;\n  vec2 canvas, uv, ud, cnPos;\n  float el, az, asp, zmFac, trvDist, s, sr;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime;\n  asp = canvas.x / canvas.y;\n  stDat = Loadv4 (1);\n  wlBase = stDat.xyz;\n  wlRad = wlBase.y;\n  spd = stDat.w;\n  stDat = Loadv4 (2);\n  gSize = stDat.x;\n  rdWid = stDat.y;\n  onPath = stDat.z;\n  trvDist = stDat.w;\n  stDat = Loadv4 (3);\n  az = stDat.x;\n  el = stDat.y;\n  cnPos = stDat.zw;\n  stDat = Loadv4 (4);\n  strRot = stDat.y;\n  mOff = mod (vec2 (floor (stDat.w), floor (stDat.w / 100.)), 100.);\n  stDat = Loadv4 (5);\n  carPos = stDat;\n  stDat = Loadv4 (6);\n  wlRot = stDat;\n  el = clamp (el - 0.1 * pi, -0.49 * pi, 0.02 * pi);\n  vuMat = StdVuMat (el, az);\n  ro = carPos.xyz + vuMat * vec3 (0., 1., -12.);\n  ro.y += 2.;\n  carPos.y += wlRad;\n  zmFac = 3.5 + 2. * el;\n  dstFar = 400.;\n  sunDir = normalize (vec3 (1., 2., -1.));\n  sunDir.xz = Rot2D (sunDir.xz, - az); //vuMat * normalize (vec3 (1., 1.5, -1.));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif  \n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = vuMat * normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  wgBox = vec3 (0.41, -0.32, 0.135);\n  ud = 0.5 * uv - wgBox.xy * vec2 (asp, 1.);\n  s = (length (ud) - wgBox.z) * canvas.y;\n  col = mix (vec3 (0., 1., 1.), col, smoothstep (0., 1., abs (s) - 1.));\n  if (s < 0.) {\n    col = mix (vec3 (0., 1., 1.), col, step (1., Minv2 (abs (ud)) * canvas.y));\n    c = (onPath > 0.) ? vec3 (0., 1., 0.) : vec3 (0.8, 0., 0.);\n    col = mix (c, col,\n       smoothstep (2.5, 3.5, abs (length (ud - cnPos) * canvas.y - 10.)));\n    ud = Rot2D (ud, atan (cnPos.y, - cnPos.x));\n    if (ud.x < 0. && (length (cnPos) - length (ud)) * canvas.y > 10.)\n       col = mix (c, col, smoothstep (1.5, 2.5, abs (ud.y) * canvas.y));\n  }\n  col = mix (col, vec3 (0., 1., 1.), ShowIntPZ (0.5 * uv - vec2 (0.44 * asp, -0.15),\n     vec2 (0.06 * asp, 0.03), 4., mod (floor (trvDist / (2. * wlRad)), 1e4)));\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRound4BoxDf (vec3 p, vec3 b, float r)\n{\n  p = max (abs (p) - b, 0.);\n  return sqrt (length (p * p)) - r;\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat PrConCapsDf (vec3 p, vec2 cs, float r, float h)\n{\n  vec2 b;\n  float d;\n  d = max (dot (vec2 (length (p.xy) - r, p.z), cs), abs (p.z) - h);\n  h /= cs.x * cs.x;\n  r /= cs.x;\n  b = vec2 (r, h);\n  b *= cs.y;\n  p.z += b.x;\n  return min (d, min (length (p - vec3 (0., 0., h)) - r + b.y,\n     length (p - vec3 (0., 0., - h)) - r  - b.y));\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nfloat SmoothMax (float a, float b, float r)\n{\n  return - SmoothMin (- a, - b, r);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nfloat DigSeg (vec2 q)\n{\n  return (1. - smoothstep (0.13, 0.17, abs (q.x))) *\n     (1. - smoothstep (0.5, 0.57, abs (q.y)));\n}\n\n#define DSG(q) k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q)\n\nfloat ShowDig (vec2 q, int iv)\n{\n  float d;\n  int k, kk;\n  const vec2 vp = vec2 (0.5, 0.5), vm = vec2 (-0.5, 0.5), vo = vec2 (1., 0.);\n  if (iv == -1) k = 8;\n  else if (iv < 2) k = (iv == 0) ? 119 : 36;\n  else if (iv < 4) k = (iv == 2) ? 93 : 109;\n  else if (iv < 6) k = (iv == 4) ? 46 : 107;\n  else if (iv < 8) k = (iv == 6) ? 122 : 37;\n  else             k = (iv == 8) ? 127 : 47;\n  q = (q - 0.5) * vec2 (1.8, 2.3);\n  d = 0.;\n  kk = k;\n  DSG (q.yx - vo);  DSG (q.xy - vp);  DSG (q.xy - vm);  DSG (q.yx);\n  DSG (q.xy + vm);  DSG (q.xy + vp);  DSG (q.yx + vo);\n  return d;\n}\n\nfloat ShowIntPZ (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (min (q.x, q.y) >= 0. && max (q.x, q.y) < 1.) {\n    q.x *= mxChar;\n    nDig = mxChar;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    val = max (val, 0.);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (dot (p, cHashVA2) + vec2 (0., cHashVA2.x)) * cHashM);\n}\n\nvec3 Hashv3v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39);\n  return fract (sin (dot (p, cHashVA2) + vec3 (0., cHashVA2.xy)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e;\n  e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 128.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n",
   "name": "Image",
   "description": "",
   "type": "image"
  },
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "linear",
      "wrap": "clamp",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dXGR8",
     "channel": 0
    }
   ],
   "code": "// \"Drive the Mapper\" by dr2 - 2022\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 Rot2D (vec2 q, float a);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\nconst int npTrail = 32;  // same for image and buffer\nconst int npFst = 7;\n\nvec4 carPos;\nvec3 wlBase;\nfloat gSize, rdWid;\nconst float pi = 3.1415927;\nconst float txRow = 128.;\n\nbool OnPath ()\n{\n  vec2 p;\n  bool onP;\n  onP = true;\n  for (int k = 0; k < 6; k ++) {\n    if (k <= 1 || k >= 4) {\n      p = carPos.xz - Rot2D ((vec2 (2. * mod (float (k), 2.), float (k / 2)) - 1.) *\n         wlBase.xz, - carPos.w);\n      onP = (PrRoundBox2Df (mod (p + 0.5 * gSize, gSize) - 0.5 * gSize, vec2 (0.5 * gSize) -\n         2. * rdWid, rdWid) > 0.);\n      if (! onP) break;\n    }\n  }\n  return onP;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat, carPosP, wlRot, wr;\n  vec3 wgBox;\n  vec2 iFrag, canvas, cnPos, cp, ud, w, rTurn;\n  float todCur, tCur, autoMd, cRotN, wlRad, strRot, spd, msOff, trvDist,\n     onPath, tc, nStep, az, el, asp, s;\n  int pxId, wgSel, nFrame;\n  bool init;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (pxId >= npFst + npTrail) discard;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  todCur = iDate.w;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  init = (nFrame <= 1);\n  asp = canvas.x / canvas.y;\n  if (init) {\n    gSize = 80.;\n    msOff = mod (floor (1000. * todCur), 10000.);\n    carPos = vec4 (0.5 * gSize + 3., 0., 0., 0.);\n    strRot = 0.;\n    wlRad = 0.5;\n    wlBase = vec3 (1.4, wlRad, 1.5);\n    wlRot = vec4 (0.);\n    az = -0.3 * pi;\n    el = -0.1 * pi;\n    nStep = 0.;\n    cnPos = vec2 (0.);\n    mPtrP = mPtr;\n    wgSel = 0;\n    autoMd = 1.;\n    rdWid = 5.;\n    onPath = 0.;\n    trvDist = 0.;\n  } else {\n    stDat = Loadv4 (0);\n    mPtrP.xyz = stDat.xyz;\n    wgSel = int (stDat.w);\n    stDat = Loadv4 (1);\n    wlBase = stDat.xyz;\n    stDat = Loadv4 (2);\n    gSize = stDat.x;\n    rdWid = stDat.y;\n    onPath = stDat.z;\n    trvDist = stDat.w;\n    stDat = Loadv4 (3);\n    az = stDat.x;\n    el = stDat.y;\n    cnPos = stDat.zw;\n    stDat = Loadv4 (4);\n    nStep = stDat.x;\n    strRot = stDat.y;\n    autoMd = stDat.z;\n    msOff = stDat.w;\n    stDat = Loadv4 (5);\n    carPos = stDat;\n    stDat = Loadv4 (6);\n    wlRot = stDat;\n  }\n  if (pxId < npFst) {\n    wgBox = vec3 (0.41, -0.32, 0.135);\n    if (mPtr.z > 0.) {\n      if (wgSel == 0 && mPtrP.z > 0.) {\n        az = -2. * pi * mPtr.x;\n        el = - pi * mPtr.y;\n      } else {\n        ud = mPtr.xy * vec2 (asp, 1.) - wgBox.xy * vec2 (asp, 1.);\n        if (wgSel == 1) {\n          autoMd = - tCur;\n          cnPos = ud;\n          s = length (cnPos);\n          if (s > 0.) cnPos = min (s, wgBox.z) * cnPos / s;\n        } else if (mPtrP.z <= 0. && length (ud) < wgBox.z) wgSel = 1;\n      }\n    } else {\n      wgSel = 0;\n      cnPos *= vec2 (1. - 1e-2, 1. - 2e-3);\n    }\n    wlRad = wlBase.y;\n    ++ nStep;\n    if (autoMd > 0.) {\n      tc = mod (0.004 * nStep, 4.);\n      strRot = 0.04 * pi * SmoothBump (0.3, 0.7, 0.1, mod (tc, 1.)) * sign (mod (tc, 2.) - 1.) *\n         sign (tc - 2.);\n      spd = 0.7 * (0.12 - 0.06 * abs (strRot / (0.15 * pi)));\n      w = vec2 (- strRot / (0.15 * pi), spd / 0.5);\n      w = pow (abs (w), 1. / vec2 (1.5)) * sign (w);\n      cnPos = w * wgBox.z;\n    } else {\n      w = cnPos / wgBox.z;\n      w = pow (abs (w), vec2 (1.5)) * sign (w);\n      strRot = -0.15 * pi * w.x;\n      spd = 0.2 * w.y * smoothstep (0.01, 0.02, abs (w.y));\n      if (tCur + autoMd > 20.) autoMd = 1.;\n    }\n    carPosP = carPos;\n    cp = carPos.xz;\n    wr = vec4 (1.);\n    if (abs (strRot) > 1e-4) {\n      cRotN = carPos.w - strRot * spd / pi;\n      rTurn.x = wlBase.z / asin (strRot);\n      s = wlBase.z / rTurn.x;\n      rTurn.y = rTurn.x * sqrt (1. - s * s);\n      carPos.xz += 2. * rTurn.x * (sin (carPos.w - vec2 (0.5 * pi, 0.)) -\n         sin (cRotN - vec2 (0.5 * pi, 0.)));\n      carPos.w = mod (cRotN, 2. * pi);\n      wr += wlBase.x * vec4 (-1., 1., -1., 1.) / rTurn.xxyy;\n    } else {\n      carPos.xz += spd * sin (carPos.w + vec2 (0., 0.5 * pi));\n    }\n    onPath = OnPath () ? 1. : 0.;\n    if (onPath > 0.) {\n      wlRot += wr * spd / wlRad;\n      if (spd > 0.) trvDist += length (carPos.xz - cp);\n    } else {\n      carPos = carPosP;\n      spd = 0.;\n      trvDist = 0.;\n    }\n  }\n  if (! init) {\n    if (mod (float (nFrame), 12.) == 0.) {\n      if (pxId == npFst) stDat = vec4 (Loadv4 (5).xzw, tCur);\n      else if (pxId < npFst + npTrail) stDat = Loadv4 (pxId - 1);\n    } else if (pxId >= npFst && pxId < npFst + npTrail) stDat = Loadv4 (pxId);\n  } else {\n    stDat = vec4 (0., 0., -1., 0.);\n  }\n  if      (pxId == 0) stDat = vec4 (mPtr.xyz, float (wgSel));\n  else if (pxId == 1) stDat = vec4 (wlBase, spd);\n  else if (pxId == 2) stDat = vec4 (gSize, rdWid, onPath, trvDist);\n  else if (pxId == 3) stDat = vec4 (az, el, cnPos);\n  else if (pxId == 4) stDat = vec4 (nStep, strRot, autoMd, msOff);\n  else if (pxId == 5) stDat = carPos;\n  else if (pxId == 6) stDat = wlRot;\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n",
   "name": "Buffer A",
   "description": "",
   "type": "buffer"
  }
 ]
}