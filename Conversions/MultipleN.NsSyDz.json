{
 "ver": "0.1",
 "info": {
  "id": "NsSyDz",
  "date": "0",
  "viewed": 0,
  "name": "Fork Multiple N JiPi 456",
  "description": "Continuous Multiple Neighborhood Cellular Automata",
  "likes": 0,
  "published": "Private",
  "usePreview": 0,
  "tags": [
   "2d",
   "simulation",
   "diffusion",
   "automata",
   "life",
   "chaos",
   "cellular",
   "conway",
   "gameoflife",
   "cellularautomata",
   "cellularautomata",
   "cgol"
  ],
  "hasliked": 0,
  "parentid": "7dByzw",
  "parentname": "Multiple Neighborhood CA 2"
 },
 "renderpass": [
  {
   "inputs": [
    {
     "id": "XsXGR8",
     "filepath": "/media/previz/buffer01.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "nearest",
      "wrap": "repeat",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dfGRr",
     "channel": 0
    }
   ],
   "code": "//\t----    ----    ----    ----    ----    ----    ----    ----\n//  Shader developed by Slackermanz\n//\n//  Info/Code:\n//  ﻿ - Website: https://slackermanz.com\n//  ﻿ - Github: https://github.com/Slackermanz\n//  ﻿ - Shadertoy: https://www.shadertoy.com/user/SlackermanzCA\n//  ﻿ - Discord: https://discord.gg/hqRzg74kKT\n//  \n//  Socials:\n//  ﻿ - Discord DM: Slackermanz#3405\n//  ﻿ - Reddit DM: https://old.reddit.com/user/slackermanz\n//  ﻿ - Twitter: https://twitter.com/slackermanz\n//  ﻿ - YouTube: https://www.youtube.com/c/slackermanz\n//  ﻿ - Older YT: https://www.youtube.com/channel/UCZD4RoffXIDoEARW5aGkEbg\n//  ﻿ - TikTok: https://www.tiktok.com/@slackermanz\n//  \n//  Communities:\n//  ﻿ - Reddit: https://old.reddit.com/r/cellular_automata\n//  ﻿ - Artificial Life: https://discord.gg/7qvBBVca7u\n//  ﻿ - Emergence: https://discord.com/invite/J3phjtD\n//  ﻿ - ConwayLifeLounge: https://discord.gg/BCuYCEn\n//\t----    ----    ----    ----    ----    ----    ----    ----\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = texelFetch( iChannel0, ivec2(gl_FragCoord[0], gl_FragCoord[1]), 0); }",
   "name": "Image",
   "description": "",
   "type": "image"
  },
  {
   "inputs": [
    {
     "id": "XsXGR8",
     "filepath": "/media/previz/buffer01.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "nearest",
      "wrap": "repeat",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "4dXGR8",
     "channel": 0
    }
   ],
   "code": "//\t----    ----    ----    ----    ----    ----    ----    ----\n//  Shader developed by Slackermanz\n//\n//  Info/Code:\n//  ﻿ - Website: https://slackermanz.com\n//  ﻿ - Github: https://github.com/Slackermanz\n//  ﻿ - Shadertoy: https://www.shadertoy.com/user/SlackermanzCA\n//  ﻿ - Discord: https://discord.gg/hqRzg74kKT\n//  \n//  Socials:\n//  ﻿ - Discord DM: Slackermanz#3405\n//  ﻿ - Reddit DM: https://old.reddit.com/user/slackermanz\n//  ﻿ - Twitter: https://twitter.com/slackermanz\n//  ﻿ - YouTube: https://www.youtube.com/c/slackermanz\n//  ﻿ - Older YT: https://www.youtube.com/channel/UCZD4RoffXIDoEARW5aGkEbg\n//  ﻿ - TikTok: https://www.tiktok.com/@slackermanz\n//  \n//  Communities:\n//  ﻿ - Reddit: https://old.reddit.com/r/cellular_automata\n//  ﻿ - Artificial Life: https://discord.gg/7qvBBVca7u\n//  ﻿ - Emergence: https://discord.com/invite/J3phjtD\n//  ﻿ - ConwayLifeLounge: https://discord.gg/BCuYCEn\n//\t----    ----    ----    ----    ----    ----    ----    ----\n\n#define txdata (iChannel0)\n#define PI 3.14159265359\n#define LN 2.71828182846\n\nconst uint MAX_RADIUS = 12u;\n\nuint[64] ub =  uint[64]\n(   4086443839u, 803560891u, 3521573439u, 155586747u, \n    2355529581u, 3804082561u, 1278181521u, 1198599219u, \n    790900093u, 2043079403u, 72510135u, 329989440u, \n    1205735441u, 1165390975u, 1863025477u, 1552315409u, \n    1460749058u, 1961704519u, 1063988442u, 304586942u, \n    1969173229u, 623707175u, 2719649363u, 533620173u, \n    734380903u, 1866742626u, 69847740u, 779938642u, \n    3928012151u, 1597352029u, 1939485308u, 1599391651u, \n    824038858u, 498247516u, 609160531u, 634145519u, \n    2022645937u, 4285315796u, 87513080u, 246410766u, \n    1160189374u, 688725303u, 1266836767u, 670912482u, \n    2162941226u, 1742659144u, 481786434u, 3618106514u, \n    0u, 0u, 0u, 0u, \n    0u, 0u, 0u, 0u, \n    0u, 0u, 0u, 0u, \n    0u, 1067687164u, 1122344419u, 0u );\n\nuint u32_upk(uint u32, uint bts, uint off) { return (u32 >> off) & ((1u << bts)-1u); }\n\nfloat lmap() { return (gl_FragCoord[0] / float(textureSize(txdata,0)[0])); }\nfloat vmap() { return (gl_FragCoord[1] / float(textureSize(txdata,0)[1])); }\nfloat cmap() { return sqrt\t( ((gl_FragCoord[0] - float(textureSize(txdata,0)[0])*0.5) / float(textureSize(txdata,0)[0])*0.5)\n\t\t\t\t\t\t\t* ((gl_FragCoord[0] - float(textureSize(txdata,0)[0])*0.5) / float(textureSize(txdata,0)[0])*0.5)\n\t\t\t\t\t\t\t+ ((gl_FragCoord[1] - float(textureSize(txdata,0)[1])*0.5) / float(textureSize(txdata,0)[1])*0.5)\n\t\t\t\t\t\t\t* ((gl_FragCoord[1] - float(textureSize(txdata,0)[1])*0.5) / float(textureSize(txdata,0)[1])*0.5) ); }\nfloat vwm() {\n\tfloat \tscale_raw \t= uintBitsToFloat(ub[62]);\n\tfloat \tzoom \t\t= uintBitsToFloat(ub[61]);\n\tfloat\tscale_new\t= scale_raw;\n\tuint \tmode \t\t= u32_upk(ub[59], 2u, 0u);\n\tif( mode == 1u ) { //\tLinear Parameter Map\n\t\tscale_new = ((lmap() + zoom) * (scale_raw / (1.0 + zoom * 2.0))) * 2.0; }\n\tif( mode == 2u ) { //\tCircular Parameter Map\n\t\tscale_new = ((sqrt(cmap()) + zoom) * (scale_raw / (1.0 + zoom * 2.0))) * 2.0; }\n\treturn scale_new; }\n    \nfloat  tp(uint n, float s) \t\t\t{ return (float(n+1u)/256.0) * ((s*0.5)/128.0); }\nfloat utp(uint v, uint  w, uint o) \t{ return tp(u32_upk(v,w,w*o), vwm()); }\nfloat bsn(uint v, uint  o) \t\t\t{ return float(u32_upk(v,1u,o)*2u)-1.0; }\n    \nvec4  sigm(vec4  x, float w) { return 1.0 / ( 1.0 + exp( (-w*2.0 * x * (PI/2.0)) + w * (PI/2.0) ) ); }\nfloat hmp2(float x, float w) { return 3.0*((x-0.5)*(x-0.5))+0.25; }\n\nvec4  gdv( ivec2 of, sampler2D tx ) {\n\tof \t\t= ivec2(gl_FragCoord) + of;\n\tof[0] \t= (of[0] + textureSize(tx,0)[0]) % (textureSize(tx,0)[0]);\n\tof[1] \t= (of[1] + textureSize(tx,0)[1]) % (textureSize(tx,0)[1]);\n\treturn \ttexelFetch( tx, of, 0); }\n    \nvec4 nbhd( vec2 r, sampler2D tx ) {\n//\tPrecision limit of signed float32 for [n] neighbors in a 16 bit texture (symmetry preservation)\n\tuint\tchk = 2147483648u /\n\t\t\t(\t( \tuint( r[0]*r[0]*PI + r[0]*PI + PI\t)\n\t\t\t\t- \tuint( r[1]*r[1]*PI + r[1]*PI\t\t) ) * 128u );\n\tfloat\tpsn = (chk >= 65536u) ? 65536.0 : float(chk);\n\tvec4\ta = vec4(0.0,0.0,0.0,0.0);\n\tfloat\tw = 1.0;\t// Weighting, unused\n\tif(r[0] == 0.0) { return vec4( gdv( ivec2(0,0), tx )*w*psn ); }\n\telse \t\t\t{\n\t\tfor(float i = 0.0; i <= r[0]; i++) {\n\t\t\tfor(float j = 1.0; j <= r[0]; j++) {\n\t\t\t\tfloat\td = round(sqrt(i*i+j*j));\n\t\t\t\t\t\tw = 1.0;\t//\tPer-Neighbor Weighting, unused\n\t\t\t\tif( d <= r[0] && d > r[1] ) {\n\t\t\t\t\tvec4 t0  = gdv( ivec2( i, j), tx ) * w * psn; a += t0 - fract(t0);\n\t\t\t\t\tvec4 t1  = gdv( ivec2( j,-i), tx ) * w * psn; a += t1 - fract(t1);\n\t\t\t\t\tvec4 t2  = gdv( ivec2(-i,-j), tx ) * w * psn; a += t2 - fract(t2);\n\t\t\t\t\tvec4 t3  = gdv( ivec2(-j, i), tx ) * w * psn; a += t3 - fract(t3); } } }\n\t\treturn a; } }\n\nvec4 totl( vec2 r, sampler2D tx ) {\n//\tPrecision limit of signed float32 for [n] neighbors in a 16 bit texture (symmetry preservation)\n\tuint\tchk = 2147483648u /\n\t\t\t(\t( \tuint( r[0]*r[0]*PI + r[0]*PI + PI\t)\n\t\t\t\t- \tuint( r[1]*r[1]*PI + r[1]*PI\t\t) ) * 128u );\n\tfloat\tpsn = (chk >= 65536u) ? 65536.0 : float(chk);\n\tvec4\tb = vec4(0.0,0.0,0.0,0.0);\n\tfloat\tw = 1.0;\t// Weighting, unused\n\tif(r[0] == 0.0) { return vec4( psn * w, psn * w, psn * w, psn * w ); }\n\telse \t\t\t{\n\t\tfor(float i = 0.0; i <= r[0]; i++) {\n\t\t\tfor(float j = 1.0; j <= r[0]; j++) {\n\t\t\t\tfloat\td = round(sqrt(i*i+j*j));\n\t\t\t\t\t\tw = 1.0;\t//\tPer-Neighbor Weighting, unused\n\t\t\t\tif( d <= r[0] && d > r[1] ) { b += psn * w * 4.0; } } }\n\t\treturn b; } }\n\nvec4 bitring(vec4[MAX_RADIUS] rings_a, vec4[MAX_RADIUS] rings_b, uint bits, uint of) {\n\tvec4 sum = vec4(0.0,0.0,0.0,0.0);\n\tvec4 tot = vec4(0.0,0.0,0.0,0.0);\n\tfor(uint i = 0u; i < MAX_RADIUS; i++) {\n\t\tif(u32_upk(bits, 1u, i+of) == 1u) { sum += rings_a[i]; tot += rings_b[i]; } }\n\treturn sigm( (sum / tot), LN ); } // TODO\n    \nvec4 conv(vec2 r, sampler2D tx) {\n\tvec4 nha = nbhd(r, tx);\n\tvec4 nhb = totl(r, tx);\n\treturn \tnha / nhb; }\n    \n//\tUsed to reseed the surface with lumpy noise\nfloat get_xc(float x, float y, float xmod) {\n\tfloat sq = sqrt(mod(x*y+y, xmod)) / sqrt(xmod);\n\tfloat xc = mod((x*x)+(y*y), xmod) / xmod;\n\treturn clamp((sq+xc)*0.5, 0.0, 1.0); }\nfloat shuffle(float x, float y, float xmod, float val) {\n\tval = val * mod( x*y + x, xmod );\n\treturn (val-floor(val)); }\nfloat get_xcn(float x, float y, float xm0, float xm1, float ox, float oy) {\n\tfloat  xc = get_xc(x+ox, y+oy, xm0);\n\treturn shuffle(x+ox, y+oy, xm1, xc); }\nfloat get_lump(float x, float y, float nhsz, float xm0, float xm1) {\n\tfloat \tnhsz_c \t= 0.0;\n\tfloat \txcn \t= 0.0;\n\tfloat \tnh_val \t= 0.0;\n\tfor(float i = -nhsz; i <= nhsz; i += 1.0) {\n\t\tfor(float j = -nhsz; j <= nhsz; j += 1.0) {\n\t\t\tnh_val = round(sqrt(i*i+j*j));\n\t\t\tif(nh_val <= nhsz) {\n\t\t\t\txcn = xcn + get_xcn(x, y, xm0, xm1, i, j);\n\t\t\t\tnhsz_c = nhsz_c + 1.0; } } }\n\tfloat \txcnf \t= ( xcn / nhsz_c );\n\tfloat \txcaf\t= xcnf;\n\tfor(float i = 0.0; i <= nhsz; i += 1.0) {\n\t\t\txcaf \t= clamp((xcnf*xcaf + xcnf*xcaf) * (xcnf+xcnf), 0.0, 1.0); }\n\treturn xcaf; }\nfloat reseed(uint seed, float scl, float amp) {\n\tfloat \tfx = gl_FragCoord[0];\n\tfloat \tfy = gl_FragCoord[1];\n\tfloat \tr0 = get_lump(fx, fy, round( 6.0  * scl), 19.0 + mod(float(u32_upk(ub[63], 24u, 0u)+seed),17.0), 23.0 + mod(float(u32_upk(ub[63], 24u, 0u)+seed),43.0));\n\tfloat \tr1 = get_lump(fx, fy, round( 22.0 * scl), 13.0 + mod(float(u32_upk(ub[63], 24u, 0u)+seed),29.0), 17.0 + mod(float(u32_upk(ub[63], 24u, 0u)+seed),31.0));\n\tfloat \tr2 = get_lump(fx, fy, round( 14.0 * scl), 13.0 + mod(float(u32_upk(ub[63], 24u, 0u)+seed),11.0), 51.0 + mod(float(u32_upk(ub[63], 24u, 0u)+seed),37.0));\n\tfloat \tr3 = get_lump(fx, fy, round( 18.0 * scl), 29.0 + mod(float(u32_upk(ub[63], 24u, 0u)+seed), 7.0), 61.0 + mod(float(u32_upk(ub[63], 24u, 0u)+seed),28.0));\n\treturn clamp( sqrt((r0+r1)*r3*(amp+1.2))-r2*(amp*1.8+0.2) , 0.0, 1.0); }\n\nstruct ConvData {\n\tvec4 \tvalue;\n\tfloat \ttotal;\n};\n\n\nConvData ring( float r ) {\n\n\tconst float psn = 32768.0;\n\n\tfloat tot = 0.0;\n\tvec4  val = vec4(0.0,0.0,0.0,0.0);\n\n\tfloat sq2\t= sqrt(2.0);\n\n\tfloat o_0 = r + 0.5;\n\tfloat o_1 = sq2 * o_0;\n\tfloat o_2 = o_1 / 2.0;\n\tfloat o_3 = sqrt( o_0*o_0 - r*r );\n\tfloat o_4 = o_2 - ( floor(o_2) + 0.5 );\n\tfloat o_5 = floor( o_2 ) + floor( o_4 );\n\n\tfloat i_0 = r - 0.5;\n\tfloat i_1 = sq2 * i_0;\n\tfloat i_2 = i_1 / 2.0;\n\tfloat i_3 = sqrt( i_0*i_0 - r*r );\n\tfloat i_4 = i_2 - ( floor(i_2) + 1.0 );\n\tfloat i_5 = floor( i_2 ) + floor( i_4 );\n\n\tfloat d_0 = ( i_5 ) + 1.0 - ( o_5 );\n\n\tfor(float i = 1.0; i < floor( i_2 ) + 1.0 - d_0; i++) {\n\n\t\tfloat j_0 = sqrt( o_0*o_0 - (i+0.0)*(i+0.0) );\n\t\tfloat j_1 = sqrt( i_0*i_0 - (i+0.0)*(i+0.0) );\n\t\tfloat j_2 = ( 1.0 - abs( sign ( (floor( i_2 ) + 1.0) - i ) ) );\n\n\t\tfor(float j = floor( j_1 ) + j_2; j < floor( j_0 ); j++) {\n\t\t\tval += floor(gdv(ivec2( i, (int(j)+1)), txdata) * psn);\n\t\t\tval += floor(gdv(ivec2( i,-(int(j)+1)), txdata) * psn);\n\t\t\tval += floor(gdv(ivec2(-i,-(int(j)+1)), txdata) * psn);\n\t\t\tval += floor(gdv(ivec2(-i, (int(j)+1)), txdata) * psn);\n\t\t\tval += floor(gdv(ivec2( (int(j)+1), i), txdata) * psn);\n\t\t\tval += floor(gdv(ivec2( (int(j)+1),-i), txdata) * psn);\n\t\t\tval += floor(gdv(ivec2(-(int(j)+1),-i), txdata) * psn);\n\t\t\tval += floor(gdv(ivec2(-(int(j)+1), i), txdata) * psn);\n\t\t\ttot += 8.0 * psn; } }\n\n//\tOrthagonal\n\tval += floor(gdv(ivec2( r, 0), txdata) * psn);\n\tval += floor(gdv(ivec2( 0,-r), txdata) * psn);\n\tval += floor(gdv(ivec2(-r,-0), txdata) * psn);\n\tval += floor(gdv(ivec2(-0, r), txdata) * psn);\n\ttot += 4.0 * psn;\n\n//\tDiagonal\n//\tTODO This is not quite perfect\n\tfloat k_0 = r;\n\tfloat k_1 = sq2 * k_0;\n\tfloat k_2 = k_1 / 2.0;\n\tfloat k_3 = sqrt( k_0*k_0 - r*r );\n\tfloat k_4 = k_2 - ( floor(k_2) + 1.0 );\n\tfloat k_5 = floor( k_2 ) + floor( k_4 );\n\n\tfloat dist = round(k_2);\n\n\tif( sign( o_4 ) == -1.0 ) {\n\t//\tval += gdv(ivec2( (floor(o_5)+1), floor(o_5)+1), txdata);\n\t\tval += floor(gdv(ivec2( (floor(o_5)+1.0), (floor(o_5)+1.0)), txdata) * psn);\n\t\tval += floor(gdv(ivec2( (floor(o_5)+1.0),-(floor(o_5)+1.0)), txdata) * psn);\n\t\tval += floor(gdv(ivec2(-(floor(o_5)+1.0),-(floor(o_5)+1.0)), txdata) * psn);\n\t\tval += floor(gdv(ivec2(-(floor(o_5)+1.0), (floor(o_5)+1.0)), txdata) * psn);\n\t\ttot += 4.0 * psn; }\n\n\treturn ConvData( val, tot ); }\n\n\nvec4 conv( float r ) {\n\tConvData nh = ring( r );\n\treturn \tnh.value / nh.total; }\n    \nvec4 bitmake(ConvData[MAX_RADIUS] rings, uint bits, uint of) {\n\tvec4  sum = vec4(0.0,0.0,0.0,0.0);\n\tfloat tot = 0.0;\n\tfor(uint i = 0u; i < MAX_RADIUS; i++) {\n\t\tif(u32_upk(bits, 1u, i+of) == 1u) { sum += rings[i].value; tot += rings[i].total; } }\n\treturn sum / tot; }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n//\t----    ----    ----    ----    ----    ----    ----    ----\n//\tRule Initilisation\n//\t----    ----    ----    ----    ----    ----    ----    ----\n\n//\tNH Rings\n\tConvData[MAX_RADIUS] nh_rings_m;\n\tfor(uint i = 0u; i < MAX_RADIUS; i++) { nh_rings_m[i] = ring(float(i+1u)); }\n\n//\tParameters\n\tconst\tfloat \tmnp \t= 1.0 / 65536.0;\t\t\t//\tMinimum value of a precise step for 16-bit channel\n\tconst\tfloat \ts  \t\t= mnp *  80.0 *  128.0;\n\tconst\tfloat \tn  \t\t= mnp *  80.0 *   2.0;\n\n//\tOutput Values\n\tvec4 res_c = gdv( ivec2(0, 0), txdata );\n\n//\tResult Values\n\tvec4 res_v = res_c;\n\n//\t----    ----    ----    ----    ----    ----    ----    ----\n//\tUpdate Functions\n//\t----    ----    ----    ----    ----    ----    ----    ----\n\n\tuint[12] nb = uint[12] (\n\t\tub[0],  ub[1],  ub[2],  ub[3],\n\t\tub[4],  ub[5],  ub[6],  ub[7],\n\t\tub[8],  ub[9],  ub[10], ub[11] );\n\n\tuint[24] ur = uint[24] (\n\t\tub[12], ub[13], ub[14], ub[15], \n\t\tub[16], ub[17], ub[18], ub[19],\t\n\t\tub[20], ub[21], ub[22], ub[23],\n\t\tub[24], ub[25], ub[26], ub[27],\t\n\t\tub[28], ub[29], ub[30], ub[31], \n\t\tub[32], ub[33], ub[34], ub[35]  );\n\n\tuint[ 3] ch2 = uint[ 3] ( 2286157824u, 295261525u, 1713547946u );\n\tuint[ 3] ch  = uint[ 3] ( ub[38], ub[39], ub[40] );\n\tuint[ 3] ch3 = uint[ 3] ( ub[41], ub[42], ub[43] );\n\n//\tUpdate Sign\n\tuint[ 2] us = uint[ 2] ( ub[36], ub[37] );\n\n\tvec4[12] smnca_res = vec4[12](res_c,res_c,res_c,res_c,res_c,res_c,res_c,res_c,res_c,res_c,res_c,res_c);\n\n\tvec4 conv1 = conv(1.0);\n\n\tfor(uint i = 0u; i < 24u; i++) {\n\t\tuint  \tcho = u32_upk( ch[i/8u], 2u, (i*4u+0u) & 31u );\n\t\t\t\tcho = (cho == 3u) ? u32_upk( ch2[i/8u], 2u, (i*4u+0u) & 31u ) : cho;\n\t\tuint  \tchi = u32_upk( ch[i/8u], 2u, (i*4u+2u) & 31u );\n\t\t\t\tchi = (chi == 3u) ? u32_upk( ch2[i/8u], 2u, (i*4u+2u) & 31u ) : chi;\n\t\tuint  \tchm = u32_upk( ch3[i/8u], 2u, (i*4u+2u) & 31u );\n\t\t\t\tchm = (chm == 3u) ? u32_upk( ch[i/8u], 2u, (i*4u+2u) & 31u ) : chm;\n                \n\t\tvec4 nhv = bitmake( nh_rings_m, nb[i/2u], (i & 1u) * 16u );\n\n\t\tif( nhv[cho] >= utp( ur[i], 8u, 0u) && nhv[cho] <= utp( ur[i], 8u, 1u)) {\n\t\t\tsmnca_res[i/4u][chi] += bsn(us[i/16u], ((i*2u+0u) & 31u)) * s * res_c[chm]; }\n\n\t\tif( nhv[cho] >= utp( ur[i], 8u, 2u) && nhv[cho] <= utp( ur[i], 8u, 3u)) {\n\t\t\tsmnca_res[i/4u][chi] += bsn(us[i/16u], ((i*2u+1u) & 31u)) * s * res_c[chm]; } }\n\n\tuvec4 dev_idx = uvec4(0u,0u,0u,0u);\n    \n\tvec4 dev = vec4(0.0,0.0,0.0,0.0);\n\tfor(uint i = 0u; i < 6u; i++) {\n\t\tvec4 smnca_res_temp = abs(res_c - smnca_res[i]);\n\t\tif(smnca_res_temp[0] > dev[0]) { dev_idx[0] = i; dev[0] = smnca_res_temp[0]; }\n\t\tif(smnca_res_temp[1] > dev[1]) { dev_idx[1] = i; dev[1] = smnca_res_temp[1]; }\n\t\tif(smnca_res_temp[2] > dev[2]) { dev_idx[2] = i; dev[2] = smnca_res_temp[2]; }\n\t\tif(smnca_res_temp[3] > dev[3]) { dev_idx[3] = i; dev[3] = smnca_res_temp[3]; } }\n\n\tres_v[0] = smnca_res[dev_idx[0]][0];\n\tres_v[1] = smnca_res[dev_idx[1]][1];\n\tres_v[2] = smnca_res[dev_idx[2]][2];\n\tres_v[3] = smnca_res[dev_idx[3]][3];\n\n    res_c = ((res_v + (conv1 * (s*2.13333))) / (1.0 + (s*2.13333)))- 0.01 * s;\n    \n//\t----    ----    ----    ----    ----    ----    ----    ----\n//\tShader Output\n//\t----    ----    ----    ----    ----    ----    ----    ----\n\n\n    if (iMouse.z > 0. && length(iMouse.xy - fragCoord) < 14.0) {\n        res_c[0] = round(mod(float(iFrame),2.0));\n        res_c[1] = round(mod(float(iFrame),3.0));\n        res_c[2] = round(mod(float(iFrame),5.0)); }\n    if (iFrame == 0) { res_c[0] = reseed(0u, 1.0, 0.4); res_c[1] = reseed(1u, 1.0, 0.4); res_c[2] = reseed(2u, 1.0, 0.4); }\n\n//\tForce alpha to 1.0\n\tres_c[3] \t= 1.0;\n    fragColor=clamp(res_c,0.0,1.0);\n}\n\n",
   "name": "Buffer A",
   "description": "",
   "type": "buffer"
  },
  {
   "inputs": [
    {
     "id": "4dXGR8",
     "filepath": "/media/previz/buffer00.png",
     "type": "buffer",
     "channel": 0,
     "sampler": {
      "filter": "nearest",
      "wrap": "repeat",
      "vflip": "true",
      "srgb": "false",
      "internal": "byte"
     },
     "published": 1
    }
   ],
   "outputs": [
    {
     "id": "XsXGR8",
     "channel": 0
    }
   ],
   "code": "//\t----    ----    ----    ----    ----    ----    ----    ----\n//  Shader developed by Slackermanz\n//\n//  Info/Code:\n//  ﻿ - Website: https://slackermanz.com\n//  ﻿ - Github: https://github.com/Slackermanz\n//  ﻿ - Shadertoy: https://www.shadertoy.com/user/SlackermanzCA\n//  ﻿ - Discord: https://discord.gg/hqRzg74kKT\n//  \n//  Socials:\n//  ﻿ - Discord DM: Slackermanz#3405\n//  ﻿ - Reddit DM: https://old.reddit.com/user/slackermanz\n//  ﻿ - Twitter: https://twitter.com/slackermanz\n//  ﻿ - YouTube: https://www.youtube.com/c/slackermanz\n//  ﻿ - Older YT: https://www.youtube.com/channel/UCZD4RoffXIDoEARW5aGkEbg\n//  ﻿ - TikTok: https://www.tiktok.com/@slackermanz\n//  \n//  Communities:\n//  ﻿ - Reddit: https://old.reddit.com/r/cellular_automata\n//  ﻿ - Artificial Life: https://discord.gg/7qvBBVca7u\n//  ﻿ - Emergence: https://discord.com/invite/J3phjtD\n//  ﻿ - ConwayLifeLounge: https://discord.gg/BCuYCEn\n//\t----    ----    ----    ----    ----    ----    ----    ----\n\n#define txdata (iChannel0)\n#define PI 3.14159265359\n#define LN 2.71828182846\n\nconst uint MAX_RADIUS = 12u;\n\nuint[64] ub =  uint[64]\n(   4086443839u, 803560891u, 3521573439u, 155586747u, \n    2355529581u, 3804082561u, 1278181521u, 1198599219u, \n    790900093u, 2043079403u, 72510135u, 329989440u, \n    1205735441u, 1165390975u, 1863025477u, 1552315409u, \n    1460749058u, 1961704519u, 1063988442u, 304586942u, \n    1969173229u, 623707175u, 2719649363u, 533620173u, \n    734380903u, 1866742626u, 69847740u, 779938642u, \n    3928012151u, 1597352029u, 1939485308u, 1599391651u, \n    824038858u, 498247516u, 609160531u, 634145519u, \n    2022645937u, 4285315796u, 87513080u, 246410766u, \n    1160189374u, 688725303u, 1266836767u, 670912482u, \n    2162941226u, 1742659144u, 481786434u, 3618106514u, \n    0u, 0u, 0u, 0u, \n    0u, 0u, 0u, 0u, \n    0u, 0u, 0u, 0u, \n    0u, 1067687164u, 1122344419u, 0u );\n\nuint u32_upk(uint u32, uint bts, uint off) { return (u32 >> off) & ((1u << bts)-1u); }\n\nfloat lmap() { return (gl_FragCoord[0] / float(textureSize(txdata,0)[0])); }\nfloat vmap() { return (gl_FragCoord[1] / float(textureSize(txdata,0)[1])); }\nfloat cmap() { return sqrt\t( ((gl_FragCoord[0] - float(textureSize(txdata,0)[0])*0.5) / float(textureSize(txdata,0)[0])*0.5)\n\t\t\t\t\t\t\t* ((gl_FragCoord[0] - float(textureSize(txdata,0)[0])*0.5) / float(textureSize(txdata,0)[0])*0.5)\n\t\t\t\t\t\t\t+ ((gl_FragCoord[1] - float(textureSize(txdata,0)[1])*0.5) / float(textureSize(txdata,0)[1])*0.5)\n\t\t\t\t\t\t\t* ((gl_FragCoord[1] - float(textureSize(txdata,0)[1])*0.5) / float(textureSize(txdata,0)[1])*0.5) ); }\nfloat vwm() {\n\tfloat \tscale_raw \t= uintBitsToFloat(ub[62]);\n\tfloat \tzoom \t\t= uintBitsToFloat(ub[61]);\n\tfloat\tscale_new\t= scale_raw;\n\tuint \tmode \t\t= u32_upk(ub[59], 2u, 0u);\n\tif( mode == 1u ) { //\tLinear Parameter Map\n\t\tscale_new = ((lmap() + zoom) * (scale_raw / (1.0 + zoom * 2.0))) * 2.0; }\n\tif( mode == 2u ) { //\tCircular Parameter Map\n\t\tscale_new = ((sqrt(cmap()) + zoom) * (scale_raw / (1.0 + zoom * 2.0))) * 2.0; }\n\treturn scale_new; }\n    \nfloat  tp(uint n, float s) \t\t\t{ return (float(n+1u)/256.0) * ((s*0.5)/128.0); }\nfloat utp(uint v, uint  w, uint o) \t{ return tp(u32_upk(v,w,w*o), vwm()); }\nfloat bsn(uint v, uint  o) \t\t\t{ return float(u32_upk(v,1u,o)*2u)-1.0; }\n    \nvec4  sigm(vec4  x, float w) { return 1.0 / ( 1.0 + exp( (-w*2.0 * x * (PI/2.0)) + w * (PI/2.0) ) ); }\nfloat hmp2(float x, float w) { return 3.0*((x-0.5)*(x-0.5))+0.25; }\n\nvec4  gdv( ivec2 of, sampler2D tx ) {\n\tof \t\t= ivec2(gl_FragCoord) + of;\n\tof[0] \t= (of[0] + textureSize(tx,0)[0]) % (textureSize(tx,0)[0]);\n\tof[1] \t= (of[1] + textureSize(tx,0)[1]) % (textureSize(tx,0)[1]);\n\treturn \ttexelFetch( tx, of, 0); }\n    \nvec4 nbhd( vec2 r, sampler2D tx ) {\n//\tPrecision limit of signed float32 for [n] neighbors in a 16 bit texture (symmetry preservation)\n\tuint\tchk = 2147483648u /\n\t\t\t(\t( \tuint( r[0]*r[0]*PI + r[0]*PI + PI\t)\n\t\t\t\t- \tuint( r[1]*r[1]*PI + r[1]*PI\t\t) ) * 128u );\n\tfloat\tpsn = (chk >= 65536u) ? 65536.0 : float(chk);\n\tvec4\ta = vec4(0.0,0.0,0.0,0.0);\n\tfloat\tw = 1.0;\t// Weighting, unused\n\tif(r[0] == 0.0) { return vec4( gdv( ivec2(0,0), tx )*w*psn ); }\n\telse \t\t\t{\n\t\tfor(float i = 0.0; i <= r[0]; i++) {\n\t\t\tfor(float j = 1.0; j <= r[0]; j++) {\n\t\t\t\tfloat\td = round(sqrt(i*i+j*j));\n\t\t\t\t\t\tw = 1.0;\t//\tPer-Neighbor Weighting, unused\n\t\t\t\tif( d <= r[0] && d > r[1] ) {\n\t\t\t\t\tvec4 t0  = gdv( ivec2( i, j), tx ) * w * psn; a += t0 - fract(t0);\n\t\t\t\t\tvec4 t1  = gdv( ivec2( j,-i), tx ) * w * psn; a += t1 - fract(t1);\n\t\t\t\t\tvec4 t2  = gdv( ivec2(-i,-j), tx ) * w * psn; a += t2 - fract(t2);\n\t\t\t\t\tvec4 t3  = gdv( ivec2(-j, i), tx ) * w * psn; a += t3 - fract(t3); } } }\n\t\treturn a; } }\n\nvec4 totl( vec2 r, sampler2D tx ) {\n//\tPrecision limit of signed float32 for [n] neighbors in a 16 bit texture (symmetry preservation)\n\tuint\tchk = 2147483648u /\n\t\t\t(\t( \tuint( r[0]*r[0]*PI + r[0]*PI + PI\t)\n\t\t\t\t- \tuint( r[1]*r[1]*PI + r[1]*PI\t\t) ) * 128u );\n\tfloat\tpsn = (chk >= 65536u) ? 65536.0 : float(chk);\n\tvec4\tb = vec4(0.0,0.0,0.0,0.0);\n\tfloat\tw = 1.0;\t// Weighting, unused\n\tif(r[0] == 0.0) { return vec4( psn * w, psn * w, psn * w, psn * w ); }\n\telse \t\t\t{\n\t\tfor(float i = 0.0; i <= r[0]; i++) {\n\t\t\tfor(float j = 1.0; j <= r[0]; j++) {\n\t\t\t\tfloat\td = round(sqrt(i*i+j*j));\n\t\t\t\t\t\tw = 1.0;\t//\tPer-Neighbor Weighting, unused\n\t\t\t\tif( d <= r[0] && d > r[1] ) { b += psn * w * 4.0; } } }\n\t\treturn b; } }\n\nvec4 bitring(vec4[MAX_RADIUS] rings_a, vec4[MAX_RADIUS] rings_b, uint bits, uint of) {\n\tvec4 sum = vec4(0.0,0.0,0.0,0.0);\n\tvec4 tot = vec4(0.0,0.0,0.0,0.0);\n\tfor(uint i = 0u; i < MAX_RADIUS; i++) {\n\t\tif(u32_upk(bits, 1u, i+of) == 1u) { sum += rings_a[i]; tot += rings_b[i]; } }\n\treturn sigm( (sum / tot), LN ); } // TODO\n    \nvec4 conv(vec2 r, sampler2D tx) {\n\tvec4 nha = nbhd(r, tx);\n\tvec4 nhb = totl(r, tx);\n\treturn \tnha / nhb; }\n    \n//\tUsed to reseed the surface with lumpy noise\nfloat get_xc(float x, float y, float xmod) {\n\tfloat sq = sqrt(mod(x*y+y, xmod)) / sqrt(xmod);\n\tfloat xc = mod((x*x)+(y*y), xmod) / xmod;\n\treturn clamp((sq+xc)*0.5, 0.0, 1.0); }\nfloat shuffle(float x, float y, float xmod, float val) {\n\tval = val * mod( x*y + x, xmod );\n\treturn (val-floor(val)); }\nfloat get_xcn(float x, float y, float xm0, float xm1, float ox, float oy) {\n\tfloat  xc = get_xc(x+ox, y+oy, xm0);\n\treturn shuffle(x+ox, y+oy, xm1, xc); }\nfloat get_lump(float x, float y, float nhsz, float xm0, float xm1) {\n\tfloat \tnhsz_c \t= 0.0;\n\tfloat \txcn \t= 0.0;\n\tfloat \tnh_val \t= 0.0;\n\tfor(float i = -nhsz; i <= nhsz; i += 1.0) {\n\t\tfor(float j = -nhsz; j <= nhsz; j += 1.0) {\n\t\t\tnh_val = round(sqrt(i*i+j*j));\n\t\t\tif(nh_val <= nhsz) {\n\t\t\t\txcn = xcn + get_xcn(x, y, xm0, xm1, i, j);\n\t\t\t\tnhsz_c = nhsz_c + 1.0; } } }\n\tfloat \txcnf \t= ( xcn / nhsz_c );\n\tfloat \txcaf\t= xcnf;\n\tfor(float i = 0.0; i <= nhsz; i += 1.0) {\n\t\t\txcaf \t= clamp((xcnf*xcaf + xcnf*xcaf) * (xcnf+xcnf), 0.0, 1.0); }\n\treturn xcaf; }\nfloat reseed(uint seed, float scl, float amp) {\n\tfloat \tfx = gl_FragCoord[0];\n\tfloat \tfy = gl_FragCoord[1];\n\tfloat \tr0 = get_lump(fx, fy, round( 6.0  * scl), 19.0 + mod(float(u32_upk(ub[63], 24u, 0u)+seed),17.0), 23.0 + mod(float(u32_upk(ub[63], 24u, 0u)+seed),43.0));\n\tfloat \tr1 = get_lump(fx, fy, round( 22.0 * scl), 13.0 + mod(float(u32_upk(ub[63], 24u, 0u)+seed),29.0), 17.0 + mod(float(u32_upk(ub[63], 24u, 0u)+seed),31.0));\n\tfloat \tr2 = get_lump(fx, fy, round( 14.0 * scl), 13.0 + mod(float(u32_upk(ub[63], 24u, 0u)+seed),11.0), 51.0 + mod(float(u32_upk(ub[63], 24u, 0u)+seed),37.0));\n\tfloat \tr3 = get_lump(fx, fy, round( 18.0 * scl), 29.0 + mod(float(u32_upk(ub[63], 24u, 0u)+seed), 7.0), 61.0 + mod(float(u32_upk(ub[63], 24u, 0u)+seed),28.0));\n\treturn clamp( sqrt((r0+r1)*r3*(amp+1.2))-r2*(amp*1.8+0.2) , 0.0, 1.0); }\n\nstruct ConvData {\n\tvec4 \tvalue;\n\tfloat \ttotal;\n};\n\n\nConvData ring( float r ) {\n\n\tconst float psn = 32768.0;\n\n\tfloat tot = 0.0;\n\tvec4  val = vec4(0.0,0.0,0.0,0.0);\n\n\tfloat sq2\t= sqrt(2.0);\n\n\tfloat o_0 = r + 0.5;\n\tfloat o_1 = sq2 * o_0;\n\tfloat o_2 = o_1 / 2.0;\n\tfloat o_3 = sqrt( o_0*o_0 - r*r );\n\tfloat o_4 = o_2 - ( floor(o_2) + 0.5 );\n\tfloat o_5 = floor( o_2 ) + floor( o_4 );\n\n\tfloat i_0 = r - 0.5;\n\tfloat i_1 = sq2 * i_0;\n\tfloat i_2 = i_1 / 2.0;\n\tfloat i_3 = sqrt( i_0*i_0 - r*r );\n\tfloat i_4 = i_2 - ( floor(i_2) + 1.0 );\n\tfloat i_5 = floor( i_2 ) + floor( i_4 );\n\n\tfloat d_0 = ( i_5 ) + 1.0 - ( o_5 );\n\n\tfor(float i = 1.0; i < floor( i_2 ) + 1.0 - d_0; i++) {\n\n\t\tfloat j_0 = sqrt( o_0*o_0 - (i+0.0)*(i+0.0) );\n\t\tfloat j_1 = sqrt( i_0*i_0 - (i+0.0)*(i+0.0) );\n\t\tfloat j_2 = ( 1.0 - abs( sign ( (floor( i_2 ) + 1.0) - i ) ) );\n\n\t\tfor(float j = floor( j_1 ) + j_2; j < floor( j_0 ); j++) {\n\t\t\tval += floor(gdv(ivec2( i, (int(j)+1)), txdata) * psn);\n\t\t\tval += floor(gdv(ivec2( i,-(int(j)+1)), txdata) * psn);\n\t\t\tval += floor(gdv(ivec2(-i,-(int(j)+1)), txdata) * psn);\n\t\t\tval += floor(gdv(ivec2(-i, (int(j)+1)), txdata) * psn);\n\t\t\tval += floor(gdv(ivec2( (int(j)+1), i), txdata) * psn);\n\t\t\tval += floor(gdv(ivec2( (int(j)+1),-i), txdata) * psn);\n\t\t\tval += floor(gdv(ivec2(-(int(j)+1),-i), txdata) * psn);\n\t\t\tval += floor(gdv(ivec2(-(int(j)+1), i), txdata) * psn);\n\t\t\ttot += 8.0 * psn; } }\n\n//\tOrthagonal\n\tval += floor(gdv(ivec2( r, 0), txdata) * psn);\n\tval += floor(gdv(ivec2( 0,-r), txdata) * psn);\n\tval += floor(gdv(ivec2(-r,-0), txdata) * psn);\n\tval += floor(gdv(ivec2(-0, r), txdata) * psn);\n\ttot += 4.0 * psn;\n\n//\tDiagonal\n//\tTODO This is not quite perfect\n\tfloat k_0 = r;\n\tfloat k_1 = sq2 * k_0;\n\tfloat k_2 = k_1 / 2.0;\n\tfloat k_3 = sqrt( k_0*k_0 - r*r );\n\tfloat k_4 = k_2 - ( floor(k_2) + 1.0 );\n\tfloat k_5 = floor( k_2 ) + floor( k_4 );\n\n\tfloat dist = round(k_2);\n\n\tif( sign( o_4 ) == -1.0 ) {\n\t//\tval += gdv(ivec2( (floor(o_5)+1), floor(o_5)+1), txdata);\n\t\tval += floor(gdv(ivec2( (floor(o_5)+1.0), (floor(o_5)+1.0)), txdata) * psn);\n\t\tval += floor(gdv(ivec2( (floor(o_5)+1.0),-(floor(o_5)+1.0)), txdata) * psn);\n\t\tval += floor(gdv(ivec2(-(floor(o_5)+1.0),-(floor(o_5)+1.0)), txdata) * psn);\n\t\tval += floor(gdv(ivec2(-(floor(o_5)+1.0), (floor(o_5)+1.0)), txdata) * psn);\n\t\ttot += 4.0 * psn; }\n\n\treturn ConvData( val, tot ); }\n\n\nvec4 conv( float r ) {\n\tConvData nh = ring( r );\n\treturn \tnh.value / nh.total; }\n    \nvec4 bitmake(ConvData[MAX_RADIUS] rings, uint bits, uint of) {\n\tvec4  sum = vec4(0.0,0.0,0.0,0.0);\n\tfloat tot = 0.0;\n\tfor(uint i = 0u; i < MAX_RADIUS; i++) {\n\t\tif(u32_upk(bits, 1u, i+of) == 1u) { sum += rings[i].value; tot += rings[i].total; } }\n\treturn sum / tot; }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n//\t----    ----    ----    ----    ----    ----    ----    ----\n//\tRule Initilisation\n//\t----    ----    ----    ----    ----    ----    ----    ----\n\n//\tNH Rings\n\tConvData[MAX_RADIUS] nh_rings_m;\n\tfor(uint i = 0u; i < MAX_RADIUS; i++) { nh_rings_m[i] = ring(float(i+1u)); }\n\n//\tParameters\n\tconst\tfloat \tmnp \t= 1.0 / 65536.0;\t\t\t//\tMinimum value of a precise step for 16-bit channel\n\tconst\tfloat \ts  \t\t= mnp *  80.0 *  128.0;\n\tconst\tfloat \tn  \t\t= mnp *  80.0 *   2.0;\n\n//\tOutput Values\n\tvec4 res_c = gdv( ivec2(0, 0), txdata );\n\n//\tResult Values\n\tvec4 res_v = res_c;\n\n//\t----    ----    ----    ----    ----    ----    ----    ----\n//\tUpdate Functions\n//\t----    ----    ----    ----    ----    ----    ----    ----\n\n\tuint[12] nb = uint[12] (\n\t\tub[0],  ub[1],  ub[2],  ub[3],\n\t\tub[4],  ub[5],  ub[6],  ub[7],\n\t\tub[8],  ub[9],  ub[10], ub[11] );\n\n\tuint[24] ur = uint[24] (\n\t\tub[12], ub[13], ub[14], ub[15], \n\t\tub[16], ub[17], ub[18], ub[19],\t\n\t\tub[20], ub[21], ub[22], ub[23],\n\t\tub[24], ub[25], ub[26], ub[27],\t\n\t\tub[28], ub[29], ub[30], ub[31], \n\t\tub[32], ub[33], ub[34], ub[35]  );\n\n\tuint[ 3] ch2 = uint[ 3] ( 2286157824u, 295261525u, 1713547946u );\n\tuint[ 3] ch  = uint[ 3] ( ub[38], ub[39], ub[40] );\n\tuint[ 3] ch3 = uint[ 3] ( ub[41], ub[42], ub[43] );\n\n//\tUpdate Sign\n\tuint[ 2] us = uint[ 2] ( ub[36], ub[37] );\n\n\tvec4[12] smnca_res = vec4[12](res_c,res_c,res_c,res_c,res_c,res_c,res_c,res_c,res_c,res_c,res_c,res_c);\n\n\tvec4 conv1 = conv(1.0);\n\n\tfor(uint i = 0u; i < 24u; i++) {\n\t\tuint  \tcho = u32_upk( ch[i/8u], 2u, (i*4u+0u) & 31u );\n\t\t\t\tcho = (cho == 3u) ? u32_upk( ch2[i/8u], 2u, (i*4u+0u) & 31u ) : cho;\n\t\tuint  \tchi = u32_upk( ch[i/8u], 2u, (i*4u+2u) & 31u );\n\t\t\t\tchi = (chi == 3u) ? u32_upk( ch2[i/8u], 2u, (i*4u+2u) & 31u ) : chi;\n\t\tuint  \tchm = u32_upk( ch3[i/8u], 2u, (i*4u+2u) & 31u );\n\t\t\t\tchm = (chm == 3u) ? u32_upk( ch[i/8u], 2u, (i*4u+2u) & 31u ) : chm;\n                \n\t\tvec4 nhv = bitmake( nh_rings_m, nb[i/2u], (i & 1u) * 16u );\n\n\t\tif( nhv[cho] >= utp( ur[i], 8u, 0u) && nhv[cho] <= utp( ur[i], 8u, 1u)) {\n\t\t\tsmnca_res[i/4u][chi] += bsn(us[i/16u], ((i*2u+0u) & 31u)) * s * res_c[chm]; }\n\n\t\tif( nhv[cho] >= utp( ur[i], 8u, 2u) && nhv[cho] <= utp( ur[i], 8u, 3u)) {\n\t\t\tsmnca_res[i/4u][chi] += bsn(us[i/16u], ((i*2u+1u) & 31u)) * s * res_c[chm]; } }\n\n\tuvec4 dev_idx = uvec4(0u,0u,0u,0u);\n    \n\tvec4 dev = vec4(0.0,0.0,0.0,0.0);\n\tfor(uint i = 0u; i < 6u; i++) {\n\t\tvec4 smnca_res_temp = abs(res_c - smnca_res[i]);\n\t\tif(smnca_res_temp[0] > dev[0]) { dev_idx[0] = i; dev[0] = smnca_res_temp[0]; }\n\t\tif(smnca_res_temp[1] > dev[1]) { dev_idx[1] = i; dev[1] = smnca_res_temp[1]; }\n\t\tif(smnca_res_temp[2] > dev[2]) { dev_idx[2] = i; dev[2] = smnca_res_temp[2]; }\n\t\tif(smnca_res_temp[3] > dev[3]) { dev_idx[3] = i; dev[3] = smnca_res_temp[3]; } }\n\n\tres_v[0] = smnca_res[dev_idx[0]][0];\n\tres_v[1] = smnca_res[dev_idx[1]][1];\n\tres_v[2] = smnca_res[dev_idx[2]][2];\n\tres_v[3] = smnca_res[dev_idx[3]][3];\n\n    res_c = ((res_v + (conv1 * (s*2.13333))) / (1.0 + (s*2.13333)))- 0.01 * s;\n    \n//\t----    ----    ----    ----    ----    ----    ----    ----\n//\tShader Output\n//\t----    ----    ----    ----    ----    ----    ----    ----\n\n\n    if (iMouse.z > 0. && length(iMouse.xy - fragCoord) < 14.0) {\n        res_c[0] = round(mod(float(iFrame),2.0));\n        res_c[1] = round(mod(float(iFrame),3.0));\n        res_c[2] = round(mod(float(iFrame),5.0)); }\n    if (iFrame == 0) { res_c[0] = reseed(0u, 1.0, 0.4); res_c[1] = reseed(1u, 1.0, 0.4); res_c[2] = reseed(2u, 1.0, 0.4); }\n\n//\tForce alpha to 1.0\n\tres_c[3] \t= 1.0;\n    fragColor=clamp(res_c,0.0,1.0);\n}\n\n",
   "name": "Buffer B",
   "description": "",
   "type": "buffer"
  }
 ]
}